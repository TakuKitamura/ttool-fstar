type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Pitptree.ident)
  | STRING of (Pitptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | AMONG
  | WEAKSECRET
  | PARAM
  | ORTEXT
  | FAIL
  | TYPE
  | SET
  | FORALL
  | CONST
  | INJEVENT
  | OR
  | CHANNEL
  | LETFUN
  | DEFINE
  | EXPAND
  | YIELD
  | LEQ
  | PROBA
  | LBRACE
  | RBRACE
  | PROOF
  | EQUIVALENCE
  | OTHERWISE
  | TABLE
  | INSERT
  | GET

open Parsing;;
let _ = parse_error;;
# 2 "pitparser.mly"
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet and Vincent Cheval                        *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2014                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "pitparser.mly"

open Parsing_helper
open Ptree
open Pitptree
exception Syntax

# 114 "pitparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  272 (* REPL *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* EQUAL *);
  277 (* FUN *);
  278 (* EQUATION *);
  279 (* REDUCTION *);
  280 (* PREDICATE *);
  281 (* PROCESS *);
  282 (* SLASH *);
  283 (* DOT *);
    0 (* EOF *);
  284 (* LET *);
  285 (* QUERY *);
  286 (* BEFORE *);
  287 (* PUTBEGIN *);
  288 (* NONINTERF *);
  289 (* EVENT *);
  290 (* NOT *);
  291 (* ELIMTRUE *);
  292 (* FREE *);
  293 (* SUCHTHAT *);
  294 (* CLAUSES *);
  295 (* RED *);
  296 (* EQUIV *);
  297 (* EQUIVEQ *);
  298 (* WEDGE *);
  299 (* DIFF *);
  300 (* COLON *);
  301 (* NOUNIF *);
  302 (* PHASE *);
  303 (* AMONG *);
  304 (* WEAKSECRET *);
  305 (* PARAM *);
  306 (* ORTEXT *);
  307 (* FAIL *);
  308 (* TYPE *);
  309 (* SET *);
  310 (* FORALL *);
  311 (* CONST *);
  312 (* INJEVENT *);
  313 (* OR *);
  314 (* CHANNEL *);
  315 (* LETFUN *);
  316 (* DEFINE *);
  317 (* EXPAND *);
  318 (* YIELD *);
  319 (* LEQ *);
  320 (* PROBA *);
  321 (* LBRACE *);
  322 (* RBRACE *);
  323 (* PROOF *);
  324 (* EQUIVALENCE *);
  325 (* OTHERWISE *);
  326 (* TABLE *);
  327 (* INSERT *);
  328 (* GET *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* STRING *);
  271 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\001\000\001\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\023\000\
\023\000\018\000\018\000\003\000\003\000\008\000\008\000\024\000\
\024\000\024\000\013\000\013\000\011\000\011\000\025\000\025\000\
\005\000\005\000\004\000\004\000\026\000\026\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\028\000\028\000\027\000\027\000\029\000\029\000\016\000\016\000\
\015\000\015\000\030\000\030\000\030\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\033\000\
\033\000\031\000\031\000\034\000\034\000\034\000\034\000\032\000\
\032\000\014\000\014\000\014\000\014\000\037\000\037\000\038\000\
\038\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\040\000\040\000\036\000\036\000\041\000\041\000\041\000\
\041\000\039\000\039\000\042\000\042\000\019\000\019\000\043\000\
\043\000\044\000\044\000\006\000\006\000\007\000\007\000\009\000\
\009\000\045\000\045\000\045\000\045\000\021\000\021\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\047\000\047\000\051\000\
\051\000\048\000\048\000\049\000\049\000\049\000\049\000\049\000\
\052\000\052\000\050\000\050\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\053\000\053\000\046\000\046\000\
\000\000\000\000"

let yylen = "\002\000\
\005\000\010\000\012\000\005\000\007\000\005\000\004\000\007\000\
\008\000\005\000\007\000\006\000\009\000\006\000\009\000\006\000\
\006\000\006\000\004\000\006\000\004\000\006\000\004\000\004\000\
\006\000\004\000\005\000\004\000\005\000\006\000\004\000\004\000\
\007\000\003\000\009\000\007\000\000\000\004\000\005\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\001\000\003\000\003\000\000\000\003\000\001\000\000\000\
\002\000\003\000\005\000\003\000\001\000\000\000\003\000\000\000\
\001\000\001\000\001\000\000\000\003\000\001\000\001\000\004\000\
\006\000\001\000\003\000\003\000\004\000\003\000\003\000\003\000\
\003\000\001\000\001\000\000\000\005\000\001\000\003\000\001\000\
\003\000\001\000\001\000\004\000\004\000\004\000\001\000\006\000\
\006\000\003\000\003\000\004\000\003\000\003\000\006\000\004\000\
\004\000\004\000\003\000\003\000\005\000\002\000\006\000\003\000\
\001\000\001\000\000\000\006\000\004\000\005\000\003\000\001\000\
\000\000\006\000\006\000\002\000\006\000\002\000\000\000\002\000\
\000\000\004\000\006\000\001\000\003\000\005\000\002\000\002\000\
\006\000\003\000\001\000\001\000\000\000\006\000\004\000\005\000\
\003\000\001\000\000\000\003\000\005\000\003\000\001\000\003\000\
\000\000\006\000\005\000\005\000\004\000\006\000\004\000\004\000\
\006\000\003\000\001\000\003\000\003\000\004\000\003\000\003\000\
\001\000\004\000\002\000\005\000\001\000\001\000\006\000\005\000\
\007\000\007\000\004\000\007\000\004\000\007\000\006\000\007\000\
\009\000\003\000\006\000\003\000\003\000\002\000\000\000\002\000\
\000\000\002\000\000\000\001\000\003\000\003\000\004\000\002\000\
\003\000\001\000\001\000\000\000\004\000\006\000\001\000\003\000\
\003\000\004\000\003\000\003\000\007\000\004\000\006\000\006\000\
\008\000\006\000\008\000\003\000\003\000\001\000\001\000\000\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\225\000\000\000\226\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\083\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\034\000\000\000\000\000\000\000\000\000\124\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\047\000\040\000\041\000\042\000\046\000\044\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\173\000\000\000\000\000\000\000\000\000\000\000\174\000\000\000\
\000\000\000\000\000\000\065\000\066\000\000\000\000\000\067\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\000\000\000\000\000\000\108\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\000\000\000\000\099\000\000\000\089\000\
\000\000\000\000\000\000\023\000\087\000\000\000\007\000\000\000\
\026\000\000\000\000\000\080\000\000\000\000\000\000\000\000\000\
\000\000\031\000\000\000\076\000\000\000\150\000\054\000\000\000\
\152\000\000\000\000\000\000\000\000\000\167\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\140\000\128\000\
\000\000\000\000\000\000\000\000\019\000\024\000\000\000\000\000\
\000\000\000\000\000\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\171\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\000\000\
\000\000\000\000\052\000\006\000\000\000\004\000\000\000\000\000\
\010\000\000\000\000\000\000\000\112\000\000\000\000\000\000\000\
\120\000\000\000\000\000\000\000\092\000\093\000\104\000\100\000\
\105\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\081\000\072\000\000\000\077\000\000\000\000\000\000\000\000\000\
\000\000\166\000\000\000\136\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\027\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\223\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\051\000\000\000\168\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\203\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\188\000\189\000\000\000\000\000\000\000\039\000\
\000\000\069\000\000\000\000\000\000\000\000\000\012\000\000\000\
\000\000\000\000\109\000\000\000\059\000\000\000\000\000\020\000\
\085\000\022\000\000\000\025\000\000\000\149\000\030\000\000\000\
\000\000\133\000\000\000\000\000\000\000\138\000\000\000\000\000\
\000\000\000\000\018\000\016\000\017\000\000\000\000\000\000\000\
\000\000\220\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\209\000\000\000\000\000\000\000\000\000\
\057\000\000\000\000\000\000\000\000\000\170\000\000\000\000\000\
\000\000\000\000\198\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\161\000\158\000\000\000\000\000\
\103\000\000\000\000\000\096\000\000\000\097\000\008\000\073\000\
\033\000\000\000\000\000\000\000\000\000\146\000\130\000\000\000\
\126\000\123\000\122\000\125\000\005\000\000\000\000\000\221\000\
\000\000\205\000\000\000\000\000\000\000\210\000\000\000\036\000\
\011\000\058\000\000\000\000\000\000\000\172\000\000\000\176\000\
\197\000\201\000\199\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\134\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\175\000\000\000\000\000\000\000\000\000\000\000\
\187\000\183\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\118\000\000\000\131\000\000\000\000\000\137\000\015\000\
\206\000\000\000\000\000\000\000\000\000\035\000\178\000\177\000\
\182\000\180\000\000\000\000\000\184\000\000\000\000\000\002\000\
\116\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\144\000\000\000\000\000\000\000\185\000\003\000\000\000\
\142\000\000\000\156\000\000\000\000\000\000\000\000\000\154\000"

let yydgoto = "\003\000\
\029\000\030\000\097\000\206\000\207\000\078\002\036\000\070\000\
\034\000\202\000\217\000\133\001\218\000\078\000\051\000\056\000\
\108\000\184\000\066\000\138\000\072\000\185\000\186\000\154\001\
\035\000\208\000\139\000\140\000\057\000\053\000\109\000\088\001\
\110\000\089\001\021\001\022\001\208\001\160\000\013\002\023\001\
\014\002\068\000\073\000\123\002\157\000\134\001\171\001\040\002\
\161\001\162\001\077\002\163\001\135\001"

let yysindex = "\253\001\
\025\005\025\005\000\000\022\255\018\255\018\255\063\255\184\255\
\052\255\042\000\056\000\246\000\183\255\074\000\061\255\008\255\
\080\000\074\000\096\000\110\000\074\000\074\000\125\000\135\000\
\162\000\190\000\205\255\202\000\000\000\038\255\000\000\129\000\
\247\000\006\001\185\000\006\001\185\000\075\000\038\000\020\001\
\200\002\016\001\048\255\025\001\152\255\029\001\059\001\067\001\
\070\001\073\001\066\001\212\004\092\001\105\000\093\001\077\001\
\104\001\009\000\103\001\045\005\108\001\185\000\057\255\111\001\
\000\000\118\001\222\255\131\001\132\001\094\001\126\001\025\005\
\185\000\043\255\129\001\139\001\136\001\120\001\138\001\006\001\
\006\001\148\001\127\001\147\001\078\000\175\001\176\001\149\001\
\083\001\178\001\135\004\135\004\016\255\142\001\174\001\074\000\
\160\001\184\001\153\000\162\001\038\001\016\255\163\001\247\000\
\135\004\200\002\189\001\124\255\190\001\000\000\188\001\200\002\
\016\255\179\001\169\001\180\001\200\002\200\002\200\002\200\002\
\160\255\025\005\200\002\200\002\200\002\200\002\200\002\160\255\
\214\001\206\001\025\005\206\001\016\255\025\005\200\002\025\005\
\185\000\024\255\217\001\000\000\185\000\016\255\185\000\185\000\
\185\000\025\005\185\000\185\000\185\000\126\001\074\000\016\255\
\181\001\218\001\000\000\224\000\046\255\165\002\208\001\000\000\
\210\001\165\002\026\255\025\005\025\005\201\001\205\001\106\000\
\016\255\025\005\247\000\124\005\016\255\016\255\025\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\170\001\
\083\001\229\001\016\255\135\004\230\001\237\001\238\001\243\001\
\000\000\149\004\124\005\124\000\249\001\235\001\000\000\250\001\
\254\001\008\000\108\004\000\000\000\000\009\002\012\002\000\000\
\000\000\010\002\025\005\185\000\025\005\185\000\014\002\025\005\
\018\002\000\000\149\255\111\000\200\002\000\000\018\000\032\002\
\037\002\200\002\074\000\074\000\036\002\172\001\041\002\227\003\
\021\002\000\000\006\002\244\002\136\255\000\000\244\002\000\000\
\185\000\004\002\025\002\000\000\000\000\049\002\000\000\070\005\
\000\000\055\255\185\000\000\000\050\002\016\002\100\000\244\004\
\028\002\000\000\031\000\000\000\005\004\000\000\000\000\006\001\
\000\000\185\000\185\000\185\000\061\255\000\000\053\002\064\002\
\165\002\065\002\079\002\073\002\084\002\086\002\000\000\000\000\
\165\002\093\002\198\255\081\002\000\000\000\000\025\005\025\005\
\083\002\085\002\006\001\000\000\115\002\117\002\124\005\111\002\
\121\002\124\005\124\000\122\002\255\004\125\002\126\002\000\000\
\025\005\000\000\083\001\127\002\156\000\131\002\124\005\124\005\
\124\005\027\255\000\000\206\003\015\001\119\255\124\005\090\002\
\118\002\156\255\130\002\139\002\154\002\135\004\000\000\013\000\
\124\002\016\255\000\000\000\000\034\255\000\000\062\255\006\001\
\000\000\142\002\025\005\200\002\000\000\170\002\144\002\182\002\
\000\000\146\002\247\000\125\003\000\000\000\000\000\000\000\000\
\000\000\149\002\025\005\193\002\025\005\176\002\025\005\185\000\
\000\000\000\000\155\002\000\000\025\005\178\002\005\004\005\004\
\005\004\000\000\165\002\000\000\202\002\205\002\165\002\192\002\
\165\002\173\002\213\002\173\002\025\005\000\000\000\000\025\005\
\025\005\197\002\207\002\124\005\232\255\224\002\000\000\131\002\
\124\005\244\003\199\002\210\002\124\005\124\005\025\005\124\005\
\124\005\124\005\172\002\216\002\000\000\000\000\221\002\000\000\
\096\255\208\002\082\000\250\000\254\002\247\002\135\004\148\255\
\006\003\005\003\000\000\015\001\016\255\149\000\124\005\124\005\
\124\005\135\004\000\000\000\000\124\005\015\001\004\003\000\000\
\016\255\000\000\018\255\018\255\246\002\135\004\000\000\021\003\
\200\002\255\002\000\000\017\003\000\000\200\002\018\003\000\000\
\000\000\000\000\025\005\000\000\114\002\000\000\000\000\025\005\
\031\003\000\000\195\000\030\003\165\002\000\000\027\003\022\003\
\026\255\022\003\000\000\000\000\000\000\025\005\124\005\019\001\
\124\005\000\000\248\002\039\003\124\005\124\005\124\005\038\002\
\019\003\000\000\170\000\000\000\208\004\025\005\025\005\025\005\
\000\000\053\003\016\255\124\005\015\001\000\000\135\004\214\255\
\016\255\015\001\000\000\061\003\037\002\158\003\177\003\062\003\
\004\003\063\003\069\003\034\000\000\000\000\000\025\005\230\255\
\000\000\252\001\200\002\000\000\212\004\000\000\000\000\000\000\
\000\000\165\002\045\003\068\003\070\003\000\000\000\000\073\003\
\000\000\000\000\000\000\000\000\000\000\074\005\124\005\000\000\
\016\255\000\000\049\001\017\004\192\004\000\000\023\003\000\000\
\000\000\000\000\130\002\212\002\071\003\000\000\135\004\000\000\
\000\000\000\000\000\000\135\004\135\004\130\002\130\002\045\255\
\061\255\078\003\000\000\025\005\018\000\064\003\084\003\165\002\
\076\003\000\000\165\002\025\005\215\002\091\003\124\005\124\005\
\124\005\025\005\000\000\130\002\130\002\004\003\214\255\214\255\
\000\000\000\000\135\004\124\005\089\003\006\001\185\000\025\005\
\000\000\000\000\018\000\000\000\107\003\165\002\000\000\000\000\
\000\000\124\005\208\004\060\003\092\003\000\000\000\000\000\000\
\000\000\000\000\004\003\204\004\000\000\093\003\216\004\000\000\
\000\000\195\000\117\003\208\004\124\005\124\005\089\003\025\005\
\185\000\000\000\195\000\208\004\208\004\000\000\000\000\246\254\
\000\000\061\255\000\000\185\000\078\005\185\000\246\254\000\000"

let yyrindex = "\000\000\
\039\255\123\004\000\000\000\000\071\001\071\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\187\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\105\003\000\000\105\003\000\000\105\003\000\000\000\000\
\131\003\000\000\124\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\194\255\111\003\159\255\000\000\000\000\
\112\003\000\000\000\000\000\000\000\000\135\003\076\005\000\000\
\000\000\000\000\000\000\134\003\040\000\000\000\000\000\004\000\
\000\000\119\003\000\000\000\000\000\000\000\000\000\000\105\003\
\105\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\143\003\000\000\000\000\000\000\
\000\000\087\004\000\000\000\000\000\000\143\003\000\000\147\003\
\000\000\000\000\023\000\159\003\000\000\000\000\210\004\131\003\
\000\000\000\000\000\000\000\000\131\003\000\000\131\003\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\143\003\004\000\000\000\004\000\
\000\000\161\003\000\000\000\000\135\003\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\239\255\000\000\164\003\000\000\000\000\
\000\000\164\003\000\000\004\000\004\000\000\000\000\000\000\000\
\000\000\004\000\147\003\000\000\143\003\143\003\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\255\106\003\143\003\000\000\000\000\000\000\000\000\234\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\166\003\000\000\
\000\000\000\000\004\000\000\000\004\000\000\000\000\000\004\000\
\000\000\000\000\000\000\000\000\000\000\000\000\168\003\000\000\
\195\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\167\000\133\005\106\002\000\000\102\005\000\000\
\000\000\159\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\179\000\000\000\000\000\
\204\255\000\000\169\004\000\000\160\000\000\000\000\000\105\003\
\000\000\000\000\000\000\000\000\187\002\000\000\000\000\000\000\
\164\003\000\000\228\001\000\000\172\003\000\000\000\000\000\000\
\000\000\000\000\119\003\000\000\000\000\000\000\004\000\004\000\
\000\000\000\000\105\003\000\000\000\000\000\000\175\003\000\000\
\215\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\137\003\000\000\000\000\
\175\003\234\002\000\000\000\000\178\003\167\003\000\000\000\000\
\000\000\010\003\084\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\098\255\000\000\141\255\105\003\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
\000\000\236\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\005\004\000\000\000\004\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\004\000\000\000\241\255\251\255\
\059\000\000\000\000\000\000\000\000\000\211\002\164\003\000\000\
\000\000\051\001\000\000\051\001\004\000\000\000\000\000\004\000\
\004\000\000\000\000\000\000\000\190\001\000\000\000\000\137\003\
\175\003\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\211\000\
\179\003\000\000\000\000\178\003\000\000\010\001\000\000\000\000\
\175\003\000\000\000\000\000\000\175\003\178\003\042\003\000\000\
\000\000\000\000\071\001\071\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\004\000\
\000\000\000\000\181\003\000\000\000\000\000\000\000\000\119\003\
\000\000\119\003\000\000\000\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\001\000\000\113\001\000\000\145\001\124\003\004\000\004\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\071\004\
\000\000\000\000\000\000\000\000\169\255\082\003\114\003\000\000\
\146\003\000\000\000\000\105\003\000\000\000\000\004\000\000\000\
\000\000\184\003\000\000\000\000\141\005\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\089\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\084\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\084\000\084\000\194\003\
\187\002\000\000\000\000\004\000\000\000\186\003\000\000\000\000\
\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\084\000\084\000\226\003\071\004\071\004\
\000\000\000\000\000\000\000\000\007\004\105\003\000\000\004\000\
\000\000\000\000\000\000\000\000\187\003\000\000\000\000\000\000\
\000\000\000\000\193\001\137\002\169\002\000\000\000\000\000\000\
\000\000\000\000\039\004\194\003\000\000\000\000\000\000\000\000\
\000\000\000\000\188\003\241\001\000\000\000\000\007\004\004\000\
\000\000\000\000\000\000\017\002\057\002\000\000\000\000\021\000\
\000\000\187\002\000\000\000\000\000\000\000\000\120\000\000\000"

let yygindex = "\000\000\
\000\000\007\000\221\255\171\255\155\255\000\000\016\003\254\255\
\024\003\201\255\035\004\095\255\016\000\099\255\001\001\119\001\
\249\255\163\003\199\255\243\255\199\003\000\000\031\004\087\003\
\001\000\151\003\088\004\174\255\000\000\000\000\171\001\000\000\
\012\004\243\253\241\254\109\255\104\003\136\000\000\000\123\003\
\161\254\000\000\225\253\108\002\000\000\229\254\212\254\103\254\
\102\255\031\255\150\002\009\003\029\003"

let yytablesize = 1704
let yytable = "\067\000\
\100\000\052\000\103\000\037\000\060\000\028\001\037\000\071\001\
\031\000\123\001\045\001\225\000\176\001\154\000\026\001\080\000\
\215\000\079\002\083\000\084\000\074\000\099\000\172\001\101\000\
\050\000\055\000\251\000\059\000\204\000\157\001\057\001\077\000\
\148\000\060\001\032\000\075\000\203\000\048\000\027\001\082\002\
\254\000\065\001\179\001\145\000\166\000\167\000\158\000\246\000\
\095\000\219\000\008\001\112\000\040\000\075\000\013\001\041\000\
\075\002\104\001\122\002\156\000\141\000\042\000\091\000\037\000\
\043\000\147\000\148\000\035\001\159\000\105\002\180\001\033\000\
\014\001\205\000\145\000\038\000\148\000\076\000\155\000\044\000\
\149\000\076\002\045\000\191\000\046\000\047\000\113\000\046\001\
\047\001\158\001\124\002\113\000\006\001\210\000\048\000\076\000\
\147\000\148\000\220\000\201\001\142\000\052\001\233\001\160\000\
\148\000\092\000\037\000\048\000\069\000\220\001\230\000\149\000\
\232\000\052\000\071\000\235\000\236\000\237\000\238\000\239\000\
\052\000\049\000\164\001\250\000\160\000\117\001\221\000\248\000\
\234\000\255\000\000\001\001\001\053\001\003\001\004\001\005\001\
\138\001\244\000\059\001\075\000\247\000\248\001\249\000\123\000\
\140\001\250\001\159\000\072\001\007\001\155\001\156\001\164\001\
\002\001\124\000\075\000\123\000\070\001\166\001\100\001\169\001\
\040\000\086\000\165\001\041\000\170\001\125\000\126\000\159\000\
\105\001\042\000\029\001\030\001\107\000\097\002\098\002\083\001\
\036\001\125\000\126\000\101\002\127\000\048\001\075\000\061\000\
\115\000\086\000\062\000\044\000\197\000\016\002\045\000\241\001\
\046\000\047\000\244\001\063\000\039\000\075\000\077\001\060\000\
\079\001\158\000\091\000\060\000\251\001\060\000\075\000\116\000\
\075\000\075\000\075\000\064\001\075\000\118\002\207\000\048\000\
\064\000\076\001\092\001\078\001\091\000\070\001\081\001\159\000\
\093\001\094\001\216\001\204\001\110\001\049\000\075\000\060\000\
\039\002\065\000\217\001\224\001\225\001\070\001\227\001\228\001\
\229\001\145\000\075\000\075\000\075\000\075\000\067\002\163\000\
\146\000\162\000\055\002\142\001\111\001\112\001\113\001\130\001\
\052\002\073\002\074\002\164\000\075\000\246\001\247\001\147\000\
\148\000\163\000\114\002\162\000\133\000\089\000\175\001\070\001\
\075\000\144\001\145\001\121\002\070\001\164\000\149\000\095\002\
\096\002\095\000\157\000\095\000\037\000\095\000\086\001\095\000\
\146\001\087\001\095\000\134\000\208\000\126\001\127\001\096\000\
\085\002\104\000\095\000\087\002\181\001\055\000\055\000\157\000\
\055\000\095\000\145\000\019\002\095\000\022\002\054\000\149\001\
\049\002\105\000\139\001\027\002\028\002\029\002\075\000\245\001\
\095\000\095\000\055\000\165\000\058\000\037\000\107\002\037\000\
\147\000\148\000\036\002\252\001\184\001\075\000\102\000\095\000\
\096\000\171\000\037\002\055\000\236\001\165\000\069\000\191\000\
\191\000\183\001\197\001\191\000\079\000\191\000\191\000\191\000\
\191\000\172\000\191\000\191\000\191\000\142\001\191\000\240\001\
\108\001\192\001\189\001\194\001\081\000\196\001\191\000\191\000\
\212\000\084\001\249\001\199\001\191\000\061\002\033\001\145\000\
\034\001\233\000\082\000\144\001\145\001\155\000\000\002\061\001\
\240\000\191\000\123\000\211\001\093\000\035\002\212\001\213\001\
\062\001\085\000\146\001\041\002\124\000\147\000\148\000\063\001\
\211\000\191\000\155\000\086\000\113\000\226\001\234\001\129\000\
\125\000\126\000\191\000\191\000\149\000\091\002\092\002\093\002\
\152\001\075\000\078\000\070\001\078\000\078\000\078\000\127\000\
\078\000\098\000\100\002\098\000\212\000\098\000\087\000\098\000\
\075\000\002\002\098\000\062\002\037\000\148\000\005\002\038\002\
\108\002\061\000\078\000\148\000\062\000\142\001\144\001\145\001\
\215\000\098\000\147\000\148\000\098\000\098\000\078\000\078\000\
\078\000\007\002\088\000\116\002\117\002\146\001\009\002\011\002\
\098\000\149\000\012\002\144\001\145\001\196\000\090\000\196\000\
\050\002\207\000\064\000\207\000\021\002\207\000\207\000\098\000\
\207\000\207\000\207\000\207\000\078\000\207\000\207\000\207\000\
\207\000\207\000\207\000\065\000\031\002\032\002\033\002\070\002\
\213\000\207\000\207\000\145\000\071\002\072\002\040\000\207\000\
\243\000\041\000\245\000\054\002\237\001\001\000\002\000\042\000\
\207\000\207\000\043\000\094\000\207\000\051\002\010\001\011\001\
\012\001\147\000\148\000\096\000\200\000\142\001\200\000\207\000\
\219\000\044\000\061\001\099\002\207\000\023\002\046\000\047\000\
\149\000\106\000\224\000\160\001\111\000\207\000\207\000\229\000\
\117\000\231\000\063\001\144\001\145\001\114\000\142\001\208\000\
\208\000\208\000\102\002\208\000\208\000\048\000\208\000\208\000\
\208\000\208\000\146\001\208\000\208\000\208\000\208\000\208\000\
\217\000\214\000\081\002\049\000\144\001\145\001\118\000\208\000\
\208\000\103\002\088\002\063\002\142\001\208\000\119\000\064\000\
\094\002\120\000\064\000\146\001\127\000\127\000\208\000\147\000\
\148\000\121\000\208\000\064\000\176\000\177\000\104\002\018\002\
\214\000\020\002\144\001\145\001\122\000\208\000\149\000\178\000\
\179\000\180\000\208\000\120\002\128\000\130\000\181\000\131\000\
\064\000\146\001\132\000\208\000\208\000\182\000\125\002\135\000\
\127\002\137\000\143\000\212\000\212\000\212\000\119\002\212\000\
\212\000\064\000\212\000\212\000\212\000\212\000\144\000\212\000\
\212\000\212\000\212\000\212\000\095\000\150\000\151\000\183\000\
\218\000\152\000\153\000\212\000\212\000\161\000\162\000\095\000\
\163\000\212\000\164\000\211\000\211\000\211\000\095\000\211\000\
\211\000\095\000\211\000\211\000\211\000\211\000\212\000\211\000\
\211\000\211\000\211\000\211\000\165\000\095\000\095\000\168\000\
\216\000\212\000\169\000\211\000\211\000\170\000\212\000\175\000\
\096\001\211\000\173\000\174\000\095\000\187\000\209\000\212\000\
\212\000\113\000\211\000\141\000\213\000\216\000\211\000\123\000\
\112\000\223\000\222\000\215\000\215\000\215\000\226\000\215\000\
\215\000\124\000\215\000\215\000\215\000\215\000\211\000\215\000\
\215\000\215\000\215\000\215\000\227\000\125\000\126\000\211\000\
\211\000\241\000\242\000\215\000\215\000\252\000\024\001\228\000\
\142\000\215\000\009\001\031\001\127\000\025\001\132\000\032\001\
\132\000\169\000\132\000\049\001\132\000\051\001\215\000\132\000\
\055\001\056\001\054\001\213\000\213\000\213\000\057\001\213\000\
\213\000\067\001\213\000\213\000\213\000\213\000\215\000\213\000\
\213\000\213\000\213\000\213\000\053\002\066\001\068\001\215\000\
\215\000\191\000\069\001\213\000\213\000\073\001\074\001\123\000\
\075\001\213\000\080\001\219\000\219\000\219\000\082\001\219\000\
\219\000\124\000\219\000\219\000\219\000\219\000\213\000\219\000\
\219\000\219\000\219\000\219\000\090\001\125\000\126\000\091\001\
\095\001\186\000\030\002\219\000\219\000\097\001\213\000\099\001\
\126\000\219\000\129\000\101\001\127\000\102\001\106\001\213\000\
\213\000\142\001\115\001\217\000\217\000\217\000\219\000\217\000\
\217\000\107\001\217\000\217\000\217\000\217\000\148\000\217\000\
\217\000\217\000\217\000\217\000\116\001\118\001\219\000\144\001\
\145\001\181\000\119\001\217\000\217\000\120\001\121\001\219\000\
\219\000\217\000\122\001\214\000\214\000\214\000\146\001\214\000\
\214\000\124\001\214\000\214\000\214\000\214\000\217\000\214\000\
\214\000\214\000\214\000\125\001\102\000\128\001\102\000\129\001\
\102\000\179\000\102\000\214\000\214\000\102\000\217\000\131\001\
\008\002\214\000\132\001\136\001\137\001\141\001\167\001\217\000\
\217\000\147\001\148\001\151\001\102\000\145\000\214\000\102\000\
\153\001\168\001\170\001\218\000\218\000\218\000\173\001\218\000\
\218\000\190\000\218\000\218\000\218\000\218\000\214\000\218\000\
\218\000\218\000\218\000\147\000\148\000\174\001\186\001\214\000\
\214\000\182\001\102\000\218\000\218\000\015\001\016\001\177\001\
\017\001\218\000\149\000\216\000\216\000\216\000\018\001\216\000\
\216\000\019\001\216\000\216\000\216\000\216\000\218\000\216\000\
\216\000\216\000\216\000\153\000\187\001\185\001\153\000\188\001\
\020\001\193\000\191\001\216\000\216\000\193\001\218\000\153\000\
\040\000\216\000\195\001\041\000\200\001\198\001\202\001\218\000\
\218\000\042\000\203\001\205\001\107\000\135\000\216\000\135\000\
\068\002\135\000\207\001\135\000\153\000\089\002\135\000\214\001\
\209\001\194\000\215\001\044\000\218\001\223\001\216\000\142\001\
\046\000\047\000\142\001\222\001\230\001\153\000\169\000\216\000\
\216\000\169\000\231\001\169\000\169\000\169\000\169\000\232\001\
\169\000\169\000\169\000\235\001\169\000\144\001\145\001\048\000\
\144\001\145\001\238\001\239\001\169\000\169\000\195\000\123\000\
\242\001\243\001\169\000\070\001\146\001\049\000\191\000\146\001\
\255\001\191\000\003\002\191\000\191\000\191\000\191\000\169\000\
\191\000\191\000\191\000\001\002\191\000\125\000\126\000\004\002\
\006\002\010\002\015\002\025\002\191\000\191\000\192\000\169\000\
\123\000\017\002\191\000\026\002\127\000\186\000\186\000\159\000\
\169\000\169\000\124\000\186\000\186\000\186\000\186\000\191\000\
\186\000\186\000\186\000\034\002\186\000\145\001\125\000\126\000\
\056\002\043\002\046\002\047\002\186\000\186\000\195\000\191\000\
\083\002\048\002\186\000\069\002\058\002\127\000\109\002\142\001\
\191\000\191\000\057\002\123\000\059\002\181\000\181\000\186\000\
\066\002\181\000\084\002\181\000\181\000\124\000\181\000\086\002\
\181\000\181\000\181\000\090\002\181\000\144\001\145\001\186\000\
\080\002\125\000\126\000\039\002\181\000\181\000\110\002\142\001\
\186\000\186\000\181\000\106\002\146\001\179\000\179\000\112\002\
\127\000\179\000\037\000\179\000\179\000\115\002\179\000\181\000\
\179\000\179\000\179\000\053\000\179\000\144\001\145\001\115\000\
\190\001\090\000\088\000\084\000\179\000\179\000\151\000\181\000\
\123\000\129\000\179\000\068\000\146\001\190\000\190\000\062\000\
\181\000\181\000\124\000\190\000\190\000\190\000\190\000\179\000\
\190\000\190\000\190\000\113\000\190\000\082\000\125\000\126\000\
\141\000\044\002\070\000\050\000\190\000\190\000\121\000\179\000\
\139\000\142\001\190\000\224\000\056\000\127\000\204\000\202\000\
\179\000\179\000\196\000\147\000\045\002\037\000\119\000\190\000\
\117\000\145\000\143\000\254\001\142\001\193\000\193\000\144\001\
\145\001\193\000\253\001\193\000\193\000\037\001\193\000\190\000\
\193\000\193\000\193\000\114\001\193\000\150\001\146\001\050\001\
\190\000\190\000\144\001\145\001\193\000\193\000\219\001\159\001\
\178\001\142\001\193\000\210\001\253\000\194\000\194\000\098\001\
\085\001\146\001\128\002\194\000\194\000\194\000\194\000\193\000\
\194\000\194\000\194\000\206\001\194\000\024\002\123\000\144\001\
\145\001\111\002\042\002\000\000\194\000\194\000\000\000\193\000\
\124\000\000\000\194\000\000\000\000\000\221\001\146\001\142\001\
\193\000\193\000\195\000\195\000\125\000\126\000\195\000\194\000\
\195\000\195\000\195\000\195\000\000\000\195\000\195\000\195\000\
\145\000\000\000\000\000\127\000\064\002\144\001\145\001\194\000\
\000\000\195\000\195\000\000\000\142\001\000\000\000\000\195\000\
\194\000\194\000\192\000\192\000\146\001\000\000\147\000\148\000\
\192\000\192\000\192\000\192\000\195\000\192\000\192\000\192\000\
\000\000\192\000\144\001\145\001\000\000\149\000\000\000\000\000\
\000\000\192\000\192\000\000\000\195\000\000\000\000\000\192\000\
\000\000\146\001\195\000\195\000\000\000\195\000\195\000\000\000\
\195\000\195\000\195\000\195\000\192\000\195\000\195\000\195\000\
\000\000\074\000\000\000\074\000\074\000\074\000\000\000\074\000\
\000\000\195\000\195\000\000\000\192\000\000\000\000\000\195\000\
\000\000\000\000\074\000\000\000\000\000\192\000\192\000\188\000\
\000\000\074\000\000\000\070\001\195\000\189\000\190\000\191\000\
\192\000\000\000\193\000\194\000\195\000\074\000\074\000\074\000\
\074\000\074\000\000\000\000\000\195\000\000\000\000\000\196\000\
\000\000\000\000\188\000\000\000\197\000\195\000\195\000\074\000\
\189\000\190\000\191\000\192\000\000\000\193\000\194\000\195\000\
\188\000\198\000\000\000\074\000\000\000\000\000\189\000\190\000\
\191\000\058\001\196\000\193\000\194\000\195\000\000\000\197\000\
\000\000\199\000\000\000\079\000\000\000\079\000\079\000\079\000\
\196\000\079\000\200\000\201\000\198\000\197\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\198\000\079\000\199\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\002\000\000\200\000\201\000\079\000\
\079\000\079\000\199\000\142\001\110\000\000\000\110\000\075\002\
\110\000\000\000\110\000\200\000\201\000\110\000\000\000\142\001\
\000\000\079\000\000\000\142\001\000\000\110\000\000\000\123\000\
\000\000\144\001\145\001\113\002\110\000\079\000\094\000\110\000\
\094\000\124\000\094\000\000\000\094\000\144\001\145\001\094\000\
\146\001\144\001\145\001\110\000\110\000\125\000\126\000\094\000\
\000\000\147\000\148\000\000\000\146\001\000\000\094\000\145\000\
\146\001\094\000\110\000\106\000\127\000\106\000\109\001\106\000\
\149\000\106\000\142\001\000\000\106\000\094\000\094\000\000\000\
\000\000\143\001\000\000\000\000\106\000\147\000\148\000\000\000\
\000\000\000\000\000\000\106\000\094\000\000\000\106\000\000\000\
\144\001\145\001\000\000\000\000\149\000\004\000\005\000\006\000\
\007\000\000\000\106\000\106\000\008\000\009\000\000\000\146\001\
\010\000\011\000\012\000\013\000\014\000\000\000\015\000\000\000\
\123\000\106\000\000\000\000\000\000\000\016\000\000\000\136\000\
\017\000\018\000\124\000\000\000\019\000\020\000\000\000\021\000\
\000\000\000\000\022\000\023\000\024\000\025\000\125\000\126\000\
\026\000\123\000\000\000\027\000\000\000\142\001\028\000\074\000\
\103\001\126\002\000\000\124\000\060\002\127\000\074\000\000\000\
\101\000\000\000\101\000\000\000\101\000\000\000\101\000\125\000\
\126\000\101\000\000\000\144\001\145\001\074\000\074\000\147\000\
\148\000\000\000\000\000\000\000\038\001\000\000\127\000\039\001\
\101\000\000\000\146\001\101\000\074\000\040\001\149\000\107\000\
\041\001\107\000\000\000\107\000\042\001\107\000\000\000\111\000\
\107\000\111\000\000\000\111\000\000\000\111\000\000\000\043\001\
\111\000\000\000\000\000\000\000\000\000\044\001\000\000\107\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\111\000"

let yycheck = "\013\000\
\036\000\009\000\038\000\000\000\012\000\163\000\006\000\000\000\
\002\000\025\001\172\000\113\000\000\000\071\000\162\000\018\000\
\102\000\049\002\021\000\022\000\013\001\035\000\067\001\037\000\
\009\000\010\000\003\001\012\000\013\001\057\001\004\001\016\000\
\043\001\195\000\013\001\028\001\092\000\009\001\013\001\053\002\
\142\000\196\000\009\001\020\001\080\000\081\000\004\001\133\000\
\033\000\105\000\152\000\004\001\001\001\028\001\009\001\004\001\
\012\001\003\001\069\001\073\000\004\001\010\001\025\001\025\001\
\013\001\042\001\043\001\169\000\026\001\083\002\009\001\054\001\
\027\001\058\001\020\001\013\001\043\001\070\001\072\000\028\001\
\057\001\037\001\031\001\000\000\033\001\034\001\044\001\173\000\
\174\000\063\001\122\002\044\001\150\000\096\000\066\001\070\001\
\042\001\043\001\106\000\115\001\044\001\187\000\007\001\006\001\
\043\001\068\001\068\001\056\001\013\001\137\001\118\000\057\001\
\120\000\121\000\054\001\123\000\124\000\125\000\126\000\127\000\
\128\000\070\001\004\001\137\000\027\001\017\001\003\001\135\000\
\122\000\143\000\144\000\145\000\188\000\147\000\148\000\149\000\
\042\001\131\000\194\000\042\001\134\000\169\001\136\000\020\001\
\043\001\173\001\006\001\203\000\151\000\055\001\056\001\004\001\
\146\000\030\001\057\001\020\001\008\001\063\001\241\000\004\001\
\001\001\003\001\044\001\004\001\009\001\042\001\043\001\027\001\
\251\000\010\001\164\000\165\000\013\001\071\002\072\002\027\001\
\170\000\042\001\043\001\077\002\057\001\175\000\042\001\001\001\
\033\001\027\001\004\001\028\001\020\001\205\001\031\001\044\001\
\033\001\034\001\164\001\013\001\013\001\057\001\212\000\005\001\
\214\000\004\001\009\001\009\001\174\001\037\001\003\001\056\001\
\005\001\006\001\007\001\196\000\009\001\111\002\000\000\056\001\
\034\001\211\000\226\000\213\000\027\001\008\001\216\000\026\001\
\227\000\228\000\132\001\119\001\008\001\070\001\027\001\037\001\
\019\001\051\001\003\001\141\001\142\001\008\001\144\001\145\001\
\146\001\020\001\039\001\040\001\041\001\042\001\035\002\009\001\
\027\001\009\001\010\002\020\001\010\001\011\001\012\001\035\001\
\027\001\046\002\047\002\009\001\057\001\167\001\168\001\042\001\
\043\001\027\001\106\002\027\001\004\001\065\001\070\001\008\001\
\069\001\042\001\043\001\115\002\008\001\027\001\057\001\068\002\
\069\002\003\001\006\001\005\001\025\001\007\001\013\001\009\001\
\057\001\016\001\012\001\027\001\000\000\031\001\032\001\006\001\
\056\002\004\001\020\001\059\002\080\001\006\001\007\001\027\001\
\009\001\027\001\020\001\209\001\030\001\215\001\013\001\049\001\
\023\001\020\001\043\001\221\001\222\001\223\001\042\001\165\001\
\042\001\043\001\027\001\009\001\013\001\066\001\086\002\068\001\
\042\001\043\001\236\001\177\001\084\001\057\001\004\001\057\001\
\006\001\004\001\237\001\044\001\003\001\027\001\013\001\004\001\
\005\001\083\001\104\001\008\001\013\001\010\001\011\001\012\001\
\013\001\020\001\015\001\016\001\017\001\020\001\019\001\159\001\
\005\001\099\001\091\001\101\001\013\001\103\001\027\001\028\001\
\000\000\003\001\170\001\109\001\033\001\023\002\013\001\020\001\
\015\001\121\000\013\001\042\001\043\001\006\001\182\001\004\001\
\128\000\046\001\020\001\125\001\004\001\235\001\128\001\129\001\
\013\001\013\001\057\001\241\001\030\001\042\001\043\001\020\001\
\000\000\062\001\027\001\013\001\044\001\143\001\153\001\047\001\
\042\001\043\001\071\001\072\001\057\001\063\002\064\002\065\002\
\005\001\042\001\003\001\008\001\005\001\006\001\007\001\057\001\
\009\001\003\001\076\002\005\001\020\001\007\001\013\001\009\001\
\057\001\185\001\012\001\025\002\180\001\003\001\190\001\239\001\
\090\002\001\001\027\001\009\001\004\001\020\001\042\001\043\001\
\000\000\027\001\042\001\043\001\030\001\013\001\039\001\040\001\
\041\001\195\001\013\001\109\002\110\002\057\001\200\001\013\001\
\042\001\057\001\016\001\042\001\043\001\003\001\013\001\005\001\
\252\001\003\001\034\001\005\001\214\001\007\001\008\001\057\001\
\010\001\011\001\012\001\013\001\069\001\015\001\016\001\017\001\
\018\001\019\001\020\001\051\001\230\001\231\001\232\001\039\002\
\000\000\027\001\028\001\020\001\044\002\045\002\001\001\033\001\
\130\000\004\001\132\000\003\002\003\001\001\000\002\000\010\001\
\042\001\043\001\013\001\013\001\046\001\255\001\039\001\040\001\
\041\001\042\001\043\001\006\001\003\001\020\001\005\001\057\001\
\000\000\028\001\004\001\075\002\062\001\003\001\033\001\034\001\
\057\001\006\001\112\000\013\001\013\001\071\001\072\001\117\000\
\004\001\119\000\020\001\042\001\043\001\013\001\020\001\003\001\
\004\001\005\001\078\002\007\001\008\001\056\001\010\001\011\001\
\012\001\013\001\057\001\015\001\016\001\017\001\018\001\019\001\
\000\000\020\001\052\002\070\001\042\001\043\001\004\001\027\001\
\028\001\079\002\060\002\019\001\020\001\033\001\004\001\001\001\
\066\002\004\001\004\001\057\001\026\001\027\001\042\001\042\001\
\043\001\009\001\046\001\013\001\002\001\003\001\080\002\208\001\
\000\000\210\001\042\001\043\001\027\001\057\001\057\001\013\001\
\014\001\015\001\062\001\113\002\009\001\009\001\020\001\027\001\
\034\001\057\001\003\001\071\001\072\001\027\001\124\002\009\001\
\126\002\006\001\004\001\003\001\004\001\005\001\112\002\007\001\
\008\001\051\001\010\001\011\001\012\001\013\001\009\001\015\001\
\016\001\017\001\018\001\019\001\009\001\003\001\003\001\053\001\
\000\000\044\001\013\001\027\001\028\001\013\001\004\001\020\001\
\009\001\033\001\027\001\003\001\004\001\005\001\027\001\007\001\
\008\001\030\001\010\001\011\001\012\001\013\001\046\001\015\001\
\016\001\017\001\018\001\019\001\027\001\042\001\043\001\020\001\
\000\000\057\001\044\001\027\001\028\001\027\001\062\001\027\001\
\005\001\033\001\004\001\004\001\057\001\004\001\009\001\071\001\
\072\001\044\001\027\001\004\001\027\001\027\001\046\001\020\001\
\004\001\006\001\005\001\003\001\004\001\005\001\020\001\007\001\
\008\001\030\001\010\001\011\001\012\001\013\001\062\001\015\001\
\016\001\017\001\018\001\019\001\044\001\042\001\043\001\071\001\
\072\001\004\001\013\001\027\001\028\001\005\001\015\001\044\001\
\044\001\033\001\009\001\027\001\057\001\020\001\003\001\027\001\
\005\001\000\000\007\001\066\001\009\001\009\001\046\001\012\001\
\004\001\004\001\013\001\003\001\004\001\005\001\004\001\007\001\
\008\001\015\001\010\001\011\001\012\001\013\001\062\001\015\001\
\016\001\017\001\018\001\019\001\009\001\013\001\013\001\071\001\
\072\001\000\000\013\001\027\001\028\001\005\001\003\001\020\001\
\007\001\033\001\005\001\003\001\004\001\005\001\005\001\007\001\
\008\001\030\001\010\001\011\001\012\001\013\001\046\001\015\001\
\016\001\017\001\018\001\019\001\005\001\042\001\043\001\003\001\
\005\001\000\000\005\001\027\001\028\001\005\001\062\001\027\001\
\043\001\033\001\047\001\027\001\057\001\005\001\005\001\071\001\
\072\001\020\001\006\001\003\001\004\001\005\001\046\001\007\001\
\008\001\050\001\010\001\011\001\012\001\013\001\043\001\015\001\
\016\001\017\001\018\001\019\001\013\001\013\001\062\001\042\001\
\043\001\000\000\004\001\027\001\028\001\013\001\003\001\071\001\
\072\001\033\001\005\001\003\001\004\001\005\001\057\001\007\001\
\008\001\005\001\010\001\011\001\012\001\013\001\046\001\015\001\
\016\001\017\001\018\001\027\001\003\001\027\001\005\001\027\001\
\007\001\000\000\009\001\027\001\028\001\012\001\062\001\005\001\
\007\001\033\001\006\001\013\001\004\001\004\001\037\001\071\001\
\072\001\005\001\005\001\005\001\027\001\020\001\046\001\030\001\
\006\001\020\001\009\001\003\001\004\001\005\001\004\001\007\001\
\008\001\000\000\010\001\011\001\012\001\013\001\062\001\015\001\
\016\001\017\001\018\001\042\001\043\001\004\001\015\001\071\001\
\072\001\020\001\057\001\027\001\028\001\001\001\002\001\044\001\
\004\001\033\001\057\001\003\001\004\001\005\001\010\001\007\001\
\008\001\013\001\010\001\011\001\012\001\013\001\046\001\015\001\
\016\001\017\001\018\001\001\001\007\001\020\001\004\001\046\001\
\028\001\000\000\046\001\027\001\028\001\005\001\062\001\013\001\
\001\001\033\001\027\001\004\001\027\001\051\001\005\001\071\001\
\072\001\010\001\006\001\020\001\013\001\003\001\046\001\005\001\
\005\001\007\001\046\001\009\001\034\001\007\001\012\001\027\001\
\012\001\000\000\020\001\028\001\005\001\020\001\062\001\020\001\
\033\001\034\001\020\001\037\001\065\001\051\001\005\001\071\001\
\072\001\008\001\027\001\010\001\011\001\012\001\013\001\027\001\
\015\001\016\001\017\001\044\001\019\001\042\001\043\001\056\001\
\042\001\043\001\005\001\013\001\027\001\028\001\000\000\020\001\
\003\001\005\001\033\001\008\001\057\001\070\001\005\001\057\001\
\027\001\008\001\020\001\010\001\011\001\012\001\013\001\046\001\
\015\001\016\001\017\001\007\001\019\001\042\001\043\001\015\001\
\015\001\003\001\005\001\044\001\027\001\028\001\000\000\062\001\
\020\001\015\001\033\001\005\001\057\001\004\001\005\001\026\001\
\071\001\072\001\030\001\010\001\011\001\012\001\013\001\046\001\
\015\001\016\001\017\001\007\001\019\001\043\001\042\001\043\001\
\020\001\005\001\005\001\005\001\027\001\028\001\000\000\062\001\
\009\001\005\001\033\001\005\001\007\001\057\001\019\001\020\001\
\071\001\072\001\015\001\020\001\012\001\004\001\005\001\046\001\
\066\001\008\001\007\001\010\001\011\001\030\001\013\001\020\001\
\015\001\016\001\017\001\009\001\019\001\042\001\043\001\062\001\
\027\001\042\001\043\001\019\001\027\001\028\001\019\001\020\001\
\071\001\072\001\033\001\009\001\057\001\004\001\005\001\027\001\
\057\001\008\001\000\000\010\001\011\001\009\001\013\001\046\001\
\015\001\016\001\017\001\027\001\019\001\042\001\043\001\005\001\
\012\001\027\001\027\001\005\001\027\001\028\001\009\001\062\001\
\020\001\027\001\033\001\005\001\057\001\004\001\005\001\005\001\
\071\001\072\001\030\001\010\001\011\001\012\001\013\001\046\001\
\015\001\016\001\017\001\005\001\019\001\005\001\042\001\043\001\
\005\001\012\001\005\001\066\001\027\001\028\001\007\001\062\001\
\005\001\020\001\033\001\005\001\044\001\057\001\005\001\005\001\
\071\001\072\001\020\001\007\001\012\001\066\001\007\001\046\001\
\007\001\007\001\007\001\180\001\020\001\004\001\005\001\042\001\
\043\001\008\001\179\001\010\001\011\001\171\000\013\001\062\001\
\015\001\016\001\017\001\013\001\019\001\051\001\057\001\185\000\
\071\001\072\001\042\001\043\001\027\001\028\001\136\001\018\001\
\074\001\020\001\033\001\124\001\141\000\004\001\005\001\005\001\
\221\000\057\001\127\002\010\001\011\001\012\001\013\001\046\001\
\015\001\016\001\017\001\121\001\019\001\217\001\020\001\042\001\
\043\001\100\002\242\001\255\255\027\001\028\001\255\255\062\001\
\030\001\255\255\033\001\255\255\255\255\018\001\057\001\020\001\
\071\001\072\001\004\001\005\001\042\001\043\001\008\001\046\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\017\001\
\020\001\255\255\255\255\057\001\012\001\042\001\043\001\062\001\
\255\255\027\001\028\001\255\255\020\001\255\255\255\255\033\001\
\071\001\072\001\004\001\005\001\057\001\255\255\042\001\043\001\
\010\001\011\001\012\001\013\001\046\001\015\001\016\001\017\001\
\255\255\019\001\042\001\043\001\255\255\057\001\255\255\255\255\
\255\255\027\001\028\001\255\255\062\001\255\255\255\255\033\001\
\255\255\057\001\004\001\005\001\255\255\071\001\072\001\255\255\
\010\001\011\001\012\001\013\001\046\001\015\001\016\001\017\001\
\255\255\003\001\255\255\005\001\006\001\007\001\255\255\009\001\
\255\255\027\001\028\001\255\255\062\001\255\255\255\255\033\001\
\255\255\255\255\020\001\255\255\255\255\071\001\072\001\004\001\
\255\255\027\001\255\255\008\001\046\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\062\001\255\255\255\255\028\001\
\255\255\255\255\004\001\255\255\033\001\071\001\072\001\057\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\017\001\
\004\001\046\001\255\255\069\001\255\255\255\255\010\001\011\001\
\012\001\013\001\028\001\015\001\016\001\017\001\255\255\033\001\
\255\255\062\001\255\255\003\001\255\255\005\001\006\001\007\001\
\028\001\009\001\071\001\072\001\046\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\046\001\027\001\062\001\255\255\255\255\255\255\
\255\255\255\255\255\255\012\001\255\255\071\001\072\001\039\001\
\040\001\041\001\062\001\020\001\003\001\255\255\005\001\012\001\
\007\001\255\255\009\001\071\001\072\001\012\001\255\255\020\001\
\255\255\057\001\255\255\020\001\255\255\020\001\255\255\020\001\
\255\255\042\001\043\001\020\001\027\001\069\001\003\001\030\001\
\005\001\030\001\007\001\255\255\009\001\042\001\043\001\012\001\
\057\001\042\001\043\001\042\001\043\001\042\001\043\001\020\001\
\255\255\042\001\043\001\255\255\057\001\255\255\027\001\020\001\
\057\001\030\001\057\001\003\001\057\001\005\001\027\001\007\001\
\057\001\009\001\020\001\255\255\012\001\042\001\043\001\255\255\
\255\255\027\001\255\255\255\255\020\001\042\001\043\001\255\255\
\255\255\255\255\255\255\027\001\057\001\255\255\030\001\255\255\
\042\001\043\001\255\255\255\255\057\001\021\001\022\001\023\001\
\024\001\255\255\042\001\043\001\028\001\029\001\255\255\057\001\
\032\001\033\001\034\001\035\001\036\001\255\255\038\001\255\255\
\020\001\057\001\255\255\255\255\255\255\045\001\255\255\027\001\
\048\001\049\001\030\001\255\255\052\001\053\001\255\255\055\001\
\255\255\255\255\058\001\059\001\060\001\061\001\042\001\043\001\
\064\001\020\001\255\255\067\001\255\255\020\001\070\001\020\001\
\027\001\020\001\255\255\030\001\027\001\057\001\027\001\255\255\
\003\001\255\255\005\001\255\255\007\001\255\255\009\001\042\001\
\043\001\012\001\255\255\042\001\043\001\042\001\043\001\042\001\
\043\001\255\255\255\255\255\255\001\001\255\255\057\001\004\001\
\027\001\255\255\057\001\030\001\057\001\010\001\057\001\003\001\
\013\001\005\001\255\255\007\001\017\001\009\001\255\255\003\001\
\012\001\005\001\255\255\007\001\255\255\009\001\255\255\028\001\
\012\001\255\255\255\255\255\255\255\255\034\001\255\255\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  AMONG\000\
  WEAKSECRET\000\
  PARAM\000\
  ORTEXT\000\
  FAIL\000\
  TYPE\000\
  SET\000\
  FORALL\000\
  CONST\000\
  INJEVENT\000\
  OR\000\
  CHANNEL\000\
  LETFUN\000\
  DEFINE\000\
  EXPAND\000\
  YIELD\000\
  LEQ\000\
  PROBA\000\
  LBRACE\000\
  RBRACE\000\
  PROOF\000\
  EQUIVALENCE\000\
  OTHERWISE\000\
  TABLE\000\
  INSERT\000\
  GET\000\
  "

let yynames_block = "\
  IDENT\000\
  STRING\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 138 "pitparser.mly"
        ( (* Options are ignored, they are supported for compatibility with
             CryptoVerif only *)
          TTypeDecl(_2) :: _5 )
# 1041 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 142 "pitparser.mly"
 ( (TFunDecl(_2, _4, _7, _8)) :: _10 )
# 1052 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'typeid) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'treducmayfail) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _12 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 145 "pitparser.mly"
 ( (TReducFail(_2,_4,_7,_9, _10)) :: _12 )
# 1064 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'treduc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 148 "pitparser.mly"
 ( (TReduc(_2,_3)) :: _5 )
# 1073 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 151 "pitparser.mly"
        ( (List.map (fun x -> TConstDecl(x, _4, _5)) _2) @ _7 )
# 1083 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'eqlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 153 "pitparser.mly"
 ( (TEquation(_2, _3)) :: _5 )
# 1092 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 155 "pitparser.mly"
        ( (TEventDecl(_2, [])) :: _4 )
# 1100 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 157 "pitparser.mly"
        ( (TEventDecl(_2, _4)) :: _7 )
# 1109 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typeidseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 159 "pitparser.mly"
        ( (TPredDecl(_2, _4, _6)) :: _8 )
# 1119 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 161 "pitparser.mly"
        ( (TPredDecl(_2, [], _3)) :: _5 )
# 1128 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 163 "pitparser.mly"
        ( (TTableDecl(_2, _4)) :: _7 )
# 1137 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 165 "pitparser.mly"
 ( (TPDef(_2,[],_4)) :: _6 )
# 1146 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'vartype) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 167 "pitparser.mly"
        ( (TPDef(_2,_4,_7)) :: _9 )
# 1156 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 169 "pitparser.mly"
        ( (TLetFun(_2,[],_4)) :: _6 )
# 1165 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'vartype) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 171 "pitparser.mly"
        ( (TLetFun(_2,_4,_7)) :: _9 )
# 1175 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 173 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 1184 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 175 "pitparser.mly"
        ( (TSet(_2,I _4)) :: _6 )
# 1193 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 177 "pitparser.mly"
        ( (TNoUnif (_2, _4)) :: _6 )
# 1202 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 179 "pitparser.mly"
        ( (TNoUnif ([], _2)) :: _4 )
# 1210 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 181 "pitparser.mly"
        ( (TQuery(_2,_4)) :: _6 )
# 1219 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 183 "pitparser.mly"
        ( (TQuery([],_2)) :: _4 )
# 1227 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 185 "pitparser.mly"
        ( (TNoninterf(_2, _4)) :: _6 )
# 1236 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 187 "pitparser.mly"
        ( (TNoninterf([], _2)) :: _4 )
# 1244 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 189 "pitparser.mly"
        ( (TWeaksecret(_2)) :: _4 )
# 1252 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 191 "pitparser.mly"
 ( (TNot(_2, _4)) :: _6 )
# 1261 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 193 "pitparser.mly"
 ( (TNot([], _2)) :: _4 )
# 1269 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'neidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 195 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1279 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 198 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _4 )
# 1288 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 201 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1297 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'mayfailvartypeseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 204 "pitparser.mly"
        ( (TElimtrue (_2,_4)) :: _6 )
# 1306 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 206 "pitparser.mly"
        ( (TElimtrue ([],_2)) :: _4 )
# 1314 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 208 "pitparser.mly"
        ( (* For compatibility with CryptoVerif, allow 
               channel c1...cn. 
             as a synonym for 
               free c1...cn:channel. *)
          (List.map (fun x -> TFree(x, ("channel", dummy_ext), [])) _2) @ _4 )
# 1326 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 214 "pitparser.mly"
        ( (List.map (fun x -> TFree(x, _4, _5)) _2) @ _7 )
# 1336 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 216 "pitparser.mly"
        ( (TClauses(_2)) :: _3 )
# 1344 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.tdecl list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 218 "pitparser.mly"
        ( (TDefine(_2, _4, _7)) :: _9 )
# 1354 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 220 "pitparser.mly"
        ( (TExpand(_2, _4)) :: _7 )
# 1363 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "pitparser.mly"
        ( [] )
# 1369 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 226 "pitparser.mly"
 ( _1, _3, None )
# 1377 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 228 "pitparser.mly"
 ( 
	  Param.equivalence := true;
	  _1, _3, Some _4 )
# 1388 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 236 "pitparser.mly"
        ( _1 )
# 1395 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 238 "pitparser.mly"
        ( _1 )
# 1402 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 240 "pitparser.mly"
        ( string_of_int _1, parse_extent() )
# 1409 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 242 "pitparser.mly"
        ( "*", parse_extent() )
# 1415 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 244 "pitparser.mly"
        ( ".", parse_extent() )
# 1421 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "pitparser.mly"
        ( "set", parse_extent() )
# 1427 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "pitparser.mly"
        ( "=", parse_extent() )
# 1433 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "pitparser.mly"
        ( ",", parse_extent() )
# 1439 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prooftoken) in
    Obj.repr(
# 254 "pitparser.mly"
        ( [_1] )
# 1446 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prooftoken) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 256 "pitparser.mly"
        ( _1 :: _2 )
# 1454 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 260 "pitparser.mly"
 ( [_1] )
# 1461 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proofcommand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proof) in
    Obj.repr(
# 262 "pitparser.mly"
        ( _1 :: _3 )
# 1469 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 268 "pitparser.mly"
        ( _2 )
# 1476 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "pitparser.mly"
        ( [] )
# 1482 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 274 "pitparser.mly"
    ( _1 :: _3 )
# 1490 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 276 "pitparser.mly"
    ( [_1] )
# 1497 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 280 "pitparser.mly"
    ( None )
# 1503 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    Obj.repr(
# 282 "pitparser.mly"
    ( Some [] )
# 1509 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 284 "pitparser.mly"
    ( Some (_2) )
# 1516 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 288 "pitparser.mly"
        ( (_1,_3)::_5 )
# 1525 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 291 "pitparser.mly"
        ( [(_1,_3)] )
# 1533 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 295 "pitparser.mly"
        ( _1 )
# 1540 "pitparser.ml"
               : 'vartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 297 "pitparser.mly"
        ( [] )
# 1546 "pitparser.ml"
               : 'vartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nevartype) in
    Obj.repr(
# 301 "pitparser.mly"
        ( _2 )
# 1553 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 303 "pitparser.mly"
        ( [] )
# 1559 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 307 "pitparser.mly"
        ( _1 )
# 1566 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    Obj.repr(
# 309 "pitparser.mly"
        ( (* channel is allowed as a type, even though it is also a keyword for the declaration channel c1...cn. *)
          "channel", parse_extent() )
# 1573 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 314 "pitparser.mly"
        ( _1 )
# 1580 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 316 "pitparser.mly"
        ( [] )
# 1586 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 320 "pitparser.mly"
    ( _1 :: _3 )
# 1594 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 322 "pitparser.mly"
    ( [_1] )
# 1601 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 328 "pitparser.mly"
 ( PFail, parse_extent () )
# 1607 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 330 "pitparser.mly"
 ( PFunApp (_1, _3), parse_extent() )
# 1615 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 332 "pitparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1624 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 335 "pitparser.mly"
 ( PIdent (_1), parse_extent() )
# 1631 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 337 "pitparser.mly"
        ( PFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1639 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 339 "pitparser.mly"
        ( PFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1647 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 341 "pitparser.mly"
        ( PFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1654 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 343 "pitparser.mly"
        ( PFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1662 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 345 "pitparser.mly"
        ( PFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1670 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 347 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PTuple (l), parse_extent() )
# 1680 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 354 "pitparser.mly"
 ( _1 :: _3 )
# 1688 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 356 "pitparser.mly"
 ( [_1] )
# 1695 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 360 "pitparser.mly"
        ( _1 )
# 1702 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 362 "pitparser.mly"
        ( [] )
# 1708 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 368 "pitparser.mly"
    ( (_1, Some _4) )
# 1716 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 370 "pitparser.mly"
    ( (_1, None) )
# 1723 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 374 "pitparser.mly"
    ( _1 :: _3 )
# 1731 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 376 "pitparser.mly"
    ( [_1] )
# 1738 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tquery) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tqueryseq) in
    Obj.repr(
# 382 "pitparser.mly"
    ( _1 :: _3 )
# 1746 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tquery) in
    Obj.repr(
# 384 "pitparser.mly"
    ( [_1] )
# 1753 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 388 "pitparser.mly"
    ( PRealQuery(_1) )
# 1760 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 390 "pitparser.mly"
    ( PPutBegin(false, _4) )
# 1767 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 392 "pitparser.mly"
    ( PPutBegin(true, _4) )
# 1774 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 396 "pitparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 1782 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 398 "pitparser.mly"
 ( PGIdent (_1), parse_extent() )
# 1789 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gtermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 400 "pitparser.mly"
        ( PGPhase(_1, _3, _6), parse_extent() )
# 1798 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 402 "pitparser.mly"
        ( PGPhase(("table", parse_extent()), [_3], _6), parse_extent() )
# 1806 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 404 "pitparser.mly"
        ( PGFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1814 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 406 "pitparser.mly"
        ( PGFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1822 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 408 "pitparser.mly"
        ( PGFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1829 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 410 "pitparser.mly"
        ( PGFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1837 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 412 "pitparser.mly"
        ( PGFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1845 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 414 "pitparser.mly"
        ( PGFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1853 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 416 "pitparser.mly"
        ( PGFunApp(("event",parse_extent()), _3), parse_extent() )
# 1860 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 418 "pitparser.mly"
        ( PGFunApp(("inj-event",parse_extent()), _3), parse_extent() )
# 1867 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 420 "pitparser.mly"
        ( PGFunApp(("table",parse_extent()), [_3]), parse_extent() )
# 1874 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 422 "pitparser.mly"
        ( PGFunApp(("==>", parse_extent()), [_1;_3]), parse_extent() )
# 1882 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 424 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PGTuple (l), parse_extent() )
# 1892 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 429 "pitparser.mly"
        ( PGName (_2, _4), parse_extent() )
# 1900 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 431 "pitparser.mly"
        ( PGName (_2, []), parse_extent() )
# 1907 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 433 "pitparser.mly"
        ( PGLet(_2, _4, _6), parse_extent() )
# 1916 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 437 "pitparser.mly"
 ( _1 :: _3 )
# 1924 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 439 "pitparser.mly"
 ( [_1] )
# 1931 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 443 "pitparser.mly"
        ( _1 )
# 1938 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 445 "pitparser.mly"
        ( [] )
# 1944 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 450 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1953 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 452 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1961 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 454 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 1970 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 456 "pitparser.mly"
        ( [(_1, _3)] )
# 1978 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 460 "pitparser.mly"
        ( _1 )
# 1985 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 462 "pitparser.mly"
        ( [] )
# 1991 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tfnebindingseq) in
    Obj.repr(
# 468 "pitparser.mly"
        ( BFLet(_2, _4, _6) )
# 2000 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 470 "pitparser.mly"
        ( BFNoUnif((_1,_3,_5), _6) )
# 2010 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 472 "pitparser.mly"
        ( BFNoUnif((_1,[],-1),_2) )
# 2018 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 474 "pitparser.mly"
        ( BFNoUnif((("table", parse_extent()),_3,_5), _6) )
# 2027 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 478 "pitparser.mly"
    ( _2 )
# 2034 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 480 "pitparser.mly"
    ( -1 )
# 2040 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 484 "pitparser.mly"
    ( _2 )
# 2047 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 486 "pitparser.mly"
    ( -1 )
# 2053 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 490 "pitparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 2061 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gformat) in
    Obj.repr(
# 492 "pitparser.mly"
 ( PFGFunApp (("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2069 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 494 "pitparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 2076 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 496 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PFGTuple (_2), parse_extent() )
# 2086 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 501 "pitparser.mly"
        ( PFGName (_2, _4), parse_extent() )
# 2094 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 503 "pitparser.mly"
        ( PFGName (_2, []), parse_extent() )
# 2101 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 505 "pitparser.mly"
        ( PFGAny (_2), parse_extent() )
# 2108 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 507 "pitparser.mly"
        ( PFGLet(_2, _4, _6), parse_extent() )
# 2117 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 512 "pitparser.mly"
 ( _1 :: _3 )
# 2125 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 514 "pitparser.mly"
 ( [_1] )
# 2132 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 518 "pitparser.mly"
        ( _1 )
# 2139 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 520 "pitparser.mly"
        ( [] )
# 2145 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 525 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 2154 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 527 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 2162 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 529 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 2171 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 531 "pitparser.mly"
        ( [(_1, _3)] )
# 2179 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 535 "pitparser.mly"
        ( _1 )
# 2186 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 537 "pitparser.mly"
        ( [] )
# 2192 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 543 "pitparser.mly"
 ( (_1,_3, false) )
# 2200 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    Obj.repr(
# 546 "pitparser.mly"
 ( (_1,_3, true) )
# 2208 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mayfailvartypeseq) in
    Obj.repr(
# 550 "pitparser.mly"
 ( _1::_3 )
# 2216 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mayfailvartype) in
    Obj.repr(
# 553 "pitparser.mly"
 ( [_1] )
# 2223 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mayfailvartypeseq) in
    Obj.repr(
# 557 "pitparser.mly"
 ( _2 )
# 2230 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 559 "pitparser.mly"
 ( [] )
# 2236 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 564 "pitparser.mly"
 ( (_2,_3,_5) :: _6 )
# 2246 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 566 "pitparser.mly"
 ( [_2,_3,_5] )
# 2255 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 570 "pitparser.mly"
 ( (_1,_2,_4) :: _5 )
# 2265 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 572 "pitparser.mly"
 ( [_1,_2,_4] )
# 2274 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treduc) in
    Obj.repr(
# 576 "pitparser.mly"
 ( (_1,_2,_4) :: _6 )
# 2284 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 578 "pitparser.mly"
 ( [_1,_2,_4] )
# 2293 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 584 "pitparser.mly"
    ( [(_1, _2, _4)] )
# 2302 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'eqlist) in
    Obj.repr(
# 586 "pitparser.mly"
    ( (_1, _2, _4)::_6 )
# 2312 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 592 "pitparser.mly"
        ( PClause(_1,_3) )
# 2320 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 594 "pitparser.mly"
        ( PFact(_1) )
# 2327 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 596 "pitparser.mly"
        ( PEquiv(_1,_3,true) )
# 2335 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 598 "pitparser.mly"
        ( PEquiv(_1,_3,false) )
# 2343 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tclause) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tclauses) in
    Obj.repr(
# 602 "pitparser.mly"
 ( (_1,_2) :: _4 )
# 2352 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclause) in
    Obj.repr(
# 604 "pitparser.mly"
 ( [_1,_2] )
# 2360 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 610 "pitparser.mly"
 ( _2 )
# 2367 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 612 "pitparser.mly"
 ( PLetDef (_1,[]) )
# 2374 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 614 "pitparser.mly"
        ( PLetDef (_1, _3) )
# 2382 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 616 "pitparser.mly"
 ( PRepl _2 )
# 2389 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 618 "pitparser.mly"
 ( (* For convergence with CryptoVerif, we allow an identifier (bound on the number of copies) after a replication; it is simply ignored in ProVerif. *)
          PRepl _5 )
# 2399 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 621 "pitparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 2408 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 625 "pitparser.mly"
        ( (* For convergence with CryptoVerif, we allow yield instead of 0 *)
          PNil )
# 2415 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 628 "pitparser.mly"
 ( PRestr(_2, _3, _5, _6) )
# 2425 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 630 "pitparser.mly"
 ( PTest(_2,_4,_5) )
# 2434 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 632 "pitparser.mly"
 ( PInput(_3,_5,_7) )
# 2443 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 634 "pitparser.mly"
 ( POutput(_3,_5,_7) )
# 2452 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 636 "pitparser.mly"
 ( PLet(_2,_4,PNil,PNil) )
# 2460 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 638 "pitparser.mly"
 ( PLet(_2,_4,_6,_7) )
# 2470 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 640 "pitparser.mly"
        ( PLetFilter(_2,_4,PNil,PNil) )
# 2478 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 642 "pitparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_7) )
# 2490 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 646 "pitparser.mly"
        ( PInsert(_2, _4, _6) )
# 2499 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tpatternseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 648 "pitparser.mly"
        ( PGet(_2, _4, None, _6, _7) )
# 2509 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 650 "pitparser.mly"
        ( PGet(_2, _4, Some _7, _8, _9) )
# 2520 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 652 "pitparser.mly"
 ( PPar(_1,_3) )
# 2528 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 654 "pitparser.mly"
        ( PEvent(_2, _4, _6) )
# 2537 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 656 "pitparser.mly"
        ( PEvent(_2, [], _3) )
# 2545 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 658 "pitparser.mly"
        ( PPhase(_2, _3) )
# 2553 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 662 "pitparser.mly"
        ( _2 )
# 2560 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 664 "pitparser.mly"
        ( PNil )
# 2566 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 668 "pitparser.mly"
        ( _2 )
# 2573 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 670 "pitparser.mly"
        ( PNil )
# 2579 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 674 "pitparser.mly"
        ( _2 )
# 2586 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 676 "pitparser.mly"
        ( PNil )
# 2592 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 680 "pitparser.mly"
    ( PPatVar(_1, None) )
# 2599 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 682 "pitparser.mly"
    ( PPatVar(_1, Some _3) )
# 2607 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 684 "pitparser.mly"
    ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPatTuple(_2) )
# 2617 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 689 "pitparser.mly"
    ( PPatFunApp(_1,_3) )
# 2625 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 691 "pitparser.mly"
    ( PPatEqual(_2) )
# 2632 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 695 "pitparser.mly"
    ( _1 :: _3 )
# 2640 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tpattern) in
    Obj.repr(
# 697 "pitparser.mly"
    ( [_1] )
# 2647 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 701 "pitparser.mly"
    ( _1 )
# 2654 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 703 "pitparser.mly"
    ( [] )
# 2660 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 709 "pitparser.mly"
 ( PPFunApp (_1, _3), parse_extent() )
# 2668 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 711 "pitparser.mly"
        ( Param.has_choice := true; 
	  PPFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2677 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 714 "pitparser.mly"
 ( PPIdent (_1), parse_extent() )
# 2684 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 716 "pitparser.mly"
        ( PPFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 2692 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 718 "pitparser.mly"
        ( PPFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 2700 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 720 "pitparser.mly"
        ( PPFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 2707 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 722 "pitparser.mly"
        ( PPFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 2715 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 724 "pitparser.mly"
        ( PPFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 2723 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 726 "pitparser.mly"
 ( PPRestr(_2, _3, _5, _7), parse_extent() )
# 2733 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 728 "pitparser.mly"
 ( PPTest(_2,_4,None), parse_extent() )
# 2741 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 730 "pitparser.mly"
 ( PPTest(_2,_4,Some _6), parse_extent() )
# 2750 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 732 "pitparser.mly"
 ( PPLet(_2,_4,_6,None), parse_extent() )
# 2759 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 734 "pitparser.mly"
 ( PPLet(_2,_4,_6,Some _8), parse_extent() )
# 2769 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 736 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,None), parse_extent() )
# 2778 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 738 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,Some _8), parse_extent() )
# 2788 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 740 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPTuple (l), parse_extent() )
# 2798 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 747 "pitparser.mly"
 ( _1 :: _3 )
# 2806 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 749 "pitparser.mly"
 ( [_1] )
# 2813 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 753 "pitparser.mly"
        ( _1 )
# 2820 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 755 "pitparser.mly"
        ( [] )
# 2826 "pitparser.ml"
               : 'ptermseq))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lib *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option)
let lib (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Pitptree.tdecl list)
