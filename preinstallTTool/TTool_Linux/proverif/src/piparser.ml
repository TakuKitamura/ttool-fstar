type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Piptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | AMONG
  | WEAKSECRET
  | CANTEXT
  | FAIL
  | WHERE
  | OTHERWISE
  | DATA
  | PARAM
  | PRIVATE

open Parsing;;
let _ = parse_error;;
# 2 "piparser.mly"
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet and Vincent Cheval                        *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2014                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "piparser.mly"

open Parsing_helper
open Ptree
open Piptree
exception Syntax

# 96 "piparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  271 (* REPL *);
  272 (* IF *);
  273 (* THEN *);
  274 (* ELSE *);
  275 (* EQUAL *);
  276 (* FUN *);
  277 (* EQUATION *);
  278 (* REDUCTION *);
  279 (* PREDICATE *);
  280 (* PROCESS *);
  281 (* SLASH *);
  282 (* DOT *);
    0 (* EOF *);
  283 (* LET *);
  284 (* QUERY *);
  285 (* BEFORE *);
  286 (* PUTBEGIN *);
  287 (* NONINTERF *);
  288 (* EVENT *);
  289 (* NOT *);
  290 (* ELIMTRUE *);
  291 (* FREE *);
  292 (* SUCHTHAT *);
  293 (* CLAUSES *);
  294 (* RED *);
  295 (* EQUIV *);
  296 (* EQUIVEQ *);
  297 (* WEDGE *);
  298 (* DIFF *);
  299 (* COLON *);
  300 (* NOUNIF *);
  301 (* PHASE *);
  302 (* AMONG *);
  303 (* WEAKSECRET *);
  304 (* CANTEXT *);
  305 (* FAIL *);
  306 (* WHERE *);
  307 (* OTHERWISE *);
  308 (* DATA *);
  309 (* PARAM *);
  310 (* PRIVATE *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\001\000\003\000\003\000\
\006\000\006\000\020\000\020\000\022\000\022\000\007\000\007\000\
\004\000\004\000\005\000\005\000\005\000\005\000\005\000\024\000\
\024\000\023\000\023\000\008\000\008\000\025\000\025\000\014\000\
\014\000\015\000\015\000\015\000\015\000\028\000\028\000\026\000\
\026\000\029\000\029\000\029\000\029\000\027\000\027\000\030\000\
\030\000\017\000\017\000\031\000\031\000\031\000\018\000\013\000\
\013\000\032\000\032\000\032\000\032\000\033\000\034\000\034\000\
\034\000\034\000\034\000\035\000\035\000\035\000\035\000\035\000\
\038\000\038\000\036\000\036\000\039\000\039\000\039\000\039\000\
\037\000\037\000\040\000\040\000\012\000\012\000\010\000\016\000\
\016\000\011\000\011\000\019\000\019\000\019\000\041\000\041\000\
\042\000\042\000\042\000\042\000\043\000\043\000\021\000\021\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\044\000\044\000\045\000\045\000\045\000\045\000\046\000\046\000\
\000\000"

let yylen = "\002\000\
\007\000\006\000\004\000\008\000\005\000\007\000\006\000\006\000\
\006\000\006\000\006\000\004\000\004\000\004\000\006\000\005\000\
\004\000\008\000\005\000\003\000\000\000\004\000\001\000\000\000\
\005\000\004\000\003\000\001\000\007\000\003\000\003\000\001\000\
\003\000\005\000\001\000\004\000\006\000\001\000\003\000\003\000\
\001\000\001\000\000\000\003\000\001\000\005\000\001\000\003\000\
\001\000\004\000\001\000\003\000\004\000\003\000\001\000\001\000\
\000\000\006\000\004\000\005\000\003\000\001\000\000\000\005\000\
\003\000\002\000\000\000\003\000\003\000\003\000\002\000\003\000\
\001\000\001\000\001\000\004\000\004\000\003\000\003\000\003\000\
\003\000\001\000\003\000\004\000\001\000\003\000\004\000\002\000\
\003\000\001\000\001\000\000\000\006\000\004\000\005\000\003\000\
\001\000\000\000\005\000\003\000\002\000\000\000\004\000\002\000\
\000\000\002\000\000\000\003\000\003\000\003\000\003\000\001\000\
\003\000\001\000\003\000\003\000\005\000\001\000\003\000\002\000\
\003\000\001\000\002\000\001\000\003\000\006\000\004\000\007\000\
\007\000\006\000\008\000\006\000\008\000\003\000\006\000\003\000\
\002\000\000\000\001\000\003\000\004\000\002\000\003\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\145\000\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\120\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\122\000\124\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\000\000\003\000\000\000\000\000\000\000\000\000\052\000\
\000\000\000\000\000\000\000\000\062\000\068\000\000\000\000\000\
\012\000\070\000\069\000\000\000\082\000\000\000\104\000\072\000\
\000\000\013\000\048\000\000\000\000\000\066\000\000\000\108\000\
\110\000\109\000\017\000\000\000\000\000\000\000\111\000\113\000\
\115\000\116\000\000\000\119\000\000\000\000\000\000\000\000\000\
\000\000\091\000\106\000\000\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\123\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\036\000\000\000\000\000\000\000\000\000\054\000\050\000\000\000\
\000\000\053\000\077\000\076\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\
\000\000\088\000\000\000\000\000\000\000\000\000\103\000\000\000\
\101\000\000\000\000\000\000\000\000\000\121\000\000\000\125\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\000\
\000\000\000\000\000\000\136\000\000\000\000\000\000\000\005\000\
\000\000\031\000\044\000\019\000\000\000\034\000\007\000\000\000\
\008\000\000\000\000\000\083\000\081\000\000\000\000\000\046\000\
\015\000\000\000\027\000\000\000\117\000\086\000\000\000\000\000\
\000\000\000\000\097\000\089\000\000\000\009\000\002\000\010\000\
\011\000\000\000\000\000\000\000\000\000\000\000\140\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\006\000\000\000\000\000\000\000\000\000\084\000\000\000\000\000\
\087\000\000\000\000\000\000\000\000\000\143\000\141\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\060\000\
\000\000\064\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\135\000\000\000\004\000\000\000\058\000\
\000\000\000\000\099\000\129\000\128\000\000\000\000\000\000\000\
\029\000\095\000\000\000\000\000\000\000\000\000\026\000\093\000\
\025\000"

let yydgoto = "\002\000\
\016\000\017\000\018\000\023\000\043\000\077\001\123\000\126\000\
\120\000\051\000\105\000\181\000\031\000\038\000\032\000\082\000\
\089\000\149\000\045\000\165\000\046\000\124\000\061\000\062\000\
\039\000\070\000\140\000\071\000\141\000\158\000\034\000\035\000\
\036\000\150\000\176\000\177\000\034\001\178\000\035\001\241\000\
\047\000\048\000\049\000\248\000\253\000\254\000"

let yysindex = "\063\000\
\122\000\000\000\024\255\082\255\103\255\143\255\115\255\072\000\
\025\255\025\255\165\255\187\255\200\255\218\255\000\000\000\000\
\060\255\021\000\142\255\024\255\163\255\000\000\148\255\186\255\
\210\255\240\255\073\000\028\255\254\255\033\000\036\000\030\255\
\025\000\039\000\065\000\000\000\067\000\080\000\114\000\099\255\
\115\000\035\255\038\255\096\255\086\000\122\000\091\000\085\000\
\170\255\095\000\116\000\125\000\132\000\128\000\087\000\154\000\
\024\255\155\000\024\255\167\000\166\000\000\000\024\255\122\000\
\024\255\158\000\087\000\128\255\170\000\172\000\000\000\073\000\
\225\255\073\000\159\000\136\000\122\000\073\000\073\000\124\000\
\168\000\000\000\143\255\176\000\122\000\115\255\115\000\171\000\
\157\000\024\255\024\255\024\255\122\000\173\000\025\255\000\000\
\025\255\025\255\025\255\173\000\025\255\000\000\068\000\174\000\
\178\000\122\000\175\000\075\000\087\000\177\000\181\000\187\000\
\000\000\000\000\087\000\025\255\056\000\179\000\180\000\010\000\
\156\000\182\000\169\000\142\000\193\000\183\000\194\000\024\255\
\000\000\195\000\000\000\189\000\156\255\107\255\073\000\000\000\
\197\000\184\000\185\000\198\000\000\000\000\000\073\000\155\000\
\000\000\000\000\000\000\124\000\000\000\073\255\000\000\000\000\
\024\255\000\000\000\000\186\000\188\000\000\000\122\000\000\000\
\000\000\000\000\000\000\201\000\160\000\086\000\000\000\000\000\
\000\000\000\000\162\000\000\000\200\000\068\000\026\000\203\000\
\039\000\000\000\000\000\202\000\190\000\000\000\191\000\192\000\
\196\000\118\000\205\000\024\255\024\255\000\000\204\000\121\000\
\161\000\024\255\199\000\206\000\207\000\205\000\087\000\000\000\
\209\000\024\255\122\000\024\255\155\000\122\000\024\255\000\000\
\000\000\024\255\122\000\208\000\122\000\000\000\000\000\073\000\
\210\000\000\000\000\000\000\000\021\255\025\000\214\000\119\255\
\124\000\124\000\215\000\122\000\073\000\000\000\173\000\211\000\
\212\000\000\000\219\000\068\000\131\000\068\000\000\000\213\000\
\000\000\122\000\122\000\122\000\122\000\000\000\087\000\000\000\
\223\000\224\000\087\000\226\000\225\000\228\000\121\000\000\000\
\025\255\024\255\024\255\000\000\229\000\216\000\026\255\000\000\
\217\000\000\000\000\000\000\000\231\000\000\000\000\000\122\000\
\000\000\222\000\073\000\000\000\000\000\073\255\218\000\000\000\
\000\000\230\000\000\000\220\000\000\000\000\000\235\000\232\000\
\227\000\236\000\000\000\000\000\068\000\000\000\000\000\000\000\
\000\000\229\000\024\255\121\000\229\255\121\000\000\000\239\000\
\233\000\237\000\242\000\122\000\024\255\173\000\024\255\000\000\
\000\000\225\255\241\000\171\000\122\000\000\000\068\000\234\000\
\000\000\243\000\249\000\250\000\087\000\000\000\000\000\087\000\
\087\000\205\000\000\000\238\000\122\000\221\000\240\000\000\000\
\225\255\000\000\000\000\247\000\068\000\202\000\205\000\205\000\
\229\000\047\000\060\000\000\000\024\255\000\000\244\000\000\000\
\131\000\253\000\000\000\000\000\000\000\087\000\087\000\219\255\
\000\000\000\000\131\000\229\000\229\000\024\255\000\000\000\000\
\000\000"

let yyrindex = "\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\001\054\000\000\000\000\000\000\000\
\000\000\000\000\003\001\056\255\000\000\000\000\000\000\000\000\
\220\255\113\000\245\000\000\000\158\255\000\000\246\000\227\255\
\248\000\147\255\000\000\000\000\070\255\029\000\000\000\234\255\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\114\255\000\000\000\000\002\001\029\000\
\000\000\000\000\000\000\185\255\213\255\000\000\000\000\003\001\
\251\000\107\000\000\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\248\000\000\000\
\000\000\070\000\000\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\255\000\000\
\252\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\254\000\032\255\000\000\000\000\000\000\
\000\000\000\000\000\000\255\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\001\000\000\172\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\001\000\000\123\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\001\041\255\112\255\
\207\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\189\255\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\029\000\000\000\000\000\029\000\000\000\000\000\
\000\000\000\000\029\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\001\134\255\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\001\007\001\000\000\000\000\000\000\
\000\000\029\000\029\000\029\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000\006\001\000\000\000\000\000\000\
\000\000\000\000\002\001\000\000\001\000\000\000\117\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
\000\000\010\001\000\000\000\000\000\000\201\255\215\255\000\000\
\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\001\000\000\029\000\000\000\000\000\000\000\
\000\000\009\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\000\000\029\000\000\000\117\255\000\000\
\000\000\000\000\000\000\013\001\000\000\000\000\002\000\002\000\
\008\000\016\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\018\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\006\000\000\000\038\001\253\255\008\001\064\001\154\255\
\192\255\000\000\000\000\000\000\196\001\198\001\028\000\230\255\
\195\001\014\000\251\255\161\255\184\001\000\000\199\255\044\000\
\000\000\086\001\000\000\151\001\122\255\011\001\000\000\000\000\
\139\001\135\255\240\254\105\255\000\000\050\001\202\254\015\001\
\194\001\000\000\000\000\071\255\151\255\031\255"

let yytablesize = 630
let yytable = "\024\000\
\134\000\138\000\134\000\044\000\171\000\130\000\137\000\126\000\
\127\000\200\000\133\000\196\000\004\001\087\000\195\000\132\000\
\060\000\131\000\130\000\033\000\066\001\041\000\235\000\135\000\
\019\000\019\000\224\000\020\000\020\000\048\001\212\000\072\000\
\160\000\073\000\053\001\040\000\021\000\042\000\063\000\078\000\
\045\000\220\000\106\001\085\000\186\000\085\000\084\001\085\000\
\078\000\085\000\190\000\096\000\112\001\122\000\069\000\127\000\
\091\000\045\000\051\000\060\000\051\000\132\000\079\000\001\000\
\051\000\085\000\085\000\045\000\098\001\131\000\074\000\079\000\
\022\000\022\000\051\000\054\001\070\001\090\000\114\000\092\000\
\225\000\051\000\145\000\055\000\031\001\085\000\060\000\161\000\
\162\000\166\000\154\000\168\000\169\000\170\000\025\000\114\000\
\033\000\051\000\163\000\069\000\051\000\069\000\011\001\022\001\
\023\001\146\000\147\000\112\000\112\000\112\000\191\000\182\000\
\092\000\226\000\199\000\026\000\090\000\078\000\041\000\114\000\
\090\000\093\000\041\000\021\001\060\000\041\000\225\000\037\000\
\092\000\092\000\041\000\072\000\213\000\073\000\005\001\027\001\
\090\000\090\000\082\000\041\000\079\000\082\000\030\000\081\000\
\092\001\094\000\027\000\059\000\092\000\060\000\239\000\041\000\
\041\000\041\000\041\000\028\000\090\000\100\001\101\001\226\000\
\047\000\222\000\069\000\041\000\230\000\038\000\063\000\030\000\
\125\000\029\000\219\000\208\000\030\000\064\000\082\000\221\000\
\078\000\050\000\101\000\080\001\078\000\211\000\042\001\047\000\
\249\000\250\000\045\001\051\000\038\000\051\000\000\001\051\000\
\051\000\051\000\068\001\102\000\227\000\078\000\007\001\052\000\
\009\001\051\001\096\001\013\001\065\000\079\000\024\000\139\000\
\008\001\079\000\051\000\012\001\053\000\051\000\078\001\105\000\
\015\001\055\000\017\001\080\000\055\000\055\000\080\000\080\000\
\045\000\051\000\079\000\110\001\074\000\051\000\054\000\105\000\
\105\000\025\001\066\000\105\000\199\000\138\000\055\000\139\000\
\080\000\055\000\118\000\018\001\111\001\074\000\069\001\038\001\
\039\001\040\001\041\001\049\001\105\000\055\000\050\001\060\000\
\026\001\055\000\067\000\118\000\089\001\134\000\138\000\090\001\
\091\001\138\000\075\000\137\000\126\000\127\000\139\000\133\000\
\139\000\199\000\134\000\138\000\132\000\057\001\131\000\130\000\
\137\000\126\000\134\000\138\000\133\000\236\000\107\000\237\000\
\137\000\126\000\127\000\131\000\133\000\108\001\109\001\067\001\
\056\000\132\000\057\000\131\000\130\000\076\000\059\001\107\000\
\024\000\076\001\024\000\079\001\021\000\080\000\199\000\058\000\
\038\000\075\001\038\000\192\000\038\000\077\000\038\000\024\000\
\102\001\038\000\083\001\199\000\193\000\173\000\038\000\174\000\
\038\000\083\000\194\000\027\000\027\000\103\001\043\000\038\000\
\175\000\043\000\094\001\081\000\028\000\068\000\043\000\184\000\
\185\000\104\001\109\000\038\000\038\000\038\000\038\000\043\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\038\000\
\038\000\085\000\076\001\043\000\043\000\043\000\043\000\057\000\
\084\000\117\000\057\000\057\000\086\000\105\000\118\000\043\000\
\105\000\105\000\246\000\088\000\192\000\199\000\095\000\148\000\
\097\000\098\000\099\000\119\000\057\000\252\000\100\000\057\000\
\028\000\103\000\105\000\194\000\104\000\105\000\003\000\032\001\
\004\000\033\001\108\000\057\000\005\000\006\000\106\000\057\000\
\007\000\105\000\008\000\009\000\107\000\137\000\010\000\142\000\
\112\000\112\000\112\000\205\000\255\000\011\000\121\000\125\000\
\012\000\128\000\129\000\133\000\135\000\013\000\014\000\015\000\
\136\000\143\000\144\000\153\000\201\000\151\000\159\000\157\000\
\188\000\164\000\180\000\179\000\183\000\187\000\189\000\197\000\
\204\000\198\000\203\000\205\000\207\000\210\000\217\000\209\000\
\202\000\215\000\216\000\231\000\218\000\238\000\229\000\232\000\
\206\000\233\000\003\001\228\000\234\000\247\000\240\000\242\000\
\243\000\244\000\020\001\024\001\251\000\245\000\006\001\030\001\
\002\001\043\001\044\001\046\001\019\001\255\000\058\001\037\001\
\047\001\016\001\001\001\055\001\199\000\056\001\060\001\062\001\
\064\001\052\001\065\001\071\001\072\001\061\001\074\001\014\001\
\073\001\081\001\063\001\086\001\085\001\087\001\088\001\097\001\
\093\001\063\000\226\000\028\001\029\001\107\001\043\000\057\000\
\092\000\055\000\144\000\010\001\095\001\098\000\073\000\049\000\
\061\000\067\000\059\000\096\000\094\000\102\000\152\000\032\000\
\033\000\156\000\065\000\155\000\172\000\214\000\223\000\036\001\
\167\000\054\001\100\000\000\000\105\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\082\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\099\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\113\001"

let yycheck = "\003\000\
\000\000\000\000\067\000\009\000\100\000\063\000\000\000\000\000\
\000\000\000\000\000\000\117\000\198\000\040\000\117\000\000\000\
\020\000\000\000\000\000\006\000\037\001\008\000\174\000\003\001\
\001\001\001\001\148\000\004\001\004\001\255\000\133\000\004\001\
\090\000\006\001\009\001\008\000\013\001\013\001\004\001\019\001\
\009\001\144\000\097\001\003\001\109\000\005\001\063\001\007\001\
\019\001\009\001\115\000\046\000\107\001\057\000\027\000\059\000\
\019\001\026\001\003\001\063\000\005\001\065\000\042\001\001\000\
\009\001\025\001\026\001\036\001\085\001\064\000\043\001\042\001\
\049\001\049\001\019\001\050\001\046\001\043\001\009\001\042\001\
\008\001\026\001\077\000\024\001\236\000\045\001\090\000\091\000\
\092\000\095\000\085\000\097\000\098\000\099\000\013\001\026\001\
\083\000\042\001\093\000\072\000\045\001\074\000\205\000\225\000\
\226\000\078\000\079\000\038\001\039\001\040\001\116\000\106\000\
\009\001\041\001\008\001\013\001\005\001\019\001\005\001\050\001\
\009\001\026\001\009\001\005\001\128\000\012\001\008\001\013\001\
\025\001\026\001\017\001\004\001\026\001\006\001\199\000\231\000\
\025\001\026\001\005\001\026\001\042\001\008\001\026\001\045\001\
\074\001\050\001\004\001\006\001\045\001\153\000\177\000\038\001\
\039\001\040\001\041\001\013\001\045\001\087\001\088\001\041\001\
\003\001\148\000\135\000\050\001\159\000\019\001\004\001\051\001\
\013\001\027\001\143\000\128\000\030\001\026\001\041\001\148\000\
\005\001\013\001\009\001\058\001\009\001\026\001\247\000\026\001\
\188\000\189\000\251\000\003\001\042\001\005\001\194\000\007\001\
\008\001\009\001\044\001\026\001\153\000\026\001\202\000\013\001\
\204\000\003\001\081\001\207\000\019\001\005\001\210\000\019\001\
\203\000\009\001\026\001\206\000\013\001\029\001\054\001\009\001\
\211\000\005\001\213\000\005\001\008\001\009\001\008\001\009\001\
\036\001\041\001\026\001\009\001\009\001\045\001\013\001\025\001\
\026\001\228\000\025\001\009\001\008\001\013\001\026\001\015\001\
\026\001\029\001\009\001\216\000\026\001\026\001\018\001\242\000\
\243\000\244\000\245\000\001\001\026\001\041\001\002\001\003\001\
\229\000\045\001\019\001\026\001\069\001\005\001\005\001\072\001\
\073\001\008\001\013\001\005\001\005\001\005\001\003\001\005\001\
\005\001\008\001\018\001\018\001\005\001\016\001\005\001\005\001\
\018\001\018\001\026\001\026\001\018\001\004\001\009\001\006\001\
\026\001\026\001\026\001\018\001\026\001\102\001\103\001\043\001\
\020\001\026\001\022\001\026\001\026\001\013\001\019\001\026\001\
\020\001\053\001\022\001\055\001\024\001\029\001\008\001\035\001\
\003\001\052\001\005\001\004\001\007\001\026\001\009\001\035\001\
\018\001\012\001\061\001\008\001\013\001\002\001\017\001\004\001\
\019\001\009\001\019\001\004\001\004\001\018\001\009\001\026\001\
\013\001\012\001\077\001\045\001\013\001\013\001\017\001\013\001\
\014\001\093\001\004\001\038\001\039\001\040\001\041\001\026\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\050\001\
\051\001\026\001\110\001\038\001\039\001\040\001\041\001\005\001\
\046\001\027\001\008\001\009\001\003\001\005\001\032\001\050\001\
\008\001\009\001\005\001\009\001\004\001\008\001\041\001\004\001\
\038\001\039\001\040\001\045\001\026\001\013\001\050\001\029\001\
\013\001\043\001\026\001\019\001\025\001\029\001\021\001\013\001\
\023\001\015\001\019\001\041\001\027\001\028\001\026\001\045\001\
\031\001\041\001\033\001\034\001\025\001\072\000\037\001\074\000\
\038\001\039\001\040\001\003\001\004\001\044\001\013\001\013\001\
\047\001\003\001\005\001\014\001\003\001\052\001\053\001\054\001\
\005\001\019\001\043\001\004\001\025\001\014\001\026\001\013\001\
\004\001\013\001\009\001\014\001\014\001\013\001\004\001\013\001\
\051\001\014\001\026\001\003\001\003\001\009\001\014\001\005\001\
\019\001\005\001\019\001\003\001\007\001\003\001\019\001\048\001\
\026\001\048\001\004\001\026\001\013\001\009\001\013\001\026\001\
\026\001\026\001\005\001\005\001\017\001\026\001\014\001\005\001\
\019\001\003\001\003\001\003\001\019\001\004\001\009\001\019\001\
\005\001\026\001\036\001\019\001\008\001\007\001\009\001\005\001\
\014\001\026\001\007\001\005\001\012\001\026\001\005\001\210\000\
\012\001\009\001\019\001\009\001\019\001\005\001\005\001\009\001\
\019\001\007\001\041\001\049\001\049\001\009\001\005\001\005\001\
\005\001\005\001\005\001\204\000\048\001\007\001\026\001\026\001\
\007\001\026\001\007\001\007\001\007\001\026\001\083\000\026\001\
\026\001\087\000\026\001\086\000\101\000\135\000\148\000\238\000\
\095\000\050\001\026\001\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\048\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\086\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\110\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  AMONG\000\
  WEAKSECRET\000\
  CANTEXT\000\
  FAIL\000\
  WHERE\000\
  OTHERWISE\000\
  DATA\000\
  PARAM\000\
  PRIVATE\000\
  "

let yynames_block = "\
  IDENT\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 114 "piparser.mly"
 ( (FunDecl(_3, _5, _1)) :: _7 )
# 597 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 116 "piparser.mly"
 ( (DataFunDecl(_2, _4)) :: _6 )
# 606 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'eqlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 118 "piparser.mly"
 ( (Equation(_2)) :: _4 )
# 614 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'reduc) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 120 "piparser.mly"
 ( (Reduc((_3,_5)::_7, _1)) :: _8 )
# 625 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reducmayfailseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 123 "piparser.mly"
 ( (ReducFail(_3,_1)) :: _5 )
# 634 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 126 "piparser.mly"
        ( (PredDecl(_2, _4, _5)) :: _7 )
# 644 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 128 "piparser.mly"
        ( (PredDecl(_2, _4, [])) :: _6 )
# 653 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 130 "piparser.mly"
 ( (PDef(_2,_4)) :: _6 )
# 662 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'gfactformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'optint) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'foptbindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 132 "piparser.mly"
        ( (NoUnif (_2,_3,_4)) :: _6 )
# 672 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 134 "piparser.mly"
        ( (Param(_2,S _4)) :: _6 )
# 681 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 136 "piparser.mly"
        ( (Param(_2,I _4)) :: _6 )
# 690 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'queryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 138 "piparser.mly"
        ( (Query(_2)) :: _4 )
# 698 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 140 "piparser.mly"
        ( (Noninterf(_2)) :: _4 )
# 706 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 142 "piparser.mly"
        ( (Weaksecret(_2)) :: _4 )
# 714 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'optphase) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'optbindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 144 "piparser.mly"
 ( (Not(((PGSimpleFact(("attacker",dummy_ext), [_2]),dummy_ext),_3),_4)) :: _6 )
# 724 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'event) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'optbindingseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 146 "piparser.mly"
 ( (Not(_2,_3)) :: _5 )
# 733 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 148 "piparser.mly"
        ( (Elimtrue (_2, [])) :: _4 )
# 741 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'varmayfail) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 150 "piparser.mly"
        ( (Elimtrue (_2, _4)) :: _8 )
# 750 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 152 "piparser.mly"
        ( (Free(_3,_1)) :: _5 )
# 759 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'clauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 154 "piparser.mly"
        ( (Clauses(_2)) :: _3 )
# 767 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "piparser.mly"
 ( [] )
# 773 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lib) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    Obj.repr(
# 160 "piparser.mly"
 ( _1, _3 )
# 781 "piparser.ml"
               : Piptree.decl list * Piptree.process))
; (fun __caml_parser_env ->
    Obj.repr(
# 164 "piparser.mly"
 ( true )
# 787 "piparser.ml"
               : 'privateopt))
; (fun __caml_parser_env ->
    Obj.repr(
# 166 "piparser.mly"
 ( false )
# 793 "piparser.ml"
               : 'privateopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'reduc) in
    Obj.repr(
# 172 "piparser.mly"
 ( (_1,_3) :: _5 )
# 802 "piparser.ml"
               : 'reduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 174 "piparser.mly"
 ( [(_1,_3)] )
# 810 "piparser.ml"
               : 'reduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'varmayfail) in
    Obj.repr(
# 178 "piparser.mly"
        ( _1::_3 )
# 818 "piparser.ml"
               : 'varmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 180 "piparser.mly"
        ( [_1] )
# 825 "piparser.ml"
               : 'varmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'varmayfail) in
    Obj.repr(
# 184 "piparser.mly"
        ( (_1,_3,_5) )
# 834 "piparser.ml"
               : 'reducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 186 "piparser.mly"
        ( (_1,_3,[]) )
# 842 "piparser.ml"
               : 'reducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reducmayfail) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'reducmayfailseq) in
    Obj.repr(
# 190 "piparser.mly"
 ( _1::_3 )
# 850 "piparser.ml"
               : 'reducmayfailseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reducmayfail) in
    Obj.repr(
# 192 "piparser.mly"
 ( [_1] )
# 857 "piparser.ml"
               : 'reducmayfailseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 199 "piparser.mly"
        ( [(_1, _3)] )
# 865 "piparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'eqlist) in
    Obj.repr(
# 201 "piparser.mly"
 ( (_1, _3) :: _5 )
# 874 "piparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 207 "piparser.mly"
 ( PFail, parse_extent () )
# 880 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 210 "piparser.mly"
 ( PFunApp (_1, _3), parse_extent() )
# 888 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 212 "piparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice specident", parse_extent()), [_3; _5]), parse_extent() )
# 897 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 215 "piparser.mly"
 ( PIdent (_1), parse_extent() )
# 904 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 217 "piparser.mly"
 ( PTuple (_2), parse_extent() )
# 911 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 221 "piparser.mly"
 ( _1 :: _3 )
# 919 "piparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 223 "piparser.mly"
 ( [_1] )
# 926 "piparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 227 "piparser.mly"
        ( _1 )
# 933 "piparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 229 "piparser.mly"
        ( [] )
# 939 "piparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 233 "piparser.mly"
    ( _1 :: _3 )
# 947 "piparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 235 "piparser.mly"
    ( [_1] )
# 954 "piparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 239 "piparser.mly"
    ( (_1, Some _4) )
# 962 "piparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 241 "piparser.mly"
    ( (_1, None) )
# 969 "piparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 245 "piparser.mly"
    ( _1 :: _3 )
# 977 "piparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 247 "piparser.mly"
    ( [_1] )
# 984 "piparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 253 "piparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 992 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 255 "piparser.mly"
 ( PGIdent (_1), parse_extent() )
# 999 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 257 "piparser.mly"
 ( PGTuple (_2), parse_extent() )
# 1006 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 259 "piparser.mly"
        ( PGName (_1, _3), parse_extent() )
# 1014 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 263 "piparser.mly"
 ( _1 :: _3 )
# 1022 "piparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 265 "piparser.mly"
 ( [_1] )
# 1029 "piparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 269 "piparser.mly"
        ( _1 )
# 1036 "piparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 271 "piparser.mly"
        ( [] )
# 1042 "piparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 276 "piparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1051 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 278 "piparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1059 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 280 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1068 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 282 "piparser.mly"
        ( [(_1, _3)] )
# 1076 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 286 "piparser.mly"
        ( _1 )
# 1083 "piparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 288 "piparser.mly"
        ( [] )
# 1089 "piparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nebindingseq) in
    Obj.repr(
# 292 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1098 "piparser.ml"
               : 'nebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 294 "piparser.mly"
        ( [(_1, _3)] )
# 1106 "piparser.ml"
               : 'nebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nebindingseq) in
    Obj.repr(
# 298 "piparser.mly"
        ( _2 )
# 1113 "piparser.ml"
               : 'optbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 300 "piparser.mly"
        ( [] )
# 1119 "piparser.ml"
               : 'optbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gtermseq) in
    Obj.repr(
# 304 "piparser.mly"
 ( PGSimpleFact(_1,_3), parse_extent() )
# 1127 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 306 "piparser.mly"
        ( PGNeq(_1,_3), parse_extent() )
# 1135 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 308 "piparser.mly"
        ( PGEqual(_1, _3), parse_extent() )
# 1143 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gfact) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optphase) in
    Obj.repr(
# 312 "piparser.mly"
    ( (_1,_2) )
# 1151 "piparser.ml"
               : 'event))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'query) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'queryseq) in
    Obj.repr(
# 316 "piparser.mly"
    ( _1 :: _3 )
# 1159 "piparser.ml"
               : 'queryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'query) in
    Obj.repr(
# 318 "piparser.mly"
    ( [_1] )
# 1166 "piparser.ml"
               : 'queryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'event) in
    Obj.repr(
# 322 "piparser.mly"
    ( PRealQuery(PBefore(_1, PFalse)) )
# 1173 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'realquery) in
    Obj.repr(
# 324 "piparser.mly"
    ( PRealQuery(_1) )
# 1180 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 326 "piparser.mly"
    ( PPutBegin(_2, _4) )
# 1188 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 328 "piparser.mly"
    ( PBinding(_2,_4) )
# 1196 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'event) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 333 "piparser.mly"
    ( PBefore(_1, _3) )
# 1204 "piparser.ml"
               : 'realquery))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'hyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 337 "piparser.mly"
    ( POr(_1, _3) )
# 1212 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'hyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 339 "piparser.mly"
    ( PAnd(_1, _3) )
# 1220 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'hyp) in
    Obj.repr(
# 341 "piparser.mly"
    ( _2 )
# 1227 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'event) in
    Obj.repr(
# 343 "piparser.mly"
    ( PQEvent(_1) )
# 1234 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'realquery) in
    Obj.repr(
# 345 "piparser.mly"
    ( PNestedQuery(_2) )
# 1241 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 351 "piparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 1249 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 353 "piparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 1256 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 355 "piparser.mly"
 ( PFGTuple (_2), parse_extent() )
# 1263 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 357 "piparser.mly"
        ( PFGName (_1, _3), parse_extent() )
# 1271 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 359 "piparser.mly"
        ( PFGAny (_2), parse_extent() )
# 1278 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 363 "piparser.mly"
 ( _1 :: _3 )
# 1286 "piparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 365 "piparser.mly"
 ( [_1] )
# 1293 "piparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 369 "piparser.mly"
        ( _1 )
# 1300 "piparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 371 "piparser.mly"
        ( [] )
# 1306 "piparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 376 "piparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1315 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 378 "piparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1323 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 380 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1332 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 382 "piparser.mly"
        ( [(_1, _3)] )
# 1340 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 386 "piparser.mly"
        ( _1 )
# 1347 "piparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 388 "piparser.mly"
        ( [] )
# 1353 "piparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnebindingseq) in
    Obj.repr(
# 392 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1362 "piparser.ml"
               : 'fnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 394 "piparser.mly"
        ( [(_1, _3)] )
# 1370 "piparser.ml"
               : 'fnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fnebindingseq) in
    Obj.repr(
# 398 "piparser.mly"
        ( _2 )
# 1377 "piparser.ml"
               : 'foptbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 400 "piparser.mly"
        ( [] )
# 1383 "piparser.ml"
               : 'foptbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'optphase) in
    Obj.repr(
# 404 "piparser.mly"
    ( (_1,_3,_4) )
# 1392 "piparser.ml"
               : 'gfactformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 410 "piparser.mly"
    ( _2 )
# 1399 "piparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 412 "piparser.mly"
    ( -1 )
# 1405 "piparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 418 "piparser.mly"
    ( _2 )
# 1412 "piparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 420 "piparser.mly"
    ( -1 )
# 1418 "piparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'termseq) in
    Obj.repr(
# 426 "piparser.mly"
 ( PSimpleFact(_1,_3), parse_extent() )
# 1426 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 428 "piparser.mly"
        ( PSNeq(_1,_3), parse_extent() )
# 1434 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 430 "piparser.mly"
        ( PSEqual(_1, _3), parse_extent() )
# 1442 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factand) in
    Obj.repr(
# 434 "piparser.mly"
 ( _1 :: _3 )
# 1450 "piparser.ml"
               : 'factand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 436 "piparser.mly"
 ( [_1] )
# 1457 "piparser.ml"
               : 'factand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 440 "piparser.mly"
        ( PClause(_1,_3) )
# 1465 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 442 "piparser.mly"
        ( PClause([],_1) )
# 1472 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 444 "piparser.mly"
        ( PEquiv(_1,_3,true) )
# 1480 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 446 "piparser.mly"
        ( PEquiv(_1,_3,false) )
# 1488 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'clause) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'varmayfail) in
    Obj.repr(
# 450 "piparser.mly"
        ( (_1,_3) )
# 1496 "piparser.ml"
               : 'clausemayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'clause) in
    Obj.repr(
# 452 "piparser.mly"
        ( (_1,[]) )
# 1503 "piparser.ml"
               : 'clausemayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'clausemayfail) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'clauses) in
    Obj.repr(
# 456 "piparser.mly"
 ( _1 :: _3 )
# 1511 "piparser.ml"
               : 'clauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'clausemayfail) in
    Obj.repr(
# 458 "piparser.mly"
 ( [_1] )
# 1518 "piparser.ml"
               : 'clauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    Obj.repr(
# 464 "piparser.mly"
 ( _2 )
# 1525 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 466 "piparser.mly"
 ( PLetDef _1 )
# 1532 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 468 "piparser.mly"
 ( PRepl _2 )
# 1539 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 470 "piparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 1548 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 474 "piparser.mly"
 ( PRestr(_2, _3) )
# 1556 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 476 "piparser.mly"
 ( PTest(_2,_4,_6) )
# 1565 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 478 "piparser.mly"
 ( PTest(_2,_4,PNil) )
# 1573 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 480 "piparser.mly"
 ( PInput(_3,_5,_7) )
# 1582 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 482 "piparser.mly"
 ( POutput(_3,_5,_7) )
# 1591 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 484 "piparser.mly"
 ( PLet(_2,_4,_6,PNil) )
# 1600 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 486 "piparser.mly"
 ( PLet(_2,_4,_6,_8) )
# 1610 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 488 "piparser.mly"
        ( PLetFilter(_2,_4,_6,PNil) )
# 1619 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'fact) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 490 "piparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_8) )
# 1631 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 494 "piparser.mly"
 ( PPar(_1,_3) )
# 1639 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'termseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 496 "piparser.mly"
        ( PEvent(_2, _4, _6) )
# 1648 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 498 "piparser.mly"
        ( PPhase(_2, _3) )
# 1656 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 502 "piparser.mly"
        ( _2 )
# 1663 "piparser.ml"
               : 'optprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 504 "piparser.mly"
        ( PNil )
# 1669 "piparser.ml"
               : 'optprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 508 "piparser.mly"
    ( PPatVar(_1) )
# 1676 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'patternseq) in
    Obj.repr(
# 510 "piparser.mly"
    ( PPatTuple(_2) )
# 1683 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'patternseq) in
    Obj.repr(
# 512 "piparser.mly"
    ( PPatFunApp(_1,_3) )
# 1691 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 514 "piparser.mly"
    ( PPatEqual(_2) )
# 1698 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patternseq) in
    Obj.repr(
# 518 "piparser.mly"
    ( _1 :: _3 )
# 1706 "piparser.ml"
               : 'patternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 520 "piparser.mly"
    ( [_1] )
# 1713 "piparser.ml"
               : 'patternseq))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Piptree.decl list * Piptree.process)
