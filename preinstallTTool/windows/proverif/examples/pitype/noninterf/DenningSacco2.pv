(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet and Vincent Cheval                        *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2014                      *
 *                                                           *
 *************************************************************)

(*

    This file is free software; you can redistribute it and/or modify
    it under the terms of the BSD License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    BSD license for more details (in file LICENSEBSD).

*)
(* Denning-Sacco
   In this model, I separate the keys for encryption and the
   keys for signature, which complicates the model. *)

free c: channel.

type host.
type key.
type pkey.
type skey.
type spkey.
type sskey.

(* Probabilistic public key encryption *)

type seed.
fun pk(skey): pkey.
fun internal_encrypt(bitstring, pkey, seed): bitstring.
reduc forall x: bitstring, y: skey, r: seed; 
        decrypt(internal_encrypt(x,pk(y),r),y) = x.
letfun encrypt(x: bitstring, y:pkey) = new r: seed; internal_encrypt(x,y,r).

(* Signatures *)

fun spk(sskey): spkey.
fun sign(bitstring, sskey): bitstring.
reduc forall m: bitstring, k: sskey; getmess(sign(m,k)) = m.
reduc forall m: bitstring, k: sskey; checksign(sign(m,k), spk(k)) = m.

(* Shared key encryption *)

fun sencrypt(bitstring,key): bitstring.
reduc forall x: bitstring, y: key; sdecrypt(sencrypt(x,y),y) = x.

(* Secrecy assumptions *)

not attacker(new skA).
not attacker(new skB).

(* Queries *)

free secretB: bitstring [private].
noninterf secretB.

(* Initiator *)

let processInitiator(skA: sskey, pkA: spkey, pkB: pkey) =
        in(c, pk2: pkey);
	new k: key;
	out(c, encrypt(sign((pkA, pk2, k), skA), pk2));
	in(c, m: bitstring);
	let s = sdecrypt(m,k).

(* Responder *)

let processResponder(skB: skey, pkB: pkey, pkA: spkey) =
	in(c, km: bitstring);
	let ks = decrypt(km,skB) in
	let (=pkA, =pkB, k:key) = checksign(ks, pkA) in
	out(c, sencrypt(secretB, k)).

(* Main process *)

process new skA: sskey; 
	let pkA = spk(skA) in
        out(c, pkA);
        new skB: skey; 
	let pkB = pk(skB) in
        out(c, pkB);
	((!processInitiator(skA, pkA, pkB)) | 
	 (!processResponder(skB, pkB, pkA)))

