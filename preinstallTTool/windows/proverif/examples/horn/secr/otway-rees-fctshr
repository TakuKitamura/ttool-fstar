(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet and Vincent Cheval                        *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2014                      *
 *                                                           *
 *************************************************************)

(*

    This file is free software; you can redistribute it and/or modify
    it under the terms of the BSD License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    BSD license for more details (in file LICENSEBSD).

*)
(* Otway Rees protocol.
   Correct version, from Millen, Ruess, 
   2000 IEEE Symposium on Security and Privacy *)

pred c/1 decompData, elimVar.

fun shr/1.

fun encrypt/2.

query c:secretA[].
query c:secretB[].

reduc

(* attacker *)
c:encrypt(m,k) & c:k -> c:m;
c:x & c:y -> c:encrypt(x,y);

c:A[];
c:B[];
c:C[];
c:shr(C[]);

(* A *)

c:X -> c:(N[X],A[],X, encrypt((Na[X], N[X], A[], X), shr(A[])));

c:(N[B[]], encrypt((Na[B[]],key), shr(A[]))) -> c:encrypt(secretA[], key);

(* B *)

c:(x,y,B[],z) -> c:(x,y,B[],z,encrypt((Nb[y],x,y,B[]), shr(B[])));

c:(x,y,B[],z) & c:(x,y2,encrypt((Nb[y], key), shr(B[]))) -> c:(x,y2);

c:(x,A[],B[],z) & c:(x,y2,encrypt((Nb[A[]],key), shr(B[]))) -> 
c:encrypt(secretB[], key);

(* Server *)

c:(x,a,b, encrypt((na, x,a,b), shr(a)), encrypt((nb,x,a,b), shr(b))) ->
c:(x,encrypt((na, k[x,a,b]), shr(a)),
     encrypt((nb, k[x,a,b]), shr(b))).

