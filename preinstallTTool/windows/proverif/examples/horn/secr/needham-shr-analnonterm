(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet and Vincent Cheval                        *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2014                      *
 *                                                           *
 *************************************************************)

(*

    This file is free software; you can redistribute it and/or modify
    it under the terms of the BSD License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    BSD license for more details (in file LICENSEBSD).

*)
(* Inspired from the Needham Shroeder shared key protocol
The analyzer loops ! *)

pred cs0/1 elimVar, decompData.

fun encrypt/2.
fun decr/1.

param verboseRules = yes.

query cs0:secretA[].

reduc

(*
cs0:encrypt(n,  k[Kas[], Ks2]) -> cs0:encrypt(decr(n), k[Kas[], Ks2]).
*)

(* A *)

cs0:encrypt(n, key) & cs0:encrypt((Na[Ks2], key), Kas[]) -> cs0:encrypt(decr(n), key);

(* S *)

cs0:encrypt((Na[Ks2], k[Ks1, Ks2]), Ks1).
