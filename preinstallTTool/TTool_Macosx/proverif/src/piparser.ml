type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Piptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | AMONG
  | WEAKSECRET
  | CANTEXT
  | FAIL
  | WHERE
  | OTHERWISE
  | DATA
  | PARAM
  | PRIVATE

open Parsing;;
let _ = parse_error;;
# 2 "piparser.mly"
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet and Vincent Cheval                        *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2014                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "piparser.mly"

open Parsing_helper
open Ptree
open Piptree
exception Syntax

# 96 "piparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  271 (* REPL *);
  272 (* IF *);
  273 (* THEN *);
  274 (* ELSE *);
  275 (* EQUAL *);
  276 (* FUN *);
  277 (* EQUATION *);
  278 (* REDUCTION *);
  279 (* PREDICATE *);
  280 (* PROCESS *);
  281 (* SLASH *);
  282 (* DOT *);
    0 (* EOF *);
  283 (* LET *);
  284 (* QUERY *);
  285 (* BEFORE *);
  286 (* PUTBEGIN *);
  287 (* NONINTERF *);
  288 (* EVENT *);
  289 (* NOT *);
  290 (* ELIMTRUE *);
  291 (* FREE *);
  292 (* SUCHTHAT *);
  293 (* CLAUSES *);
  294 (* RED *);
  295 (* EQUIV *);
  296 (* EQUIVEQ *);
  297 (* WEDGE *);
  298 (* DIFF *);
  299 (* COLON *);
  300 (* NOUNIF *);
  301 (* PHASE *);
  302 (* AMONG *);
  303 (* WEAKSECRET *);
  304 (* CANTEXT *);
  305 (* FAIL *);
  306 (* WHERE *);
  307 (* OTHERWISE *);
  308 (* DATA *);
  309 (* PARAM *);
  310 (* PRIVATE *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\001\000\003\000\003\000\
\005\000\005\000\019\000\019\000\021\000\021\000\006\000\006\000\
\004\000\004\000\004\000\004\000\004\000\023\000\023\000\022\000\
\022\000\007\000\007\000\024\000\024\000\013\000\013\000\014\000\
\014\000\014\000\014\000\027\000\027\000\025\000\025\000\028\000\
\028\000\028\000\028\000\026\000\026\000\029\000\029\000\016\000\
\016\000\030\000\030\000\030\000\017\000\012\000\012\000\031\000\
\031\000\031\000\031\000\032\000\033\000\033\000\033\000\033\000\
\033\000\034\000\034\000\034\000\034\000\034\000\037\000\037\000\
\035\000\035\000\038\000\038\000\038\000\038\000\036\000\036\000\
\039\000\039\000\011\000\011\000\009\000\015\000\015\000\010\000\
\010\000\018\000\018\000\018\000\040\000\040\000\041\000\041\000\
\041\000\041\000\042\000\042\000\020\000\020\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\043\000\043\000\
\044\000\044\000\044\000\044\000\045\000\045\000\000\000"

let yylen = "\002\000\
\007\000\006\000\006\000\008\000\005\000\007\000\006\000\006\000\
\006\000\006\000\006\000\004\000\004\000\004\000\006\000\005\000\
\004\000\008\000\005\000\003\000\000\000\004\000\001\000\000\000\
\005\000\004\000\003\000\001\000\007\000\003\000\003\000\001\000\
\001\000\004\000\006\000\001\000\003\000\003\000\001\000\001\000\
\000\000\003\000\001\000\005\000\001\000\003\000\001\000\004\000\
\001\000\003\000\004\000\003\000\001\000\001\000\000\000\006\000\
\004\000\005\000\003\000\001\000\000\000\005\000\003\000\002\000\
\000\000\003\000\003\000\003\000\002\000\003\000\001\000\001\000\
\001\000\004\000\004\000\003\000\003\000\003\000\003\000\001\000\
\003\000\004\000\001\000\003\000\004\000\002\000\003\000\001\000\
\001\000\000\000\006\000\004\000\005\000\003\000\001\000\000\000\
\005\000\003\000\002\000\000\000\004\000\002\000\000\000\002\000\
\000\000\003\000\003\000\003\000\003\000\001\000\003\000\001\000\
\003\000\003\000\005\000\001\000\003\000\002\000\003\000\001\000\
\002\000\001\000\003\000\006\000\004\000\007\000\007\000\006\000\
\008\000\006\000\008\000\003\000\006\000\003\000\002\000\000\000\
\001\000\003\000\004\000\002\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\143\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\073\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\000\000\000\000\118\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\120\000\122\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\000\000\000\000\
\000\000\060\000\066\000\000\000\000\000\012\000\068\000\067\000\
\000\000\080\000\000\000\102\000\070\000\000\000\013\000\046\000\
\000\000\000\000\064\000\000\000\106\000\108\000\107\000\017\000\
\000\000\000\000\000\000\109\000\111\000\113\000\114\000\000\000\
\117\000\000\000\000\000\000\000\000\000\000\000\089\000\104\000\
\000\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\121\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\034\000\000\000\000\000\
\000\000\000\000\052\000\048\000\000\000\000\000\051\000\075\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\000\000\086\000\000\000\
\000\000\000\000\000\000\101\000\000\000\099\000\000\000\000\000\
\000\000\000\000\119\000\000\000\123\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\140\000\000\000\000\000\000\000\
\134\000\000\000\000\000\000\000\005\000\000\000\031\000\042\000\
\019\000\000\000\003\000\007\000\000\000\008\000\000\000\000\000\
\081\000\079\000\000\000\000\000\044\000\015\000\000\000\027\000\
\000\000\115\000\084\000\000\000\000\000\000\000\000\000\095\000\
\087\000\000\000\009\000\002\000\010\000\011\000\000\000\000\000\
\000\000\000\000\000\000\138\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\006\000\000\000\000\000\
\000\000\000\000\082\000\000\000\000\000\085\000\000\000\000\000\
\000\000\000\000\141\000\139\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\058\000\000\000\062\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\133\000\000\000\004\000\000\000\056\000\000\000\000\000\097\000\
\127\000\126\000\000\000\000\000\000\000\029\000\093\000\000\000\
\000\000\000\000\000\000\026\000\091\000\025\000"

let yydgoto = "\002\000\
\016\000\017\000\018\000\042\000\074\001\121\000\124\000\118\000\
\050\000\103\000\178\000\030\000\037\000\031\000\080\000\087\000\
\146\000\044\000\162\000\045\000\122\000\060\000\061\000\038\000\
\068\000\137\000\069\000\138\000\155\000\033\000\034\000\035\000\
\147\000\173\000\174\000\031\001\175\000\032\001\238\000\046\000\
\047\000\048\000\245\000\250\000\251\000"

let yysindex = "\050\000\
\085\000\000\000\023\255\095\255\125\255\038\000\144\255\166\255\
\024\255\024\255\165\255\173\255\208\255\215\255\000\000\000\000\
\120\255\037\000\249\255\023\255\229\255\000\000\252\255\046\000\
\045\000\222\255\059\255\080\000\086\000\097\000\020\255\034\000\
\089\000\147\000\000\000\112\000\133\000\157\000\147\255\152\000\
\053\255\084\255\049\255\121\000\085\000\102\000\113\000\035\255\
\122\000\139\000\140\000\142\000\150\000\227\255\155\000\023\255\
\158\000\023\255\167\000\168\000\000\000\023\255\023\255\160\000\
\227\255\039\000\169\000\170\000\000\000\222\255\134\000\222\255\
\159\000\136\000\085\000\222\255\222\255\062\000\162\000\000\000\
\038\000\173\000\085\000\144\255\152\000\171\000\154\000\023\255\
\023\255\023\255\085\000\172\000\024\255\000\000\024\255\024\255\
\024\255\172\000\024\255\000\000\195\255\174\000\177\000\085\000\
\175\000\018\255\227\255\178\000\179\000\183\000\000\000\000\000\
\227\255\024\255\105\255\180\000\176\000\023\000\156\000\163\000\
\166\000\143\000\192\000\181\000\193\000\023\255\000\000\194\000\
\182\000\063\255\096\255\222\255\000\000\195\000\184\000\187\000\
\190\000\000\000\000\000\222\255\158\000\000\000\000\000\000\000\
\062\000\000\000\025\255\000\000\000\000\023\255\000\000\000\000\
\185\000\186\000\000\000\085\000\000\000\000\000\000\000\000\000\
\199\000\161\000\121\000\000\000\000\000\000\000\000\000\164\000\
\000\000\191\000\195\255\144\000\203\000\089\000\000\000\000\000\
\197\000\188\000\000\000\189\000\196\000\198\000\141\255\204\000\
\023\255\023\255\000\000\200\000\117\000\043\255\023\255\201\000\
\202\000\212\000\204\000\227\255\000\000\205\000\023\255\085\000\
\023\255\158\000\085\000\023\255\000\000\000\000\085\000\085\000\
\206\000\085\000\000\000\000\000\222\255\207\000\000\000\000\000\
\000\000\134\255\034\000\213\000\128\255\062\000\062\000\215\000\
\085\000\222\255\000\000\172\000\208\000\209\000\000\000\218\000\
\195\255\138\000\195\255\000\000\210\000\000\000\085\000\085\000\
\085\000\085\000\000\000\227\255\000\000\222\000\224\000\227\255\
\226\000\225\000\228\000\117\000\000\000\024\255\023\255\023\255\
\000\000\223\000\214\000\029\255\000\000\216\000\000\000\000\000\
\000\000\227\000\000\000\000\000\085\000\000\000\229\000\222\255\
\000\000\000\000\025\255\211\000\000\000\000\000\230\000\000\000\
\217\000\000\000\000\000\231\000\232\000\233\000\234\000\000\000\
\000\000\195\255\000\000\000\000\000\000\000\000\223\000\023\255\
\117\000\212\255\117\000\000\000\237\000\236\000\238\000\239\000\
\085\000\023\255\172\000\023\255\000\000\000\000\134\000\240\000\
\171\000\085\000\000\000\195\255\235\000\000\000\244\000\241\000\
\250\000\227\255\000\000\000\000\227\255\227\255\204\000\000\000\
\242\000\085\000\219\000\148\000\000\000\134\000\000\000\000\000\
\247\000\195\255\197\000\204\000\204\000\223\000\083\000\106\000\
\000\000\023\255\000\000\220\000\000\000\138\000\251\000\000\000\
\000\000\000\000\227\255\227\255\191\255\000\000\000\000\138\000\
\223\000\223\000\023\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\111\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\254\000\206\255\000\000\000\000\000\000\
\000\000\001\001\041\000\000\000\000\000\000\000\000\000\081\000\
\076\000\245\000\000\000\136\255\000\000\246\000\094\000\248\000\
\145\255\000\000\000\000\055\255\111\000\000\000\100\000\000\000\
\000\000\101\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\102\255\000\000\000\000\254\000\000\000\000\000\
\000\000\122\255\047\000\000\000\000\000\001\001\000\001\053\000\
\000\000\000\000\111\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\111\000\000\000\248\000\000\000\000\000\210\255\
\000\000\000\000\111\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\000\000\249\000\111\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\252\000\032\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\001\000\000\176\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\111\000\000\000\000\000\000\000\000\000\
\243\000\000\000\105\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\001\075\255\045\255\071\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\092\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\111\000\
\000\000\000\000\111\000\000\000\000\000\000\000\111\000\111\000\
\000\000\111\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\001\169\255\000\000\000\000\000\000\000\000\000\000\
\111\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\001\005\001\000\000\000\000\000\000\000\000\111\000\111\000\
\111\000\111\000\000\000\000\000\000\000\000\000\000\000\000\000\
\149\000\009\001\000\000\000\000\000\000\000\000\000\000\254\000\
\000\000\003\000\000\000\016\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\111\000\000\000\010\001\000\000\
\000\000\000\000\186\255\069\000\000\000\000\000\253\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\111\000\000\000\000\000\000\000\000\000\000\000\000\000\013\001\
\000\000\111\000\000\000\000\000\000\000\000\000\255\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\111\000\000\000\016\255\000\000\000\000\000\000\000\000\
\014\001\000\000\000\000\002\000\002\000\006\000\014\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\017\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\008\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\221\255\000\000\253\255\221\000\044\001\160\255\192\255\
\000\000\000\000\000\000\185\001\198\001\084\000\232\255\199\001\
\010\000\020\000\163\255\184\001\000\000\203\255\218\255\000\000\
\085\001\000\000\153\001\116\255\002\001\000\000\000\000\141\001\
\131\255\248\254\106\255\000\000\052\001\021\000\006\001\195\001\
\000\000\000\000\074\255\152\255\034\255"

let yytablesize = 601
let yytable = "\023\000\
\131\000\136\000\132\000\135\000\168\000\124\000\131\000\129\000\
\128\000\094\000\193\000\125\000\001\001\130\000\085\000\032\000\
\059\000\040\000\192\000\221\000\232\000\128\000\197\000\019\000\
\019\000\063\001\020\000\020\000\043\000\045\001\181\000\182\000\
\222\000\209\000\157\000\021\000\041\000\050\001\076\000\142\000\
\043\000\030\000\183\000\099\000\217\000\202\000\252\000\151\000\
\187\000\088\000\001\000\081\001\120\000\088\000\125\000\160\000\
\062\000\043\000\059\000\129\000\100\000\077\000\070\000\112\000\
\071\000\223\000\030\000\043\000\179\000\088\000\088\000\022\000\
\022\000\095\001\091\000\123\000\067\001\083\000\051\001\083\000\
\112\000\083\000\028\001\083\000\059\000\158\000\159\000\205\000\
\208\000\088\000\032\000\039\000\110\000\110\000\110\000\088\000\
\019\001\020\001\092\000\083\000\083\000\072\000\089\000\196\000\
\112\000\008\001\039\000\024\000\189\000\067\000\039\000\224\000\
\163\000\039\000\165\000\166\000\167\000\190\000\039\000\083\000\
\227\000\210\000\059\000\191\000\049\000\090\000\049\000\039\000\
\049\000\049\000\049\000\002\001\018\001\188\000\024\001\222\000\
\132\000\025\000\045\000\039\000\039\000\039\000\039\000\054\000\
\089\001\243\000\059\000\049\000\196\000\236\000\049\000\039\000\
\076\000\067\000\219\000\067\000\036\000\097\001\098\001\143\000\
\144\000\045\000\049\000\036\000\005\001\076\000\049\000\009\001\
\223\000\026\000\077\001\011\001\012\001\080\000\014\001\077\000\
\080\000\049\000\027\000\039\001\076\000\246\000\247\000\042\001\
\076\000\051\000\036\000\253\000\077\000\022\001\077\000\079\000\
\065\001\093\001\077\000\004\001\170\000\006\001\171\000\107\001\
\010\001\076\000\048\001\035\001\036\001\037\001\038\001\172\000\
\036\000\080\000\036\000\077\000\036\000\075\001\036\000\067\000\
\108\001\036\000\041\000\196\000\052\000\041\000\036\000\216\000\
\036\000\026\000\041\000\053\000\218\000\066\001\107\000\036\000\
\062\000\054\001\066\000\041\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\036\000\036\000\036\000\036\000\041\000\
\041\000\041\000\041\000\047\001\059\000\115\000\058\000\036\000\
\036\000\086\001\116\000\041\000\087\001\088\001\136\000\132\000\
\135\000\136\000\124\000\131\000\129\000\072\001\063\000\117\000\
\125\000\046\001\130\000\136\000\132\000\135\000\080\001\124\000\
\131\000\129\000\128\000\136\000\132\000\135\000\196\000\124\000\
\131\000\129\000\105\001\106\001\064\001\125\000\091\001\130\000\
\015\001\026\000\070\000\049\000\071\000\049\000\073\001\128\000\
\076\001\049\000\027\000\053\000\090\000\023\001\053\000\053\000\
\055\000\055\000\056\000\049\000\055\000\055\000\078\000\065\000\
\028\000\145\000\049\000\029\000\090\000\090\000\064\000\057\000\
\053\000\078\000\027\000\053\000\078\000\078\000\055\000\103\000\
\103\000\055\000\049\000\103\000\103\000\049\000\101\001\053\000\
\090\000\072\000\196\000\053\000\073\000\055\000\078\000\103\000\
\103\000\055\000\074\000\056\001\099\001\103\000\103\000\073\001\
\103\000\003\000\072\000\004\000\116\000\105\000\137\000\005\000\
\006\000\196\000\103\001\007\000\103\000\008\000\009\000\103\000\
\189\000\010\000\075\000\100\001\109\001\116\000\105\000\043\000\
\011\000\249\000\024\000\012\000\024\000\079\000\021\000\191\000\
\013\000\014\000\015\000\095\000\096\000\097\000\110\000\110\000\
\110\000\024\000\135\000\233\000\136\000\234\000\029\001\137\000\
\030\001\137\000\134\000\081\000\139\000\082\000\083\000\084\000\
\086\000\093\000\098\000\102\000\101\000\104\000\105\000\119\000\
\106\000\126\000\123\000\132\000\127\000\130\000\133\000\148\000\
\150\000\140\000\141\000\156\000\198\000\199\000\185\000\154\000\
\161\000\177\000\186\000\176\000\180\000\195\000\184\000\200\000\
\194\000\201\000\202\000\204\000\215\000\051\001\206\000\212\000\
\214\000\228\000\213\000\231\000\226\000\235\000\203\000\207\000\
\229\000\237\000\225\000\230\000\244\000\239\000\240\000\000\001\
\248\000\017\001\003\001\021\001\255\000\241\000\027\001\242\000\
\040\001\016\001\041\001\043\001\034\001\252\000\196\000\013\001\
\044\001\053\001\052\001\059\001\254\000\055\001\057\001\049\001\
\062\001\068\001\058\001\071\001\007\001\084\001\061\001\069\001\
\078\001\070\001\060\001\223\000\083\001\082\001\085\001\094\001\
\025\001\026\001\041\000\104\001\090\001\055\000\061\000\090\000\
\053\000\149\000\092\001\096\000\102\001\142\000\071\000\047\000\
\059\000\065\000\100\000\057\000\094\000\032\000\063\000\092\000\
\098\000\152\000\169\000\153\000\211\000\220\000\033\001\164\000\
\000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\079\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\110\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\096\001"

let yycheck = "\003\000\
\065\000\000\000\000\000\000\000\098\000\000\000\000\000\000\000\
\062\000\045\000\115\000\000\000\195\000\000\000\039\000\006\000\
\020\000\008\000\115\000\145\000\171\000\000\000\000\000\001\001\
\001\001\034\001\004\001\004\001\009\000\252\000\013\001\014\001\
\008\001\130\000\088\000\013\001\013\001\009\001\019\001\075\000\
\009\001\026\001\107\000\009\001\141\000\003\001\004\001\083\000\
\113\000\005\001\001\000\060\001\056\000\009\001\058\000\091\000\
\004\001\026\001\062\000\063\000\026\001\042\001\004\001\009\001\
\006\001\041\001\051\001\036\001\104\000\025\001\026\001\049\001\
\049\001\082\001\026\001\013\001\043\001\003\001\050\001\005\001\
\026\001\007\001\233\000\009\001\088\000\089\000\090\000\126\000\
\026\001\045\001\081\000\008\000\038\001\039\001\040\001\043\001\
\222\000\223\000\050\001\025\001\026\001\043\001\019\001\008\001\
\050\001\202\000\005\001\013\001\004\001\026\000\009\001\150\000\
\093\000\012\001\095\000\096\000\097\000\013\001\017\001\045\001\
\156\000\026\001\126\000\019\001\003\001\042\001\005\001\026\001\
\007\001\008\001\009\001\196\000\005\001\114\000\228\000\008\001\
\003\001\013\001\003\001\038\001\039\001\040\001\041\001\024\001\
\071\001\005\001\150\000\026\001\008\001\174\000\029\001\050\001\
\019\001\070\000\145\000\072\000\013\001\084\001\085\001\076\000\
\077\000\026\001\041\001\019\001\200\000\019\001\045\001\203\000\
\041\001\004\001\055\001\207\000\208\000\005\001\210\000\042\001\
\008\001\013\001\013\001\244\000\005\001\185\000\186\000\248\000\
\009\001\013\001\042\001\191\000\042\001\225\000\005\001\045\001\
\041\001\078\001\009\001\199\000\002\001\201\000\004\001\009\001\
\204\000\026\001\000\001\239\000\240\000\241\000\242\000\013\001\
\003\001\041\001\005\001\026\001\007\001\051\001\009\001\132\000\
\026\001\012\001\009\001\008\001\013\001\012\001\017\001\140\000\
\019\001\004\001\017\001\013\001\145\000\018\001\004\001\026\001\
\004\001\013\001\013\001\026\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\038\001\039\001\040\001\041\001\038\001\
\039\001\040\001\041\001\255\000\000\001\027\001\006\001\050\001\
\051\001\066\001\032\001\050\001\069\001\070\001\005\001\005\001\
\005\001\008\001\005\001\005\001\005\001\049\001\019\001\045\001\
\005\001\254\000\005\001\018\001\018\001\018\001\058\001\018\001\
\018\001\018\001\005\001\026\001\026\001\026\001\008\001\026\001\
\026\001\026\001\099\001\100\001\040\001\026\001\074\001\026\001\
\213\000\004\001\004\001\003\001\006\001\005\001\050\001\026\001\
\052\001\009\001\013\001\005\001\009\001\226\000\008\001\009\001\
\020\001\005\001\022\001\019\001\008\001\009\001\029\001\019\001\
\027\001\004\001\026\001\030\001\025\001\026\001\025\001\035\001\
\026\001\005\001\013\001\029\001\008\001\009\001\026\001\009\001\
\005\001\029\001\042\001\008\001\009\001\045\001\090\001\041\001\
\045\001\009\001\008\001\045\001\013\001\041\001\026\001\025\001\
\026\001\045\001\013\001\016\001\018\001\026\001\009\001\107\001\
\029\001\021\001\026\001\023\001\009\001\009\001\019\001\027\001\
\028\001\008\001\094\001\031\001\041\001\033\001\034\001\026\001\
\004\001\037\001\026\001\018\001\104\001\026\001\026\001\036\001\
\044\001\013\001\020\001\047\001\022\001\045\001\024\001\019\001\
\052\001\053\001\054\001\038\001\039\001\040\001\038\001\039\001\
\040\001\035\001\013\001\004\001\015\001\006\001\013\001\003\001\
\015\001\005\001\070\000\009\001\072\000\046\001\026\001\003\001\
\009\001\041\001\050\001\025\001\043\001\026\001\025\001\013\001\
\019\001\003\001\013\001\003\001\005\001\014\001\005\001\014\001\
\004\001\019\001\043\001\026\001\025\001\019\001\004\001\013\001\
\013\001\009\001\004\001\014\001\014\001\014\001\013\001\026\001\
\013\001\051\001\003\001\003\001\007\001\050\001\005\001\005\001\
\014\001\003\001\019\001\013\001\019\001\003\001\026\001\026\001\
\048\001\013\001\026\001\048\001\009\001\026\001\026\001\004\001\
\017\001\005\001\014\001\005\001\019\001\026\001\005\001\026\001\
\003\001\019\001\003\001\003\001\019\001\004\001\008\001\026\001\
\005\001\007\001\019\001\005\001\036\001\009\001\009\001\026\001\
\007\001\005\001\026\001\005\001\201\000\005\001\014\001\012\001\
\009\001\012\001\019\001\041\001\009\001\019\001\005\001\009\001\
\049\001\049\001\005\001\009\001\019\001\005\001\007\001\005\001\
\005\001\081\000\048\001\007\001\049\001\005\001\026\001\026\001\
\007\001\026\001\026\001\007\001\007\001\026\001\026\001\007\001\
\026\001\084\000\099\000\085\000\132\000\145\000\235\000\093\000\
\255\255\255\255\048\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\057\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\107\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\083\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  AMONG\000\
  WEAKSECRET\000\
  CANTEXT\000\
  FAIL\000\
  WHERE\000\
  OTHERWISE\000\
  DATA\000\
  PARAM\000\
  PRIVATE\000\
  "

let yynames_block = "\
  IDENT\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 114 "piparser.mly"
 ( (FunDecl(_3, _5, _1)) :: _7 )
# 586 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 116 "piparser.mly"
 ( (DataFunDecl(_2, _4)) :: _6 )
# 595 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 118 "piparser.mly"
 ( (Equation(_2, _4)) :: _6 )
# 604 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'reduc) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 120 "piparser.mly"
 ( (Reduc((_3,_5)::_7, _1)) :: _8 )
# 615 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reducmayfailseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 123 "piparser.mly"
 ( (ReducFail(_3,_1)) :: _5 )
# 624 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 126 "piparser.mly"
        ( (PredDecl(_2, _4, _5)) :: _7 )
# 634 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 128 "piparser.mly"
        ( (PredDecl(_2, _4, [])) :: _6 )
# 643 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 130 "piparser.mly"
 ( (PDef(_2,_4)) :: _6 )
# 652 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'gfactformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'optint) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'foptbindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 132 "piparser.mly"
        ( (NoUnif (_2,_3,_4)) :: _6 )
# 662 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 134 "piparser.mly"
        ( (Param(_2,S _4)) :: _6 )
# 671 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 136 "piparser.mly"
        ( (Param(_2,I _4)) :: _6 )
# 680 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'queryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 138 "piparser.mly"
        ( (Query(_2)) :: _4 )
# 688 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 140 "piparser.mly"
        ( (Noninterf(_2)) :: _4 )
# 696 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 142 "piparser.mly"
        ( (Weaksecret(_2)) :: _4 )
# 704 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'optphase) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'optbindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 144 "piparser.mly"
 ( (Not(((PGSimpleFact(("attacker",dummy_ext), [_2]),dummy_ext),_3),_4)) :: _6 )
# 714 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'event) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'optbindingseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 146 "piparser.mly"
 ( (Not(_2,_3)) :: _5 )
# 723 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 148 "piparser.mly"
        ( (Elimtrue (_2, [])) :: _4 )
# 731 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'varmayfail) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 150 "piparser.mly"
        ( (Elimtrue (_2, _4)) :: _8 )
# 740 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 152 "piparser.mly"
        ( (Free(_3,_1)) :: _5 )
# 749 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'clauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 154 "piparser.mly"
        ( (Clauses(_2)) :: _3 )
# 757 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "piparser.mly"
 ( [] )
# 763 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lib) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    Obj.repr(
# 160 "piparser.mly"
 ( _1, _3 )
# 771 "piparser.ml"
               : Piptree.decl list * Piptree.process))
; (fun __caml_parser_env ->
    Obj.repr(
# 164 "piparser.mly"
 ( true )
# 777 "piparser.ml"
               : 'privateopt))
; (fun __caml_parser_env ->
    Obj.repr(
# 166 "piparser.mly"
 ( false )
# 783 "piparser.ml"
               : 'privateopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'reduc) in
    Obj.repr(
# 172 "piparser.mly"
 ( (_1,_3) :: _5 )
# 792 "piparser.ml"
               : 'reduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 174 "piparser.mly"
 ( [(_1,_3)] )
# 800 "piparser.ml"
               : 'reduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'varmayfail) in
    Obj.repr(
# 178 "piparser.mly"
        ( _1::_3 )
# 808 "piparser.ml"
               : 'varmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 180 "piparser.mly"
        ( [_1] )
# 815 "piparser.ml"
               : 'varmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'varmayfail) in
    Obj.repr(
# 184 "piparser.mly"
        ( (_1,_3,_5) )
# 824 "piparser.ml"
               : 'reducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 186 "piparser.mly"
        ( (_1,_3,[]) )
# 832 "piparser.ml"
               : 'reducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reducmayfail) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'reducmayfailseq) in
    Obj.repr(
# 190 "piparser.mly"
 ( _1::_3 )
# 840 "piparser.ml"
               : 'reducmayfailseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reducmayfail) in
    Obj.repr(
# 192 "piparser.mly"
 ( [_1] )
# 847 "piparser.ml"
               : 'reducmayfailseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "piparser.mly"
 ( PFail, parse_extent () )
# 853 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 202 "piparser.mly"
 ( PFunApp (_1, _3), parse_extent() )
# 861 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 204 "piparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice specident", parse_extent()), [_3; _5]), parse_extent() )
# 870 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 207 "piparser.mly"
 ( PIdent (_1), parse_extent() )
# 877 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 209 "piparser.mly"
 ( PTuple (_2), parse_extent() )
# 884 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 213 "piparser.mly"
 ( _1 :: _3 )
# 892 "piparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 215 "piparser.mly"
 ( [_1] )
# 899 "piparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 219 "piparser.mly"
        ( _1 )
# 906 "piparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "piparser.mly"
        ( [] )
# 912 "piparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 225 "piparser.mly"
    ( _1 :: _3 )
# 920 "piparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 227 "piparser.mly"
    ( [_1] )
# 927 "piparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 231 "piparser.mly"
    ( (_1, Some _4) )
# 935 "piparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 233 "piparser.mly"
    ( (_1, None) )
# 942 "piparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 237 "piparser.mly"
    ( _1 :: _3 )
# 950 "piparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 239 "piparser.mly"
    ( [_1] )
# 957 "piparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 245 "piparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 965 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 247 "piparser.mly"
 ( PGIdent (_1), parse_extent() )
# 972 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 249 "piparser.mly"
 ( PGTuple (_2), parse_extent() )
# 979 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 251 "piparser.mly"
        ( PGName (_1, _3), parse_extent() )
# 987 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 255 "piparser.mly"
 ( _1 :: _3 )
# 995 "piparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 257 "piparser.mly"
 ( [_1] )
# 1002 "piparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 261 "piparser.mly"
        ( _1 )
# 1009 "piparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 263 "piparser.mly"
        ( [] )
# 1015 "piparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 268 "piparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1024 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 270 "piparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1032 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 272 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1041 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 274 "piparser.mly"
        ( [(_1, _3)] )
# 1049 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 278 "piparser.mly"
        ( _1 )
# 1056 "piparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 280 "piparser.mly"
        ( [] )
# 1062 "piparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nebindingseq) in
    Obj.repr(
# 284 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1071 "piparser.ml"
               : 'nebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 286 "piparser.mly"
        ( [(_1, _3)] )
# 1079 "piparser.ml"
               : 'nebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nebindingseq) in
    Obj.repr(
# 290 "piparser.mly"
        ( _2 )
# 1086 "piparser.ml"
               : 'optbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "piparser.mly"
        ( [] )
# 1092 "piparser.ml"
               : 'optbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gtermseq) in
    Obj.repr(
# 296 "piparser.mly"
 ( PGSimpleFact(_1,_3), parse_extent() )
# 1100 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 298 "piparser.mly"
        ( PGNeq(_1,_3), parse_extent() )
# 1108 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 300 "piparser.mly"
        ( PGEqual(_1, _3), parse_extent() )
# 1116 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gfact) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optphase) in
    Obj.repr(
# 304 "piparser.mly"
    ( (_1,_2) )
# 1124 "piparser.ml"
               : 'event))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'query) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'queryseq) in
    Obj.repr(
# 308 "piparser.mly"
    ( _1 :: _3 )
# 1132 "piparser.ml"
               : 'queryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'query) in
    Obj.repr(
# 310 "piparser.mly"
    ( [_1] )
# 1139 "piparser.ml"
               : 'queryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'event) in
    Obj.repr(
# 314 "piparser.mly"
    ( PRealQuery(PBefore(_1, PFalse)) )
# 1146 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'realquery) in
    Obj.repr(
# 316 "piparser.mly"
    ( PRealQuery(_1) )
# 1153 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 318 "piparser.mly"
    ( PPutBegin(_2, _4) )
# 1161 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 320 "piparser.mly"
    ( PBinding(_2,_4) )
# 1169 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'event) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 325 "piparser.mly"
    ( PBefore(_1, _3) )
# 1177 "piparser.ml"
               : 'realquery))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'hyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 329 "piparser.mly"
    ( POr(_1, _3) )
# 1185 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'hyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 331 "piparser.mly"
    ( PAnd(_1, _3) )
# 1193 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'hyp) in
    Obj.repr(
# 333 "piparser.mly"
    ( _2 )
# 1200 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'event) in
    Obj.repr(
# 335 "piparser.mly"
    ( PQEvent(_1) )
# 1207 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'realquery) in
    Obj.repr(
# 337 "piparser.mly"
    ( PNestedQuery(_2) )
# 1214 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 343 "piparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 1222 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 345 "piparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 1229 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 347 "piparser.mly"
 ( PFGTuple (_2), parse_extent() )
# 1236 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 349 "piparser.mly"
        ( PFGName (_1, _3), parse_extent() )
# 1244 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 351 "piparser.mly"
        ( PFGAny (_2), parse_extent() )
# 1251 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 355 "piparser.mly"
 ( _1 :: _3 )
# 1259 "piparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 357 "piparser.mly"
 ( [_1] )
# 1266 "piparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 361 "piparser.mly"
        ( _1 )
# 1273 "piparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 363 "piparser.mly"
        ( [] )
# 1279 "piparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 368 "piparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1288 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 370 "piparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1296 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 372 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1305 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 374 "piparser.mly"
        ( [(_1, _3)] )
# 1313 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 378 "piparser.mly"
        ( _1 )
# 1320 "piparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 380 "piparser.mly"
        ( [] )
# 1326 "piparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnebindingseq) in
    Obj.repr(
# 384 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1335 "piparser.ml"
               : 'fnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 386 "piparser.mly"
        ( [(_1, _3)] )
# 1343 "piparser.ml"
               : 'fnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fnebindingseq) in
    Obj.repr(
# 390 "piparser.mly"
        ( _2 )
# 1350 "piparser.ml"
               : 'foptbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 392 "piparser.mly"
        ( [] )
# 1356 "piparser.ml"
               : 'foptbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'optphase) in
    Obj.repr(
# 396 "piparser.mly"
    ( (_1,_3,_4) )
# 1365 "piparser.ml"
               : 'gfactformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 402 "piparser.mly"
    ( _2 )
# 1372 "piparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 404 "piparser.mly"
    ( -1 )
# 1378 "piparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 410 "piparser.mly"
    ( _2 )
# 1385 "piparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 412 "piparser.mly"
    ( -1 )
# 1391 "piparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'termseq) in
    Obj.repr(
# 418 "piparser.mly"
 ( PSimpleFact(_1,_3), parse_extent() )
# 1399 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 420 "piparser.mly"
        ( PSNeq(_1,_3), parse_extent() )
# 1407 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 422 "piparser.mly"
        ( PSEqual(_1, _3), parse_extent() )
# 1415 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factand) in
    Obj.repr(
# 426 "piparser.mly"
 ( _1 :: _3 )
# 1423 "piparser.ml"
               : 'factand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 428 "piparser.mly"
 ( [_1] )
# 1430 "piparser.ml"
               : 'factand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 432 "piparser.mly"
        ( PClause(_1,_3) )
# 1438 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 434 "piparser.mly"
        ( PClause([],_1) )
# 1445 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 436 "piparser.mly"
        ( PEquiv(_1,_3,true) )
# 1453 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 438 "piparser.mly"
        ( PEquiv(_1,_3,false) )
# 1461 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'clause) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'varmayfail) in
    Obj.repr(
# 442 "piparser.mly"
        ( (_1,_3) )
# 1469 "piparser.ml"
               : 'clausemayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'clause) in
    Obj.repr(
# 444 "piparser.mly"
        ( (_1,[]) )
# 1476 "piparser.ml"
               : 'clausemayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'clausemayfail) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'clauses) in
    Obj.repr(
# 448 "piparser.mly"
 ( _1 :: _3 )
# 1484 "piparser.ml"
               : 'clauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'clausemayfail) in
    Obj.repr(
# 450 "piparser.mly"
 ( [_1] )
# 1491 "piparser.ml"
               : 'clauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    Obj.repr(
# 456 "piparser.mly"
 ( _2 )
# 1498 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 458 "piparser.mly"
 ( PLetDef _1 )
# 1505 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 460 "piparser.mly"
 ( PRepl _2 )
# 1512 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 462 "piparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 1521 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 466 "piparser.mly"
 ( PRestr(_2, _3) )
# 1529 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 468 "piparser.mly"
 ( PTest(_2,_4,_6) )
# 1538 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 470 "piparser.mly"
 ( PTest(_2,_4,PNil) )
# 1546 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 472 "piparser.mly"
 ( PInput(_3,_5,_7) )
# 1555 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 474 "piparser.mly"
 ( POutput(_3,_5,_7) )
# 1564 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 476 "piparser.mly"
 ( PLet(_2,_4,_6,PNil) )
# 1573 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 478 "piparser.mly"
 ( PLet(_2,_4,_6,_8) )
# 1583 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 480 "piparser.mly"
        ( PLetFilter(_2,_4,_6,PNil) )
# 1592 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'fact) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 482 "piparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_8) )
# 1604 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 486 "piparser.mly"
 ( PPar(_1,_3) )
# 1612 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'termseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 488 "piparser.mly"
        ( PEvent(_2, _4, _6) )
# 1621 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 490 "piparser.mly"
        ( PPhase(_2, _3) )
# 1629 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 494 "piparser.mly"
        ( _2 )
# 1636 "piparser.ml"
               : 'optprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 496 "piparser.mly"
        ( PNil )
# 1642 "piparser.ml"
               : 'optprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 500 "piparser.mly"
    ( PPatVar(_1) )
# 1649 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'patternseq) in
    Obj.repr(
# 502 "piparser.mly"
    ( PPatTuple(_2) )
# 1656 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'patternseq) in
    Obj.repr(
# 504 "piparser.mly"
    ( PPatFunApp(_1,_3) )
# 1664 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 506 "piparser.mly"
    ( PPatEqual(_2) )
# 1671 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patternseq) in
    Obj.repr(
# 510 "piparser.mly"
    ( _1 :: _3 )
# 1679 "piparser.ml"
               : 'patternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 512 "piparser.mly"
    ( [_1] )
# 1686 "piparser.ml"
               : 'patternseq))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Piptree.decl list * Piptree.process)
