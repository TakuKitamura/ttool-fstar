type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Pitptree.ident)
  | STRING of (Pitptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | AMONG
  | WEAKSECRET
  | PARAM
  | ORTEXT
  | FAIL
  | TYPE
  | SET
  | FORALL
  | CONST
  | INJEVENT
  | OR
  | CHANNEL
  | LETFUN
  | DEFINE
  | EXPAND
  | YIELD
  | LEQ
  | PROBA
  | LBRACE
  | RBRACE
  | PROOF
  | EQUIVALENCE
  | OTHERWISE
  | TABLE
  | INSERT
  | GET

open Parsing;;
let _ = parse_error;;
# 2 "pitparser.mly"
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet and Vincent Cheval                        *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2014                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "pitparser.mly"

open Parsing_helper
open Ptree
open Pitptree
exception Syntax

# 114 "pitparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  272 (* REPL *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* EQUAL *);
  277 (* FUN *);
  278 (* EQUATION *);
  279 (* REDUCTION *);
  280 (* PREDICATE *);
  281 (* PROCESS *);
  282 (* SLASH *);
  283 (* DOT *);
    0 (* EOF *);
  284 (* LET *);
  285 (* QUERY *);
  286 (* BEFORE *);
  287 (* PUTBEGIN *);
  288 (* NONINTERF *);
  289 (* EVENT *);
  290 (* NOT *);
  291 (* ELIMTRUE *);
  292 (* FREE *);
  293 (* SUCHTHAT *);
  294 (* CLAUSES *);
  295 (* RED *);
  296 (* EQUIV *);
  297 (* EQUIVEQ *);
  298 (* WEDGE *);
  299 (* DIFF *);
  300 (* COLON *);
  301 (* NOUNIF *);
  302 (* PHASE *);
  303 (* AMONG *);
  304 (* WEAKSECRET *);
  305 (* PARAM *);
  306 (* ORTEXT *);
  307 (* FAIL *);
  308 (* TYPE *);
  309 (* SET *);
  310 (* FORALL *);
  311 (* CONST *);
  312 (* INJEVENT *);
  313 (* OR *);
  314 (* CHANNEL *);
  315 (* LETFUN *);
  316 (* DEFINE *);
  317 (* EXPAND *);
  318 (* YIELD *);
  319 (* LEQ *);
  320 (* PROBA *);
  321 (* LBRACE *);
  322 (* RBRACE *);
  323 (* PROOF *);
  324 (* EQUIVALENCE *);
  325 (* OTHERWISE *);
  326 (* TABLE *);
  327 (* INSERT *);
  328 (* GET *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* STRING *);
  271 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\001\000\001\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\023\000\
\023\000\019\000\019\000\003\000\003\000\008\000\008\000\014\000\
\014\000\012\000\012\000\009\000\009\000\005\000\005\000\004\000\
\004\000\024\000\024\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\026\000\026\000\025\000\
\025\000\027\000\027\000\017\000\017\000\016\000\016\000\028\000\
\028\000\028\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\031\000\031\000\029\000\029\000\
\032\000\032\000\032\000\032\000\030\000\030\000\015\000\015\000\
\015\000\015\000\035\000\035\000\036\000\036\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\038\000\038\000\
\034\000\034\000\039\000\039\000\039\000\039\000\037\000\037\000\
\040\000\040\000\020\000\020\000\041\000\041\000\042\000\042\000\
\006\000\006\000\007\000\007\000\043\000\043\000\043\000\043\000\
\021\000\021\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\045\000\045\000\049\000\049\000\046\000\046\000\047\000\047\000\
\047\000\047\000\047\000\050\000\050\000\048\000\048\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\051\000\
\051\000\044\000\044\000\000\000\000\000"

let yylen = "\002\000\
\005\000\010\000\012\000\005\000\007\000\007\000\004\000\007\000\
\008\000\005\000\007\000\006\000\009\000\006\000\009\000\006\000\
\006\000\006\000\004\000\006\000\004\000\006\000\004\000\004\000\
\006\000\004\000\005\000\004\000\005\000\006\000\004\000\004\000\
\007\000\003\000\009\000\007\000\000\000\004\000\005\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\001\000\003\000\003\000\000\000\003\000\001\000\005\000\
\003\000\001\000\000\000\003\000\000\000\001\000\001\000\001\000\
\000\000\003\000\001\000\001\000\004\000\006\000\001\000\003\000\
\003\000\004\000\003\000\003\000\003\000\003\000\001\000\001\000\
\000\000\005\000\001\000\003\000\001\000\003\000\001\000\001\000\
\004\000\004\000\004\000\001\000\006\000\006\000\003\000\003\000\
\004\000\003\000\003\000\006\000\004\000\004\000\004\000\003\000\
\003\000\005\000\002\000\006\000\003\000\001\000\001\000\000\000\
\006\000\004\000\005\000\003\000\001\000\000\000\006\000\006\000\
\002\000\006\000\002\000\000\000\002\000\000\000\004\000\006\000\
\001\000\003\000\005\000\002\000\002\000\006\000\003\000\001\000\
\001\000\000\000\006\000\004\000\005\000\003\000\001\000\000\000\
\003\000\005\000\003\000\001\000\003\000\000\000\006\000\005\000\
\005\000\004\000\006\000\004\000\003\000\001\000\003\000\003\000\
\004\000\003\000\003\000\001\000\004\000\002\000\005\000\001\000\
\001\000\005\000\005\000\007\000\007\000\004\000\007\000\004\000\
\007\000\006\000\007\000\009\000\003\000\006\000\003\000\003\000\
\002\000\000\000\002\000\000\000\002\000\000\000\001\000\003\000\
\003\000\004\000\002\000\003\000\001\000\001\000\000\000\004\000\
\006\000\001\000\003\000\003\000\004\000\003\000\003\000\006\000\
\004\000\006\000\006\000\008\000\006\000\008\000\003\000\003\000\
\001\000\001\000\000\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\220\000\000\000\221\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\111\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\080\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\000\000\000\000\000\000\000\000\121\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\047\000\040\000\
\041\000\042\000\046\000\044\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\168\000\000\000\
\000\000\000\000\000\000\000\000\169\000\000\000\000\000\000\000\
\000\000\062\000\063\000\000\000\000\000\064\000\060\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\000\
\000\000\000\000\105\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\096\000\000\000\086\000\000\000\000\000\000\000\
\023\000\084\000\000\000\007\000\000\000\026\000\000\000\000\000\
\077\000\000\000\000\000\000\000\000\000\031\000\000\000\073\000\
\000\000\000\000\147\000\054\000\000\000\149\000\000\000\000\000\
\000\000\000\000\162\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\137\000\125\000\000\000\000\000\000\000\
\000\000\019\000\024\000\000\000\000\000\000\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\166\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
\052\000\004\000\000\000\000\000\010\000\000\000\000\000\000\000\
\109\000\000\000\000\000\000\000\117\000\000\000\000\000\000\000\
\089\000\090\000\101\000\097\000\102\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\069\000\000\000\074\000\
\000\000\000\000\000\000\000\000\000\000\161\000\000\000\133\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\218\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\051\000\000\000\163\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\198\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\183\000\184\000\000\000\
\000\000\000\000\039\000\000\000\066\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\106\000\000\000\056\000\
\000\000\000\000\020\000\082\000\022\000\000\000\025\000\000\000\
\146\000\030\000\000\000\000\000\130\000\000\000\000\000\000\000\
\135\000\000\000\000\000\000\000\000\000\018\000\016\000\017\000\
\000\000\000\000\000\000\000\000\215\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\204\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\165\000\000\000\
\000\000\000\000\000\000\193\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\155\000\000\000\
\000\000\100\000\000\000\000\000\093\000\000\000\094\000\008\000\
\070\000\033\000\000\000\000\000\000\000\000\000\143\000\127\000\
\000\000\123\000\120\000\119\000\122\000\005\000\000\000\000\000\
\216\000\000\000\200\000\000\000\000\000\000\000\205\000\000\000\
\036\000\011\000\170\000\000\000\000\000\167\000\000\000\171\000\
\192\000\196\000\194\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\182\000\
\178\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\115\000\000\000\128\000\000\000\000\000\134\000\015\000\201\000\
\000\000\000\000\000\000\000\000\035\000\173\000\172\000\177\000\
\175\000\000\000\000\000\179\000\000\000\000\000\002\000\113\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\
\000\000\000\000\000\000\180\000\003\000\000\000\139\000\000\000\
\153\000\000\000\000\000\000\000\000\000\151\000"

let yydgoto = "\003\000\
\029\000\030\000\098\000\204\000\205\000\069\002\035\000\069\000\
\036\000\136\000\200\000\214\000\129\001\215\000\077\000\050\000\
\055\000\106\000\182\000\066\000\071\000\183\000\184\000\206\000\
\137\000\138\000\056\000\052\000\107\000\084\001\108\000\085\001\
\018\001\019\001\203\001\158\000\006\002\020\001\007\002\067\000\
\072\000\113\002\155\000\130\001\166\001\032\002\156\001\157\001\
\068\002\158\001\131\001"

let yysindex = "\067\002\
\044\005\044\005\000\000\021\255\049\255\049\255\132\255\205\255\
\172\255\212\255\077\000\082\000\165\000\083\000\220\255\022\255\
\110\000\083\000\119\000\133\000\083\000\083\000\140\000\174\000\
\187\000\200\000\196\255\208\000\000\000\012\255\000\000\221\000\
\226\000\082\001\021\000\082\001\049\000\207\255\237\000\106\004\
\235\000\025\255\240\000\164\255\009\001\017\001\048\001\051\001\
\022\000\032\001\147\255\054\001\217\000\066\001\053\001\086\001\
\210\255\084\001\064\005\092\001\082\001\032\255\098\001\000\000\
\005\004\095\001\108\001\121\001\081\001\114\001\044\005\082\001\
\120\255\115\001\127\001\123\001\107\001\109\001\021\000\021\000\
\119\001\096\001\124\001\036\000\138\001\142\001\129\001\232\000\
\168\001\167\004\167\004\009\255\131\001\167\001\175\001\034\002\
\083\000\153\001\075\002\009\255\155\001\226\000\167\004\106\004\
\180\001\043\255\208\001\000\000\205\001\106\004\009\255\196\001\
\176\001\179\001\106\004\106\004\106\004\106\004\104\003\044\005\
\106\004\106\004\106\004\106\004\106\004\104\003\215\001\211\001\
\044\005\211\001\009\255\044\005\106\004\044\005\082\001\045\255\
\220\001\000\000\082\001\009\255\082\001\082\001\044\005\082\001\
\082\001\082\001\082\001\114\001\083\000\009\255\183\001\217\001\
\000\000\135\002\135\255\204\001\216\001\000\000\210\001\204\001\
\028\255\044\005\044\005\209\001\212\001\063\001\009\255\044\005\
\226\000\188\003\009\255\009\255\044\005\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\184\001\232\000\242\001\
\009\255\167\004\239\001\251\001\252\001\255\001\000\000\181\004\
\188\003\161\000\247\001\246\001\000\000\249\001\254\001\005\000\
\140\004\000\000\000\000\003\002\006\002\000\000\000\000\082\001\
\005\002\044\005\082\001\010\002\044\005\011\002\000\000\202\255\
\229\255\106\004\000\000\210\000\012\002\015\002\106\004\083\000\
\083\000\014\002\166\255\018\002\199\000\243\001\000\000\237\001\
\133\003\027\000\000\000\133\003\000\000\082\001\240\001\001\002\
\000\000\000\000\037\002\000\000\089\005\000\000\150\255\082\001\
\000\000\042\002\013\002\179\255\008\002\000\000\097\000\000\000\
\188\004\081\004\000\000\000\000\021\000\000\000\082\001\082\001\
\082\001\220\255\000\000\050\002\035\002\204\001\065\002\076\002\
\066\002\080\002\081\002\000\000\000\000\204\001\083\002\038\255\
\063\002\000\000\000\000\044\005\044\005\069\002\087\002\021\000\
\000\000\098\002\086\002\188\003\095\002\111\002\188\003\161\000\
\115\002\085\004\118\002\119\002\000\000\044\005\000\000\232\000\
\123\002\015\001\102\002\188\003\188\003\188\003\016\255\000\000\
\031\000\172\000\095\255\188\003\113\002\100\002\095\000\143\002\
\153\002\154\002\167\004\000\000\014\000\116\002\009\255\066\000\
\000\000\000\000\151\255\021\000\000\000\141\002\044\005\106\004\
\000\000\144\002\155\002\166\002\000\000\134\002\226\000\064\003\
\000\000\000\000\000\000\000\000\000\000\145\002\044\005\182\002\
\044\005\163\002\044\005\082\001\000\000\000\000\149\002\000\000\
\044\005\168\002\188\004\188\004\188\004\000\000\204\001\000\000\
\191\002\197\002\204\001\201\002\204\001\177\002\213\002\177\002\
\044\005\000\000\000\000\044\005\044\005\200\002\218\002\188\003\
\001\000\238\002\000\000\205\002\188\003\194\000\214\002\230\002\
\188\003\188\003\044\005\188\003\188\003\188\003\188\002\227\002\
\000\000\000\000\228\002\000\000\009\255\025\000\094\000\253\002\
\247\002\167\004\157\255\007\003\006\003\000\000\172\000\009\255\
\092\000\188\003\188\003\188\003\167\004\000\000\000\000\188\003\
\172\000\005\003\000\000\009\255\000\000\044\005\049\255\243\002\
\167\004\000\000\042\001\106\004\251\002\000\000\001\003\000\000\
\106\004\009\003\000\000\000\000\000\000\044\005\000\000\031\001\
\000\000\000\000\044\005\018\003\000\000\027\001\017\003\204\001\
\000\000\013\003\015\003\028\255\015\003\000\000\000\000\000\000\
\044\005\188\003\105\000\188\003\000\000\009\255\034\003\188\003\
\188\003\188\003\018\000\003\003\000\000\121\000\000\000\216\004\
\044\005\044\005\044\005\143\002\188\003\172\000\000\000\167\004\
\160\000\009\255\172\000\000\000\042\003\015\002\032\002\151\002\
\047\003\005\003\048\003\050\003\068\255\000\000\000\000\044\005\
\246\255\000\000\052\255\106\004\000\000\147\255\000\000\000\000\
\000\000\000\000\204\001\036\003\044\003\055\003\000\000\000\000\
\059\003\000\000\000\000\000\000\000\000\000\000\147\004\188\003\
\000\000\066\003\000\000\031\003\116\003\184\003\000\000\011\003\
\000\000\000\000\000\000\086\000\073\003\000\000\167\004\000\000\
\000\000\000\000\000\000\167\004\167\004\143\002\143\002\146\255\
\220\255\052\003\000\000\044\005\210\000\161\001\075\003\204\001\
\065\003\000\000\204\001\044\005\080\001\188\003\188\003\188\003\
\188\003\044\005\143\002\143\002\005\003\160\000\160\000\000\000\
\000\000\167\004\188\003\072\003\021\000\082\001\044\005\000\000\
\000\000\210\000\000\000\094\003\204\001\000\000\000\000\000\000\
\216\004\216\004\145\003\216\003\000\000\000\000\000\000\000\000\
\000\000\005\003\191\003\000\000\082\003\007\005\000\000\000\000\
\027\001\101\003\188\003\188\003\072\003\044\005\082\001\000\000\
\027\001\216\004\216\004\000\000\000\000\170\255\000\000\220\255\
\000\000\082\001\018\005\082\001\170\255\000\000"

let yyrindex = "\000\000\
\033\255\111\004\000\000\000\000\137\001\137\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\089\003\000\000\089\003\000\000\000\000\114\003\
\000\000\159\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\255\255\093\003\044\255\000\000\000\000\095\003\
\000\000\000\000\000\000\000\000\118\003\183\004\000\000\000\000\
\000\000\000\000\117\003\211\000\000\000\000\000\011\000\000\000\
\100\003\000\000\000\000\000\000\000\000\000\000\089\003\089\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\124\003\000\000\000\000\142\002\000\000\
\000\000\000\000\000\000\124\003\000\000\125\003\000\000\000\000\
\145\255\128\003\000\000\000\000\000\003\114\003\000\000\000\000\
\000\000\000\000\114\003\000\000\114\003\000\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\000\000\124\003\011\000\000\000\011\000\000\000\129\003\
\000\000\000\000\118\003\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\000\000\136\003\000\000\000\000\000\000\136\003\
\000\000\011\000\011\000\000\000\000\000\000\000\000\000\011\000\
\125\003\000\000\124\003\124\003\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\255\076\003\
\124\003\000\000\000\000\000\000\000\000\178\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\139\003\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\142\003\000\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\004\
\131\005\048\255\000\000\115\005\000\000\000\000\044\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\215\004\000\000\241\004\000\000\
\115\000\000\000\000\000\000\000\089\003\000\000\000\000\000\000\
\000\000\009\002\000\000\000\000\000\000\136\003\000\000\140\001\
\000\000\150\003\000\000\000\000\000\000\000\000\000\000\100\003\
\000\000\000\000\000\000\011\000\011\000\000\000\000\000\089\003\
\000\000\000\000\000\000\208\001\000\000\255\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\208\001\178\000\000\000\
\000\000\156\003\146\003\000\000\000\000\000\000\053\003\021\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\228\255\
\000\000\000\000\062\255\089\003\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\005\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\005\011\000\000\000\
\011\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\
\011\000\000\000\023\000\071\000\117\000\000\000\000\000\000\000\
\000\000\219\002\136\003\000\000\000\000\070\001\000\000\070\001\
\011\000\000\000\000\000\011\000\011\000\000\000\000\000\000\000\
\162\003\000\000\000\000\000\000\208\001\000\000\000\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\170\000\164\003\000\000\000\000\156\003\000\000\
\204\000\000\000\000\000\208\001\000\000\000\000\000\000\208\001\
\156\003\085\003\000\000\000\000\000\000\011\000\137\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\000\000\011\000\000\000\000\000\163\003\000\000\000\000\
\000\000\000\000\100\003\000\000\100\003\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\102\001\000\000\150\001\000\000\182\001\
\119\003\011\000\011\000\021\003\000\000\000\000\000\000\000\000\
\087\004\000\000\000\000\000\000\000\000\086\255\020\001\135\003\
\000\000\167\003\000\000\000\000\089\003\000\000\000\000\011\000\
\000\000\000\000\186\003\000\000\000\000\132\005\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\126\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\003\021\003\204\003\
\009\002\000\000\000\000\011\000\000\000\192\003\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\011\000\021\003\021\003\252\003\087\004\087\004\000\000\
\000\000\000\000\000\000\023\004\089\003\000\000\011\000\000\000\
\000\000\000\000\000\000\203\003\000\000\000\000\000\000\000\000\
\230\001\022\002\202\002\229\002\000\000\000\000\000\000\000\000\
\000\000\060\004\204\003\000\000\000\000\000\000\000\000\000\000\
\000\000\211\003\000\000\000\000\023\004\011\000\000\000\000\000\
\000\000\054\002\094\002\000\000\000\000\124\255\000\000\009\002\
\000\000\000\000\000\000\000\000\206\255\000\000"

let yygindex = "\000\000\
\000\000\006\000\221\255\168\255\155\255\000\000\016\003\010\000\
\219\004\243\255\191\255\056\004\103\255\253\255\098\255\098\000\
\172\001\248\255\180\003\201\255\220\003\000\000\057\004\171\003\
\104\004\179\000\000\000\000\000\206\001\000\000\026\004\236\253\
\030\255\123\255\126\003\132\000\000\000\130\003\221\253\000\000\
\234\253\128\002\000\000\235\254\208\254\194\254\080\255\039\000\
\158\002\019\003\039\003"

let yytablesize = 1695
let yytable = "\065\000\
\051\000\101\000\025\001\059\000\068\001\049\000\054\000\031\000\
\058\000\222\000\037\000\212\000\076\000\171\001\152\000\167\001\
\042\001\062\001\070\002\054\001\096\000\202\000\099\000\048\000\
\073\002\201\000\023\001\079\000\110\000\094\000\082\000\083\000\
\152\001\032\000\073\000\139\000\090\000\216\000\251\000\057\001\
\024\001\156\000\243\000\164\000\165\000\218\000\083\000\248\000\
\005\001\074\000\099\000\119\001\099\000\096\002\099\000\074\000\
\099\000\037\000\154\000\099\000\045\002\104\002\121\000\157\000\
\142\000\032\001\203\000\156\000\111\000\111\002\083\000\121\000\
\122\000\097\000\099\000\140\000\153\000\099\000\153\001\091\000\
\048\000\122\000\043\001\044\001\123\000\124\000\144\000\145\000\
\156\000\114\002\041\002\075\000\003\001\123\000\124\000\217\000\
\049\001\075\000\159\001\125\000\037\000\146\000\033\000\072\000\
\099\000\192\000\209\000\227\000\125\000\229\000\051\000\215\001\
\232\000\233\000\234\000\235\000\236\000\051\000\072\000\136\001\
\050\001\247\000\057\000\156\000\245\000\231\000\056\001\252\000\
\253\000\154\000\255\000\000\001\001\001\002\001\241\000\069\001\
\113\001\244\000\160\001\246\000\196\001\134\001\241\001\010\001\
\037\000\157\000\243\001\092\000\254\000\092\000\154\000\092\000\
\100\001\092\000\150\001\151\001\092\000\066\002\004\001\175\001\
\159\001\011\001\161\001\111\000\092\000\072\000\121\000\026\001\
\027\001\142\000\092\001\092\000\039\000\033\001\092\000\040\000\
\122\000\164\000\045\001\027\002\072\000\041\000\067\002\104\001\
\042\000\121\000\092\000\092\000\123\000\124\000\061\001\144\000\
\145\000\145\000\072\001\122\000\113\000\075\001\142\000\043\000\
\234\001\092\000\044\000\125\000\045\000\046\000\146\000\123\000\
\124\000\067\001\102\000\152\000\145\000\131\000\088\001\074\001\
\230\000\038\000\077\001\114\000\144\000\145\000\125\000\237\000\
\053\000\106\001\103\000\047\000\079\001\009\002\211\001\080\001\
\152\000\089\001\090\001\146\000\132\000\199\001\112\002\219\001\
\220\001\048\000\222\001\223\001\224\001\064\002\065\002\072\000\
\121\000\107\001\108\001\109\001\126\001\067\001\202\000\088\002\
\089\002\170\001\122\000\212\001\088\000\092\002\072\000\088\000\
\239\001\240\001\086\002\087\002\067\001\072\000\123\000\124\000\
\044\002\070\000\145\000\176\000\138\001\067\001\023\002\158\000\
\145\000\088\000\097\000\229\001\072\000\125\000\119\000\157\000\
\047\002\122\001\123\001\037\000\135\001\138\001\108\002\169\000\
\176\001\158\000\140\001\141\001\138\001\012\002\121\000\228\001\
\154\001\157\000\138\001\145\001\100\000\029\002\097\000\170\000\
\015\002\142\001\238\001\140\001\141\001\057\000\020\002\021\002\
\022\002\057\000\140\001\141\001\123\000\124\000\245\001\179\001\
\140\001\141\001\142\001\028\002\037\000\076\002\037\000\159\000\
\078\002\142\001\039\000\184\001\178\001\040\000\192\001\142\001\
\233\001\057\000\059\002\041\000\174\001\057\000\042\000\068\000\
\230\001\159\000\164\001\242\001\187\001\203\000\189\001\165\001\
\191\001\138\001\098\002\016\002\145\000\043\000\194\001\249\001\
\018\002\138\001\045\000\046\000\142\000\075\000\053\002\075\000\
\075\000\075\000\078\000\075\000\138\001\160\000\206\001\140\001\
\141\001\207\001\208\001\080\000\033\002\140\001\141\001\140\001\
\141\001\047\000\144\000\145\000\138\001\075\000\142\001\160\000\
\221\001\081\000\140\001\141\001\142\001\207\000\142\001\048\000\
\084\000\075\000\075\000\075\000\081\002\082\002\083\002\084\002\
\096\001\142\001\140\001\141\001\058\001\060\000\030\002\067\001\
\061\000\091\002\101\001\251\001\191\000\059\001\191\000\058\001\
\254\001\062\000\031\002\246\001\060\001\206\000\164\000\075\000\
\155\001\164\000\085\000\164\000\164\000\164\000\164\000\060\001\
\164\000\164\000\164\000\000\002\164\000\237\001\063\000\086\000\
\002\002\106\002\107\002\094\001\164\000\164\000\195\000\244\001\
\195\000\042\002\164\000\216\001\087\000\138\001\014\002\064\000\
\055\000\055\000\121\000\055\000\089\000\061\002\082\001\164\000\
\092\000\083\001\062\002\063\002\122\000\208\000\024\002\025\002\
\026\002\174\000\175\000\140\001\141\001\055\000\093\000\164\000\
\123\000\124\000\104\000\046\002\176\000\177\000\178\000\109\000\
\164\000\164\000\142\001\179\000\112\000\043\002\055\000\125\000\
\090\002\202\000\180\000\202\000\111\000\202\000\202\000\127\000\
\202\000\202\000\202\000\202\000\115\000\202\000\202\000\202\000\
\202\000\202\000\202\000\148\001\116\000\210\000\067\001\176\000\
\176\000\202\000\202\000\176\000\181\000\176\000\176\000\202\000\
\176\000\093\002\176\000\176\000\176\000\001\002\176\000\004\002\
\202\000\202\000\005\002\240\000\202\000\242\000\176\000\176\000\
\250\001\072\002\142\000\117\000\176\000\214\000\118\000\202\000\
\094\002\079\002\120\000\221\000\202\000\121\000\126\000\085\002\
\226\000\176\000\228\000\001\000\002\000\202\000\202\000\122\000\
\144\000\145\000\128\000\030\001\095\002\031\001\011\002\129\000\
\013\002\176\000\060\000\123\000\124\000\061\000\080\002\146\000\
\130\000\110\002\176\000\176\000\133\000\212\000\095\000\124\000\
\124\000\135\000\125\000\138\001\115\002\141\000\117\002\147\000\
\203\000\203\000\203\000\109\002\203\000\203\000\148\000\203\000\
\203\000\203\000\203\000\063\000\203\000\203\000\203\000\203\000\
\203\000\140\001\141\001\149\000\150\000\209\000\151\000\159\000\
\203\000\203\000\160\000\161\000\064\000\162\000\203\000\163\000\
\142\001\061\000\166\000\167\000\061\000\171\000\129\000\203\000\
\129\000\172\000\129\000\203\000\129\000\061\000\168\000\129\000\
\207\000\207\000\207\000\173\000\207\000\207\000\203\000\207\000\
\207\000\207\000\207\000\203\000\207\000\207\000\207\000\207\000\
\207\000\074\002\061\000\185\000\203\000\203\000\111\000\207\000\
\207\000\207\000\139\000\210\000\121\000\213\000\207\000\110\000\
\206\000\206\000\206\000\061\000\206\000\206\000\122\000\206\000\
\206\000\206\000\206\000\207\000\206\000\206\000\206\000\206\000\
\206\000\213\000\123\000\124\000\012\001\013\001\207\000\014\001\
\206\000\206\000\220\000\207\000\219\000\015\001\206\000\223\000\
\016\001\125\000\238\000\224\000\207\000\207\000\225\000\239\000\
\249\000\006\001\140\000\206\000\211\000\022\001\021\001\017\001\
\208\000\208\000\208\000\028\001\208\000\208\000\029\001\208\000\
\208\000\208\000\208\000\206\000\208\000\208\000\208\000\208\000\
\208\000\046\001\048\001\051\001\206\000\206\000\052\001\053\001\
\208\000\208\000\054\001\063\001\064\001\065\001\208\000\070\001\
\071\001\150\000\066\001\073\001\150\000\095\001\076\001\078\001\
\086\001\087\001\091\001\208\000\186\000\150\000\093\001\124\000\
\210\000\210\000\210\000\097\001\210\000\210\000\127\000\210\000\
\210\000\210\000\210\000\208\000\210\000\210\000\210\000\210\000\
\210\000\098\001\150\000\036\002\208\000\208\000\102\001\112\001\
\210\000\210\000\145\000\138\001\186\000\208\000\210\000\111\001\
\214\000\214\000\214\000\150\000\214\000\214\000\103\001\214\000\
\214\000\214\000\214\000\210\000\214\000\214\000\214\000\214\000\
\214\000\140\001\141\001\144\000\145\000\114\001\116\001\115\001\
\214\000\214\000\117\001\210\000\181\000\118\001\214\000\120\001\
\142\001\121\001\146\000\128\001\210\000\210\000\211\000\124\001\
\212\000\212\000\212\000\214\000\212\000\212\000\127\001\212\000\
\212\000\212\000\212\000\132\001\212\000\212\000\212\000\212\000\
\212\000\125\001\133\001\214\000\144\000\145\000\137\001\163\001\
\212\000\212\000\143\001\144\001\214\000\214\000\212\000\147\001\
\209\000\209\000\209\000\146\000\209\000\209\000\174\000\209\000\
\209\000\209\000\209\000\212\000\209\000\209\000\209\000\209\000\
\071\000\149\001\071\000\071\000\071\000\162\001\071\000\165\001\
\209\000\209\000\142\000\212\000\168\001\169\001\209\000\172\001\
\177\001\071\000\037\002\180\001\212\000\212\000\185\000\092\000\
\071\000\181\001\138\001\209\000\182\001\007\001\008\001\009\001\
\144\000\145\000\092\000\183\001\071\000\071\000\071\000\071\000\
\071\000\092\000\188\001\209\000\092\000\190\001\186\001\146\000\
\140\001\141\001\195\001\197\001\209\000\209\000\071\000\193\001\
\092\000\092\000\198\001\188\000\213\000\213\000\213\000\142\001\
\213\000\213\000\071\000\213\000\213\000\213\000\213\000\092\000\
\213\000\213\000\213\000\213\000\200\001\132\000\202\001\132\000\
\204\001\132\000\209\001\132\000\213\000\213\000\132\000\211\000\
\211\000\211\000\213\000\211\000\211\000\210\001\211\000\211\000\
\211\000\211\000\213\001\211\000\211\000\211\000\211\000\213\000\
\214\001\218\001\217\001\189\000\225\001\226\001\227\001\211\000\
\211\000\231\001\107\000\232\001\107\000\211\000\107\000\213\000\
\107\000\235\001\236\001\107\000\067\001\248\001\252\001\253\001\
\213\000\213\000\211\000\107\000\003\002\008\002\190\000\255\001\
\186\000\186\000\107\000\010\002\186\000\107\000\186\000\186\000\
\186\000\186\000\211\000\186\000\186\000\186\000\019\002\186\000\
\157\000\107\000\107\000\211\000\211\000\141\001\035\002\186\000\
\186\000\055\002\138\001\038\002\039\002\186\000\040\002\048\002\
\107\000\186\000\049\002\187\000\186\000\050\002\186\000\186\000\
\186\000\186\000\186\000\186\000\186\000\186\000\051\002\186\000\
\140\001\141\001\054\002\185\001\058\002\060\002\071\002\186\000\
\186\000\075\002\186\000\121\000\077\002\186\000\190\000\142\001\
\181\000\181\000\031\002\186\000\186\000\122\000\181\000\181\000\
\181\000\181\000\186\000\181\000\181\000\181\000\097\002\181\000\
\039\000\123\000\124\000\040\000\102\002\105\002\037\000\181\000\
\181\000\041\000\186\000\053\000\105\000\181\000\112\000\087\000\
\125\000\085\000\081\000\186\000\186\000\148\000\126\000\056\002\
\065\000\059\000\181\000\043\000\110\000\079\000\044\000\138\001\
\045\000\046\000\174\000\174\000\138\000\050\000\174\000\067\000\
\174\000\174\000\181\000\174\000\118\000\174\000\174\000\174\000\
\121\000\174\000\136\000\181\000\181\000\140\001\141\001\047\000\
\199\000\174\000\174\000\099\002\138\001\191\000\217\000\174\000\
\197\000\144\000\185\000\185\000\142\001\048\000\123\000\124\000\
\185\000\185\000\185\000\185\000\174\000\185\000\185\000\185\000\
\037\000\185\000\140\001\141\001\035\001\125\000\247\001\036\001\
\116\000\185\000\185\000\057\002\174\000\037\001\114\000\185\000\
\038\001\142\001\066\002\138\001\039\001\174\000\174\000\188\000\
\188\000\142\000\138\001\188\000\185\000\188\000\188\000\040\001\
\188\000\140\000\188\000\188\000\188\000\041\001\188\000\034\000\
\034\001\140\001\141\001\146\001\185\000\110\001\188\000\188\000\
\140\001\141\001\100\002\138\001\188\000\185\000\185\000\047\001\
\142\001\173\001\250\000\081\001\118\002\205\001\201\001\142\001\
\101\002\188\000\017\002\000\000\000\000\034\002\000\000\189\000\
\189\000\140\001\141\001\000\000\000\000\189\000\189\000\189\000\
\189\000\188\000\189\000\189\000\189\000\000\000\189\000\000\000\
\142\001\000\000\188\000\188\000\000\000\000\000\189\000\189\000\
\142\000\000\000\190\000\190\000\189\000\000\000\190\000\143\000\
\190\000\190\000\190\000\190\000\000\000\190\000\190\000\190\000\
\000\000\189\000\000\000\000\000\000\000\000\000\144\000\145\000\
\000\000\190\000\190\000\000\000\000\000\000\000\000\000\190\000\
\095\000\189\000\095\000\000\000\095\000\146\000\095\000\187\000\
\187\000\095\000\189\000\189\000\190\000\187\000\187\000\187\000\
\187\000\000\000\187\000\187\000\187\000\000\000\187\000\000\000\
\095\000\000\000\000\000\095\000\190\000\000\000\187\000\187\000\
\000\000\000\000\190\000\190\000\187\000\190\000\190\000\095\000\
\190\000\190\000\190\000\190\000\142\000\190\000\190\000\190\000\
\138\001\187\000\039\000\105\001\000\000\040\000\095\000\139\001\
\000\000\190\000\190\000\041\000\000\000\000\000\105\000\190\000\
\000\000\187\000\144\000\145\000\000\000\000\000\140\001\141\001\
\000\000\000\000\187\000\187\000\190\000\043\000\000\000\000\000\
\000\000\146\000\045\000\046\000\000\000\142\001\000\000\186\000\
\000\000\000\000\000\000\067\001\190\000\187\000\188\000\189\000\
\190\000\000\000\191\000\192\000\193\000\190\000\190\000\000\000\
\000\000\047\000\000\000\000\000\000\000\000\000\138\001\194\000\
\000\000\000\000\186\000\000\000\195\000\052\002\000\000\048\000\
\187\000\188\000\189\000\190\000\000\000\191\000\192\000\193\000\
\186\000\196\000\000\000\000\000\140\001\141\001\187\000\188\000\
\189\000\055\001\194\000\191\000\192\000\193\000\000\000\195\000\
\000\000\197\000\071\000\142\001\000\000\000\000\000\000\142\000\
\194\000\071\000\198\000\199\000\196\000\195\000\000\000\000\000\
\000\000\072\000\000\000\072\000\072\000\072\000\000\000\072\000\
\071\000\071\000\196\000\000\000\197\000\144\000\145\000\000\000\
\000\000\000\000\000\000\138\001\000\000\198\000\199\000\071\000\
\000\000\072\000\197\000\076\000\146\000\076\000\076\000\076\000\
\000\000\076\000\000\000\198\000\199\000\072\000\072\000\072\000\
\072\000\140\001\141\001\000\000\091\000\000\000\091\000\000\000\
\091\000\000\000\091\000\076\000\000\000\091\000\000\000\072\000\
\142\001\000\000\000\000\000\000\000\000\091\000\000\000\076\000\
\076\000\076\000\103\002\072\000\091\000\000\000\103\000\091\000\
\103\000\000\000\103\000\000\000\103\000\116\002\000\000\103\000\
\000\000\076\000\000\000\091\000\091\000\000\000\000\000\103\000\
\144\000\145\000\000\000\000\000\000\000\076\000\103\000\000\000\
\000\000\103\000\091\000\144\000\145\000\000\000\000\000\146\000\
\004\000\005\000\006\000\007\000\000\000\103\000\103\000\008\000\
\009\000\000\000\146\000\010\000\011\000\012\000\013\000\014\000\
\000\000\015\000\000\000\121\000\103\000\000\000\000\000\000\000\
\016\000\000\000\134\000\017\000\018\000\122\000\000\000\019\000\
\020\000\000\000\021\000\000\000\000\000\022\000\023\000\024\000\
\025\000\123\000\124\000\026\000\121\000\000\000\027\000\000\000\
\000\000\028\000\000\000\099\001\000\000\098\000\122\000\098\000\
\125\000\098\000\000\000\098\000\000\000\000\000\098\000\000\000\
\000\000\000\000\123\000\124\000\000\000\104\000\108\000\104\000\
\108\000\104\000\108\000\104\000\108\000\098\000\104\000\108\000\
\098\000\125\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\104\000\108\000"

let yycheck = "\013\000\
\009\000\037\000\161\000\012\000\000\000\009\000\010\000\002\000\
\012\000\111\000\000\000\100\000\016\000\000\000\070\000\064\001\
\170\000\194\000\041\002\004\001\034\000\013\001\036\000\009\001\
\045\002\091\000\160\000\018\000\004\001\033\000\021\000\022\000\
\054\001\013\001\013\001\004\001\025\001\103\000\140\000\193\000\
\013\001\004\001\131\000\079\000\080\000\003\001\003\001\003\001\
\150\000\028\001\003\001\022\001\005\001\074\002\007\001\028\001\
\009\001\025\001\072\000\012\001\009\001\097\002\020\001\026\001\
\020\001\167\000\058\001\006\001\044\001\105\002\027\001\020\001\
\030\001\006\001\027\001\044\001\071\000\030\001\063\001\068\001\
\066\001\030\001\171\000\172\000\042\001\043\001\042\001\043\001\
\027\001\112\002\023\001\070\001\148\000\042\001\043\001\104\000\
\185\000\070\001\004\001\057\001\068\001\057\001\054\001\042\001\
\057\001\020\001\097\000\116\000\057\001\118\000\119\000\133\001\
\121\000\122\000\123\000\124\000\125\000\126\000\057\001\040\001\
\186\000\135\000\037\001\004\001\133\000\120\000\192\000\141\000\
\142\000\006\001\144\000\145\000\146\000\147\000\129\000\201\000\
\014\001\132\000\044\001\134\000\111\001\039\001\164\001\009\001\
\013\001\026\001\168\001\003\001\143\000\005\001\027\001\007\001\
\003\001\009\001\052\001\053\001\012\001\012\001\149\000\009\001\
\004\001\027\001\060\001\044\001\020\001\042\001\020\001\162\000\
\163\000\020\001\005\001\027\001\001\001\168\000\030\001\004\001\
\030\001\000\000\173\000\228\001\057\001\010\001\037\001\005\001\
\013\001\020\001\042\001\043\001\042\001\043\001\194\000\042\001\
\043\001\043\001\208\000\030\001\033\001\211\000\020\001\028\001\
\044\001\057\001\031\001\057\001\033\001\034\001\057\001\042\001\
\043\001\008\001\004\001\006\001\043\001\004\001\223\000\210\000\
\119\000\013\001\213\000\056\001\042\001\043\001\057\001\126\000\
\013\001\005\001\020\001\056\001\027\001\200\001\128\001\003\001\
\027\001\224\000\225\000\057\001\027\001\115\001\069\001\137\001\
\138\001\070\001\140\001\141\001\142\001\038\002\039\002\042\001\
\020\001\007\001\008\001\009\001\032\001\008\001\000\000\062\002\
\063\002\067\001\030\001\003\001\065\001\068\002\057\001\009\001\
\162\001\163\001\059\002\060\002\008\001\042\001\042\001\043\001\
\027\001\054\001\003\001\000\000\020\001\008\001\005\001\009\001\
\009\001\027\001\006\001\003\001\057\001\057\001\009\001\009\001\
\003\002\028\001\029\001\025\001\040\001\020\001\101\002\004\001\
\076\001\027\001\042\001\043\001\020\001\204\001\020\001\149\001\
\018\001\027\001\020\001\046\001\004\001\230\001\006\001\020\001\
\210\001\057\001\160\001\042\001\043\001\005\001\216\001\217\001\
\218\001\009\001\042\001\043\001\042\001\043\001\172\001\080\001\
\042\001\043\001\057\001\229\001\066\001\048\002\068\001\009\001\
\051\002\057\001\001\001\087\001\079\001\004\001\100\001\057\001\
\154\001\013\001\005\001\010\001\027\001\037\001\013\001\013\001\
\003\001\027\001\004\001\165\001\095\001\000\000\097\001\009\001\
\099\001\020\001\077\002\003\001\043\001\028\001\105\001\177\001\
\214\001\020\001\033\001\034\001\020\001\003\001\016\002\005\001\
\006\001\007\001\013\001\009\001\020\001\009\001\121\001\042\001\
\043\001\124\001\125\001\013\001\234\001\042\001\043\001\042\001\
\043\001\056\001\042\001\043\001\020\001\027\001\057\001\027\001\
\139\001\013\001\042\001\043\001\057\001\000\000\057\001\070\001\
\013\001\039\001\040\001\041\001\054\002\055\002\056\002\057\002\
\238\000\057\001\042\001\043\001\004\001\001\001\232\001\008\001\
\004\001\067\002\248\000\180\001\003\001\013\001\005\001\004\001\
\185\001\013\001\019\001\174\001\020\001\000\000\005\001\069\001\
\013\001\008\001\013\001\010\001\011\001\012\001\013\001\020\001\
\015\001\016\001\017\001\190\001\019\001\159\001\034\001\013\001\
\195\001\099\002\100\002\005\001\027\001\028\001\003\001\169\001\
\005\001\245\001\033\001\018\001\013\001\020\001\209\001\051\001\
\006\001\007\001\020\001\009\001\013\001\031\002\013\001\046\001\
\004\001\016\001\036\002\037\002\030\001\000\000\225\001\226\001\
\227\001\002\001\003\001\042\001\043\001\027\001\013\001\062\001\
\042\001\043\001\006\001\252\001\013\001\014\001\015\001\013\001\
\071\001\072\001\057\001\020\001\013\001\248\001\044\001\057\001\
\066\002\003\001\027\001\005\001\044\001\007\001\008\001\047\001\
\010\001\011\001\012\001\013\001\004\001\015\001\016\001\017\001\
\018\001\019\001\020\001\005\001\004\001\000\000\008\001\004\001\
\005\001\027\001\028\001\008\001\053\001\010\001\011\001\033\001\
\013\001\069\002\015\001\016\001\017\001\007\001\019\001\013\001\
\042\001\043\001\016\001\128\000\046\001\130\000\027\001\028\001\
\007\001\044\002\020\001\004\001\033\001\000\000\004\001\057\001\
\070\002\052\002\027\001\110\000\062\001\020\001\009\001\058\002\
\115\000\046\001\117\000\001\000\002\000\071\001\072\001\030\001\
\042\001\043\001\009\001\013\001\071\002\015\001\203\001\027\001\
\205\001\062\001\001\001\042\001\043\001\004\001\007\001\057\001\
\003\001\103\002\071\001\072\001\009\001\000\000\013\001\026\001\
\027\001\006\001\057\001\020\001\114\002\004\001\116\002\009\001\
\003\001\004\001\005\001\102\002\007\001\008\001\003\001\010\001\
\011\001\012\001\013\001\034\001\015\001\016\001\017\001\018\001\
\019\001\042\001\043\001\003\001\044\001\000\000\013\001\013\001\
\027\001\028\001\004\001\009\001\051\001\027\001\033\001\027\001\
\057\001\001\001\020\001\044\001\004\001\004\001\003\001\042\001\
\005\001\004\001\007\001\046\001\009\001\013\001\027\001\012\001\
\003\001\004\001\005\001\027\001\007\001\008\001\057\001\010\001\
\011\001\012\001\013\001\062\001\015\001\016\001\017\001\018\001\
\019\001\009\001\034\001\004\001\071\001\072\001\044\001\009\001\
\027\001\028\001\004\001\027\001\020\001\027\001\033\001\004\001\
\003\001\004\001\005\001\051\001\007\001\008\001\030\001\010\001\
\011\001\012\001\013\001\046\001\015\001\016\001\017\001\018\001\
\019\001\000\000\042\001\043\001\001\001\002\001\057\001\004\001\
\027\001\028\001\006\001\062\001\005\001\010\001\033\001\020\001\
\013\001\057\001\004\001\044\001\071\001\072\001\044\001\013\001\
\005\001\009\001\044\001\046\001\000\000\020\001\015\001\028\001\
\003\001\004\001\005\001\027\001\007\001\008\001\027\001\010\001\
\011\001\012\001\013\001\062\001\015\001\016\001\017\001\018\001\
\019\001\066\001\009\001\013\001\071\001\072\001\004\001\004\001\
\027\001\028\001\004\001\013\001\015\001\013\001\033\001\005\001\
\003\001\001\001\013\001\007\001\004\001\027\001\005\001\005\001\
\005\001\003\001\005\001\046\001\000\000\013\001\005\001\043\001\
\003\001\004\001\005\001\027\001\007\001\008\001\047\001\010\001\
\011\001\012\001\013\001\062\001\015\001\016\001\017\001\018\001\
\019\001\005\001\034\001\012\001\071\001\072\001\005\001\013\001\
\027\001\028\001\043\001\020\001\000\000\020\001\033\001\006\001\
\003\001\004\001\005\001\051\001\007\001\008\001\050\001\010\001\
\011\001\012\001\013\001\046\001\015\001\016\001\017\001\018\001\
\019\001\042\001\043\001\042\001\043\001\013\001\013\001\004\001\
\027\001\028\001\003\001\062\001\000\000\005\001\033\001\005\001\
\057\001\027\001\057\001\006\001\071\001\072\001\020\001\027\001\
\003\001\004\001\005\001\046\001\007\001\008\001\005\001\010\001\
\011\001\012\001\013\001\013\001\015\001\016\001\017\001\018\001\
\019\001\027\001\004\001\062\001\042\001\043\001\004\001\020\001\
\027\001\028\001\005\001\005\001\071\001\072\001\033\001\005\001\
\003\001\004\001\005\001\057\001\007\001\008\001\000\000\010\001\
\011\001\012\001\013\001\046\001\015\001\016\001\017\001\018\001\
\003\001\044\001\005\001\006\001\007\001\037\001\009\001\009\001\
\027\001\028\001\020\001\062\001\004\001\004\001\033\001\044\001\
\020\001\020\001\012\001\020\001\071\001\072\001\000\000\009\001\
\027\001\015\001\020\001\046\001\007\001\039\001\040\001\041\001\
\042\001\043\001\020\001\046\001\039\001\040\001\041\001\042\001\
\043\001\027\001\005\001\062\001\030\001\027\001\046\001\057\001\
\042\001\043\001\027\001\005\001\071\001\072\001\057\001\051\001\
\042\001\043\001\006\001\000\000\003\001\004\001\005\001\057\001\
\007\001\008\001\069\001\010\001\011\001\012\001\013\001\057\001\
\015\001\016\001\017\001\018\001\020\001\003\001\046\001\005\001\
\012\001\007\001\027\001\009\001\027\001\028\001\012\001\003\001\
\004\001\005\001\033\001\007\001\008\001\020\001\010\001\011\001\
\012\001\013\001\005\001\015\001\016\001\017\001\018\001\046\001\
\044\001\020\001\037\001\000\000\065\001\027\001\027\001\027\001\
\028\001\005\001\003\001\013\001\005\001\033\001\007\001\062\001\
\009\001\003\001\005\001\012\001\008\001\027\001\020\001\015\001\
\071\001\072\001\046\001\020\001\003\001\005\001\000\000\015\001\
\004\001\005\001\027\001\015\001\008\001\030\001\010\001\011\001\
\012\001\013\001\062\001\015\001\016\001\017\001\005\001\019\001\
\026\001\042\001\043\001\071\001\072\001\043\001\005\001\027\001\
\028\001\019\001\020\001\005\001\005\001\033\001\005\001\020\001\
\057\001\005\001\015\001\000\000\008\001\007\001\010\001\011\001\
\012\001\013\001\046\001\015\001\016\001\017\001\012\001\019\001\
\042\001\043\001\009\001\012\001\066\001\005\001\027\001\027\001\
\028\001\007\001\062\001\020\001\020\001\033\001\000\000\057\001\
\004\001\005\001\019\001\071\001\072\001\030\001\010\001\011\001\
\012\001\013\001\046\001\015\001\016\001\017\001\009\001\019\001\
\001\001\042\001\043\001\004\001\027\001\009\001\000\000\027\001\
\028\001\010\001\062\001\027\001\013\001\033\001\005\001\027\001\
\057\001\027\001\005\001\071\001\072\001\009\001\027\001\012\001\
\005\001\005\001\046\001\028\001\005\001\005\001\031\001\020\001\
\033\001\034\001\004\001\005\001\005\001\066\001\008\001\005\001\
\010\001\011\001\062\001\013\001\007\001\015\001\016\001\017\001\
\020\001\019\001\005\001\071\001\072\001\042\001\043\001\056\001\
\005\001\027\001\028\001\019\001\020\001\020\001\005\001\033\001\
\005\001\007\001\004\001\005\001\057\001\070\001\042\001\043\001\
\010\001\011\001\012\001\013\001\046\001\015\001\016\001\017\001\
\066\001\019\001\042\001\043\001\001\001\057\001\175\001\004\001\
\007\001\027\001\028\001\012\001\062\001\010\001\007\001\033\001\
\013\001\057\001\012\001\020\001\017\001\071\001\072\001\004\001\
\005\001\007\001\020\001\008\001\046\001\010\001\011\001\028\001\
\013\001\007\001\015\001\016\001\017\001\034\001\019\001\005\000\
\169\000\042\001\043\001\048\001\062\001\010\001\027\001\028\001\
\042\001\043\001\019\001\020\001\033\001\071\001\072\001\183\000\
\057\001\071\001\139\000\218\000\117\002\120\001\117\001\057\001\
\091\002\046\001\212\001\255\255\255\255\235\001\255\255\004\001\
\005\001\042\001\043\001\255\255\255\255\010\001\011\001\012\001\
\013\001\062\001\015\001\016\001\017\001\255\255\019\001\255\255\
\057\001\255\255\071\001\072\001\255\255\255\255\027\001\028\001\
\020\001\255\255\004\001\005\001\033\001\255\255\008\001\027\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\017\001\
\255\255\046\001\255\255\255\255\255\255\255\255\042\001\043\001\
\255\255\027\001\028\001\255\255\255\255\255\255\255\255\033\001\
\003\001\062\001\005\001\255\255\007\001\057\001\009\001\004\001\
\005\001\012\001\071\001\072\001\046\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\255\255\019\001\255\255\
\027\001\255\255\255\255\030\001\062\001\255\255\027\001\028\001\
\255\255\255\255\004\001\005\001\033\001\071\001\072\001\042\001\
\010\001\011\001\012\001\013\001\020\001\015\001\016\001\017\001\
\020\001\046\001\001\001\027\001\255\255\004\001\057\001\027\001\
\255\255\027\001\028\001\010\001\255\255\255\255\013\001\033\001\
\255\255\062\001\042\001\043\001\255\255\255\255\042\001\043\001\
\255\255\255\255\071\001\072\001\046\001\028\001\255\255\255\255\
\255\255\057\001\033\001\034\001\255\255\057\001\255\255\004\001\
\255\255\255\255\255\255\008\001\062\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\071\001\072\001\255\255\
\255\255\056\001\255\255\255\255\255\255\255\255\020\001\028\001\
\255\255\255\255\004\001\255\255\033\001\027\001\255\255\070\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\017\001\
\004\001\046\001\255\255\255\255\042\001\043\001\010\001\011\001\
\012\001\013\001\028\001\015\001\016\001\017\001\255\255\033\001\
\255\255\062\001\020\001\057\001\255\255\255\255\255\255\020\001\
\028\001\027\001\071\001\072\001\046\001\033\001\255\255\255\255\
\255\255\003\001\255\255\005\001\006\001\007\001\255\255\009\001\
\042\001\043\001\046\001\255\255\062\001\042\001\043\001\255\255\
\255\255\255\255\255\255\020\001\255\255\071\001\072\001\057\001\
\255\255\027\001\062\001\003\001\057\001\005\001\006\001\007\001\
\255\255\009\001\255\255\071\001\072\001\039\001\040\001\041\001\
\042\001\042\001\043\001\255\255\003\001\255\255\005\001\255\255\
\007\001\255\255\009\001\027\001\255\255\012\001\255\255\057\001\
\057\001\255\255\255\255\255\255\255\255\020\001\255\255\039\001\
\040\001\041\001\020\001\069\001\027\001\255\255\003\001\030\001\
\005\001\255\255\007\001\255\255\009\001\020\001\255\255\012\001\
\255\255\057\001\255\255\042\001\043\001\255\255\255\255\020\001\
\042\001\043\001\255\255\255\255\255\255\069\001\027\001\255\255\
\255\255\030\001\057\001\042\001\043\001\255\255\255\255\057\001\
\021\001\022\001\023\001\024\001\255\255\042\001\043\001\028\001\
\029\001\255\255\057\001\032\001\033\001\034\001\035\001\036\001\
\255\255\038\001\255\255\020\001\057\001\255\255\255\255\255\255\
\045\001\255\255\027\001\048\001\049\001\030\001\255\255\052\001\
\053\001\255\255\055\001\255\255\255\255\058\001\059\001\060\001\
\061\001\042\001\043\001\064\001\020\001\255\255\067\001\255\255\
\255\255\070\001\255\255\027\001\255\255\003\001\030\001\005\001\
\057\001\007\001\255\255\009\001\255\255\255\255\012\001\255\255\
\255\255\255\255\042\001\043\001\255\255\003\001\003\001\005\001\
\005\001\007\001\007\001\009\001\009\001\027\001\012\001\012\001\
\030\001\057\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\027\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  AMONG\000\
  WEAKSECRET\000\
  PARAM\000\
  ORTEXT\000\
  FAIL\000\
  TYPE\000\
  SET\000\
  FORALL\000\
  CONST\000\
  INJEVENT\000\
  OR\000\
  CHANNEL\000\
  LETFUN\000\
  DEFINE\000\
  EXPAND\000\
  YIELD\000\
  LEQ\000\
  PROBA\000\
  LBRACE\000\
  RBRACE\000\
  PROOF\000\
  EQUIVALENCE\000\
  OTHERWISE\000\
  TABLE\000\
  INSERT\000\
  GET\000\
  "

let yynames_block = "\
  IDENT\000\
  STRING\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 138 "pitparser.mly"
        ( (* Options are ignored, they are supported for compatibility with
             CryptoVerif only *)
          TTypeDecl(_2) :: _5 )
# 1034 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 142 "pitparser.mly"
 ( (TFunDecl(_2, _4, _7, _8)) :: _10 )
# 1045 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'typeid) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'treducmayfail) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _12 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 145 "pitparser.mly"
 ( (TReducFail(_2,_4,_7,_9, _10)) :: _12 )
# 1057 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'treduc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 148 "pitparser.mly"
 ( (TReduc(_2,_3)) :: _5 )
# 1066 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 151 "pitparser.mly"
        ( (List.map (fun x -> TConstDecl(x, _4, _5)) _2) @ _7 )
# 1076 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 153 "pitparser.mly"
 ( (TEquation(_2, _3, _5)) :: _7 )
# 1086 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 155 "pitparser.mly"
        ( (TEventDecl(_2, [])) :: _4 )
# 1094 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 157 "pitparser.mly"
        ( (TEventDecl(_2, _4)) :: _7 )
# 1103 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typeidseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 159 "pitparser.mly"
        ( (TPredDecl(_2, _4, _6)) :: _8 )
# 1113 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 161 "pitparser.mly"
        ( (TPredDecl(_2, [], _3)) :: _5 )
# 1122 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 163 "pitparser.mly"
        ( (TTableDecl(_2, _4)) :: _7 )
# 1131 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 165 "pitparser.mly"
 ( (TPDef(_2,[],_4)) :: _6 )
# 1140 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'vartype) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 167 "pitparser.mly"
        ( (TPDef(_2,_4,_7)) :: _9 )
# 1150 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 169 "pitparser.mly"
        ( (TLetFun(_2,[],_4)) :: _6 )
# 1159 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'vartype) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 171 "pitparser.mly"
        ( (TLetFun(_2,_4,_7)) :: _9 )
# 1169 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 173 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 1178 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 175 "pitparser.mly"
        ( (TSet(_2,I _4)) :: _6 )
# 1187 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 177 "pitparser.mly"
        ( (TNoUnif (_2, _4)) :: _6 )
# 1196 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 179 "pitparser.mly"
        ( (TNoUnif ([], _2)) :: _4 )
# 1204 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 181 "pitparser.mly"
        ( (TQuery(_2,_4)) :: _6 )
# 1213 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 183 "pitparser.mly"
        ( (TQuery([],_2)) :: _4 )
# 1221 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 185 "pitparser.mly"
        ( (TNoninterf(_2, _4)) :: _6 )
# 1230 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 187 "pitparser.mly"
        ( (TNoninterf([], _2)) :: _4 )
# 1238 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 189 "pitparser.mly"
        ( (TWeaksecret(_2)) :: _4 )
# 1246 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 191 "pitparser.mly"
 ( (TNot(_2, _4)) :: _6 )
# 1255 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 193 "pitparser.mly"
 ( (TNot([], _2)) :: _4 )
# 1263 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'neidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 195 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1273 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 198 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _4 )
# 1282 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 201 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1291 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'mayfailvartypeseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 204 "pitparser.mly"
        ( (TElimtrue (_2,_4)) :: _6 )
# 1300 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 206 "pitparser.mly"
        ( (TElimtrue ([],_2)) :: _4 )
# 1308 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 208 "pitparser.mly"
        ( (* For compatibility with CryptoVerif, allow 
               channel c1...cn. 
             as a synonym for 
               free c1...cn:channel. *)
          (List.map (fun x -> TFree(x, ("channel", dummy_ext), [])) _2) @ _4 )
# 1320 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 214 "pitparser.mly"
        ( (List.map (fun x -> TFree(x, _4, _5)) _2) @ _7 )
# 1330 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 216 "pitparser.mly"
        ( (TClauses(_2)) :: _3 )
# 1338 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.tdecl list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 218 "pitparser.mly"
        ( (TDefine(_2, _4, _7)) :: _9 )
# 1348 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 220 "pitparser.mly"
        ( (TExpand(_2, _4)) :: _7 )
# 1357 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "pitparser.mly"
        ( [] )
# 1363 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 226 "pitparser.mly"
 ( _1, _3, None )
# 1371 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 228 "pitparser.mly"
 ( 
	  Param.equivalence := true;
	  _1, _3, Some _4 )
# 1382 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 236 "pitparser.mly"
        ( _1 )
# 1389 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 238 "pitparser.mly"
        ( _1 )
# 1396 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 240 "pitparser.mly"
        ( string_of_int _1, parse_extent() )
# 1403 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 242 "pitparser.mly"
        ( "*", parse_extent() )
# 1409 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 244 "pitparser.mly"
        ( ".", parse_extent() )
# 1415 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "pitparser.mly"
        ( "set", parse_extent() )
# 1421 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "pitparser.mly"
        ( "=", parse_extent() )
# 1427 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "pitparser.mly"
        ( ",", parse_extent() )
# 1433 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prooftoken) in
    Obj.repr(
# 254 "pitparser.mly"
        ( [_1] )
# 1440 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prooftoken) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 256 "pitparser.mly"
        ( _1 :: _2 )
# 1448 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 260 "pitparser.mly"
 ( [_1] )
# 1455 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proofcommand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proof) in
    Obj.repr(
# 262 "pitparser.mly"
        ( _1 :: _3 )
# 1463 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 268 "pitparser.mly"
        ( _2 )
# 1470 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "pitparser.mly"
        ( [] )
# 1476 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 274 "pitparser.mly"
    ( _1 :: _3 )
# 1484 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 276 "pitparser.mly"
    ( [_1] )
# 1491 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 280 "pitparser.mly"
        ( (_1,_3)::_5 )
# 1500 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 283 "pitparser.mly"
        ( [(_1,_3)] )
# 1508 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 287 "pitparser.mly"
        ( _1 )
# 1515 "pitparser.ml"
               : 'vartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 289 "pitparser.mly"
        ( [] )
# 1521 "pitparser.ml"
               : 'vartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nevartype) in
    Obj.repr(
# 293 "pitparser.mly"
        ( _2 )
# 1528 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 295 "pitparser.mly"
        ( [] )
# 1534 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 299 "pitparser.mly"
        ( _1 )
# 1541 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    Obj.repr(
# 301 "pitparser.mly"
        ( (* channel is allowed as a type, even though it is also a keyword for the declaration channel c1...cn. *)
          "channel", parse_extent() )
# 1548 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 306 "pitparser.mly"
        ( _1 )
# 1555 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 308 "pitparser.mly"
        ( [] )
# 1561 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 312 "pitparser.mly"
    ( _1 :: _3 )
# 1569 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 314 "pitparser.mly"
    ( [_1] )
# 1576 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "pitparser.mly"
 ( PFail, parse_extent () )
# 1582 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 322 "pitparser.mly"
 ( PFunApp (_1, _3), parse_extent() )
# 1590 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 324 "pitparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1599 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 327 "pitparser.mly"
 ( PIdent (_1), parse_extent() )
# 1606 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 329 "pitparser.mly"
        ( PFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1614 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 331 "pitparser.mly"
        ( PFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1622 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 333 "pitparser.mly"
        ( PFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1629 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 335 "pitparser.mly"
        ( PFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1637 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 337 "pitparser.mly"
        ( PFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1645 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 339 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PTuple (l), parse_extent() )
# 1655 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 346 "pitparser.mly"
 ( _1 :: _3 )
# 1663 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 348 "pitparser.mly"
 ( [_1] )
# 1670 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 352 "pitparser.mly"
        ( _1 )
# 1677 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 354 "pitparser.mly"
        ( [] )
# 1683 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 360 "pitparser.mly"
    ( (_1, Some _4) )
# 1691 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 362 "pitparser.mly"
    ( (_1, None) )
# 1698 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 366 "pitparser.mly"
    ( _1 :: _3 )
# 1706 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 368 "pitparser.mly"
    ( [_1] )
# 1713 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tquery) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tqueryseq) in
    Obj.repr(
# 374 "pitparser.mly"
    ( _1 :: _3 )
# 1721 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tquery) in
    Obj.repr(
# 376 "pitparser.mly"
    ( [_1] )
# 1728 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 380 "pitparser.mly"
    ( PRealQuery(_1) )
# 1735 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 382 "pitparser.mly"
    ( PPutBegin(false, _4) )
# 1742 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 384 "pitparser.mly"
    ( PPutBegin(true, _4) )
# 1749 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 388 "pitparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 1757 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 390 "pitparser.mly"
 ( PGIdent (_1), parse_extent() )
# 1764 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gtermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 392 "pitparser.mly"
        ( PGPhase(_1, _3, _6), parse_extent() )
# 1773 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 394 "pitparser.mly"
        ( PGPhase(("table", parse_extent()), [_3], _6), parse_extent() )
# 1781 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 396 "pitparser.mly"
        ( PGFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1789 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 398 "pitparser.mly"
        ( PGFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1797 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 400 "pitparser.mly"
        ( PGFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1804 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 402 "pitparser.mly"
        ( PGFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1812 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 404 "pitparser.mly"
        ( PGFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1820 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 406 "pitparser.mly"
        ( PGFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1828 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 408 "pitparser.mly"
        ( PGFunApp(("event",parse_extent()), _3), parse_extent() )
# 1835 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 410 "pitparser.mly"
        ( PGFunApp(("inj-event",parse_extent()), _3), parse_extent() )
# 1842 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 412 "pitparser.mly"
        ( PGFunApp(("table",parse_extent()), [_3]), parse_extent() )
# 1849 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 414 "pitparser.mly"
        ( PGFunApp(("==>", parse_extent()), [_1;_3]), parse_extent() )
# 1857 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 416 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PGTuple (l), parse_extent() )
# 1867 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 421 "pitparser.mly"
        ( PGName (_2, _4), parse_extent() )
# 1875 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 423 "pitparser.mly"
        ( PGName (_2, []), parse_extent() )
# 1882 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 425 "pitparser.mly"
        ( PGLet(_2, _4, _6), parse_extent() )
# 1891 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 429 "pitparser.mly"
 ( _1 :: _3 )
# 1899 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 431 "pitparser.mly"
 ( [_1] )
# 1906 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 435 "pitparser.mly"
        ( _1 )
# 1913 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 437 "pitparser.mly"
        ( [] )
# 1919 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 442 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1928 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 444 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1936 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 446 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 1945 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 448 "pitparser.mly"
        ( [(_1, _3)] )
# 1953 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 452 "pitparser.mly"
        ( _1 )
# 1960 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 454 "pitparser.mly"
        ( [] )
# 1966 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tfnebindingseq) in
    Obj.repr(
# 460 "pitparser.mly"
        ( BFLet(_2, _4, _6) )
# 1975 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 462 "pitparser.mly"
        ( BFNoUnif((_1,_3,_5), _6) )
# 1985 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 464 "pitparser.mly"
        ( BFNoUnif((_1,[],-1),_2) )
# 1993 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 466 "pitparser.mly"
        ( BFNoUnif((("table", parse_extent()),_3,_5), _6) )
# 2002 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 470 "pitparser.mly"
    ( _2 )
# 2009 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 472 "pitparser.mly"
    ( -1 )
# 2015 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 476 "pitparser.mly"
    ( _2 )
# 2022 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 478 "pitparser.mly"
    ( -1 )
# 2028 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 482 "pitparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 2036 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gformat) in
    Obj.repr(
# 484 "pitparser.mly"
 ( PFGFunApp (("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2044 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 486 "pitparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 2051 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 488 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PFGTuple (_2), parse_extent() )
# 2061 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 493 "pitparser.mly"
        ( PFGName (_2, _4), parse_extent() )
# 2069 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 495 "pitparser.mly"
        ( PFGName (_2, []), parse_extent() )
# 2076 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 497 "pitparser.mly"
        ( PFGAny (_2), parse_extent() )
# 2083 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 499 "pitparser.mly"
        ( PFGLet(_2, _4, _6), parse_extent() )
# 2092 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 504 "pitparser.mly"
 ( _1 :: _3 )
# 2100 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 506 "pitparser.mly"
 ( [_1] )
# 2107 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 510 "pitparser.mly"
        ( _1 )
# 2114 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 512 "pitparser.mly"
        ( [] )
# 2120 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 517 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 2129 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 519 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 2137 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 521 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 2146 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 523 "pitparser.mly"
        ( [(_1, _3)] )
# 2154 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 527 "pitparser.mly"
        ( _1 )
# 2161 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 529 "pitparser.mly"
        ( [] )
# 2167 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 535 "pitparser.mly"
 ( (_1,_3, false) )
# 2175 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    Obj.repr(
# 538 "pitparser.mly"
 ( (_1,_3, true) )
# 2183 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mayfailvartypeseq) in
    Obj.repr(
# 542 "pitparser.mly"
 ( _1::_3 )
# 2191 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mayfailvartype) in
    Obj.repr(
# 545 "pitparser.mly"
 ( [_1] )
# 2198 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mayfailvartypeseq) in
    Obj.repr(
# 549 "pitparser.mly"
 ( _2 )
# 2205 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 551 "pitparser.mly"
 ( [] )
# 2211 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 556 "pitparser.mly"
 ( (_2,_3,_5) :: _6 )
# 2221 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 558 "pitparser.mly"
 ( [_2,_3,_5] )
# 2230 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 562 "pitparser.mly"
 ( (_1,_2,_4) :: _5 )
# 2240 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 564 "pitparser.mly"
 ( [_1,_2,_4] )
# 2249 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treduc) in
    Obj.repr(
# 568 "pitparser.mly"
 ( (_1,_2,_4) :: _6 )
# 2259 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 570 "pitparser.mly"
 ( [_1,_2,_4] )
# 2268 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 576 "pitparser.mly"
        ( PClause(_1,_3) )
# 2276 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 578 "pitparser.mly"
        ( PFact(_1) )
# 2283 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 580 "pitparser.mly"
        ( PEquiv(_1,_3,true) )
# 2291 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 582 "pitparser.mly"
        ( PEquiv(_1,_3,false) )
# 2299 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tclause) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tclauses) in
    Obj.repr(
# 586 "pitparser.mly"
 ( (_1,_2) :: _4 )
# 2308 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclause) in
    Obj.repr(
# 588 "pitparser.mly"
 ( [_1,_2] )
# 2316 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 594 "pitparser.mly"
 ( _2 )
# 2323 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 596 "pitparser.mly"
 ( PLetDef (_1,[]) )
# 2330 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 598 "pitparser.mly"
        ( PLetDef (_1, _3) )
# 2338 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 600 "pitparser.mly"
 ( PRepl _2 )
# 2345 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 602 "pitparser.mly"
 ( (* For convergence with CryptoVerif, we allow an identifier (bound on the number of copies) after a replication; it is simply ignored in ProVerif. *)
          PRepl _5 )
# 2355 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 605 "pitparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 2364 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 609 "pitparser.mly"
        ( (* For convergence with CryptoVerif, we allow yield instead of 0 *)
          PNil )
# 2371 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 612 "pitparser.mly"
 ( PRestr(_2, _4, _5) )
# 2380 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 614 "pitparser.mly"
 ( PTest(_2,_4,_5) )
# 2389 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 616 "pitparser.mly"
 ( PInput(_3,_5,_7) )
# 2398 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 618 "pitparser.mly"
 ( POutput(_3,_5,_7) )
# 2407 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 620 "pitparser.mly"
 ( PLet(_2,_4,PNil,PNil) )
# 2415 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 622 "pitparser.mly"
 ( PLet(_2,_4,_6,_7) )
# 2425 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 624 "pitparser.mly"
        ( PLetFilter(_2,_4,PNil,PNil) )
# 2433 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 626 "pitparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_7) )
# 2445 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 630 "pitparser.mly"
        ( PInsert(_2, _4, _6) )
# 2454 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tpatternseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 632 "pitparser.mly"
        ( PGet(_2, _4, None, _6, _7) )
# 2464 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 634 "pitparser.mly"
        ( PGet(_2, _4, Some _7, _8, _9) )
# 2475 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 636 "pitparser.mly"
 ( PPar(_1,_3) )
# 2483 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 638 "pitparser.mly"
        ( PEvent(_2, _4, _6) )
# 2492 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 640 "pitparser.mly"
        ( PEvent(_2, [], _3) )
# 2500 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 642 "pitparser.mly"
        ( PPhase(_2, _3) )
# 2508 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 646 "pitparser.mly"
        ( _2 )
# 2515 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 648 "pitparser.mly"
        ( PNil )
# 2521 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 652 "pitparser.mly"
        ( _2 )
# 2528 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 654 "pitparser.mly"
        ( PNil )
# 2534 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 658 "pitparser.mly"
        ( _2 )
# 2541 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 660 "pitparser.mly"
        ( PNil )
# 2547 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 664 "pitparser.mly"
    ( PPatVar(_1, None) )
# 2554 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 666 "pitparser.mly"
    ( PPatVar(_1, Some _3) )
# 2562 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 668 "pitparser.mly"
    ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPatTuple(_2) )
# 2572 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 673 "pitparser.mly"
    ( PPatFunApp(_1,_3) )
# 2580 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 675 "pitparser.mly"
    ( PPatEqual(_2) )
# 2587 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 679 "pitparser.mly"
    ( _1 :: _3 )
# 2595 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tpattern) in
    Obj.repr(
# 681 "pitparser.mly"
    ( [_1] )
# 2602 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 685 "pitparser.mly"
    ( _1 )
# 2609 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 687 "pitparser.mly"
    ( [] )
# 2615 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 693 "pitparser.mly"
 ( PPFunApp (_1, _3), parse_extent() )
# 2623 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 695 "pitparser.mly"
        ( Param.has_choice := true; 
	  PPFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2632 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 698 "pitparser.mly"
 ( PPIdent (_1), parse_extent() )
# 2639 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 700 "pitparser.mly"
        ( PPFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 2647 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 702 "pitparser.mly"
        ( PPFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 2655 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 704 "pitparser.mly"
        ( PPFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 2662 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 706 "pitparser.mly"
        ( PPFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 2670 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 708 "pitparser.mly"
        ( PPFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 2678 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 710 "pitparser.mly"
 ( PPRestr(_2, _4, _6), parse_extent() )
# 2687 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 712 "pitparser.mly"
 ( PPTest(_2,_4,None), parse_extent() )
# 2695 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 714 "pitparser.mly"
 ( PPTest(_2,_4,Some _6), parse_extent() )
# 2704 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 716 "pitparser.mly"
 ( PPLet(_2,_4,_6,None), parse_extent() )
# 2713 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 718 "pitparser.mly"
 ( PPLet(_2,_4,_6,Some _8), parse_extent() )
# 2723 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 720 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,None), parse_extent() )
# 2732 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 722 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,Some _8), parse_extent() )
# 2742 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 724 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPTuple (l), parse_extent() )
# 2752 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 731 "pitparser.mly"
 ( _1 :: _3 )
# 2760 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 733 "pitparser.mly"
 ( [_1] )
# 2767 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 737 "pitparser.mly"
        ( _1 )
# 2774 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 739 "pitparser.mly"
        ( [] )
# 2780 "pitparser.ml"
               : 'ptermseq))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lib *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option)
let lib (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Pitptree.tdecl list)
