(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet and Vincent Cheval                        *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2014                      *
 *                                                           *
 *************************************************************)

(*

    This file is free software; you can redistribute it and/or modify
    it under the terms of the BSD License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    BSD license for more details (in file LICENSEBSD).

*)
free c.
(*

WooLam shared-key auth protocol (1997)

A -> B : A
B -> A : N (fresh)
A -> B : { A,B,N }_kAS
B -> S : { A,B,{ A,B,N }_kAS }_kBS
S -> B : { A,B,N }_kBS
B: verify { A,B,N }_kBS = the message from S

Terminates with an attack

*)

(* Shared-key cryptography *)

fun encrypt/2.
reduc decrypt(encrypt(m,k),k) = m.

(* Host name / key *)

fun host/1.
private reduc getkey(host(x)) = x.

(* Secrecy assumptions *)

not kBS.
not kAS.

query evinj:endBparam(x) ==> evinj:beginBparam(x).
query evinj:endBfull(x,y,z) ==> evinj:beginBfull(x,y,z).


let processA = 
	in(c, hostB2); (* Choose the B host *)
	event beginBparam(hostB2);
        out(c,hostA); in(c,n); 
	event beginBfull(hostB2, hostA, n);
        out(c, encrypt((hostA, hostB2, n), kAS)).

let processB = 
	in(c, hostA2); 
	new N; 
	out(c, N); 
	in(c, m);
        out(c, encrypt((hostA2, hostB, m), kBS));
        in(c, m2);
	let (=hostA2, =hostB, =N) = decrypt(m2, kBS) in
        (* OK *)
        if hostA2 = hostA then 
	event endBparam(hostB);
	event endBfull(hostB, hostA2, N).


let processS = 
	in(c, hostB0);(* Choose the B host *)
        in(c,m);
        let (hostA1, =hostB0, m2) = decrypt(m, getkey(hostB0)) in
        let (=hostA1, =hostB0, n) = decrypt(m2, getkey(hostA1)) in
        out(c, encrypt((hostA1, hostB0, n), getkey(hostB0))).

process new kAS; new kBS;
        let hostA = host(kAS) in
        let hostB = host(kBS) in
	out(c, hostA); out(c, hostB);
	((!processA) | (!processB) | (!processS))
