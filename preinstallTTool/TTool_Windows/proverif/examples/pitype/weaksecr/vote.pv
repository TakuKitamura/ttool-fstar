(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet and Vincent Cheval                        *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2014                      *
 *                                                           *
 *************************************************************)

(*

    This file is free software; you can redistribute it and/or modify
    it under the terms of the BSD License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    BSD license for more details (in file LICENSEBSD).

*)
(* Naive vote protocol
   Taken from Delaune, Jacquemard, CSFW'04 *)

type pkey.
type skey.

(* deterministic public key encryption *)

fun pk(skey): pkey.
fun encrypt(bitstring, pkey): bitstring.
reduc forall x: bitstring, y: skey; decrypt(encrypt(x,pk(y)), y) = x.

(* Note that the attack disappears with probabilistic public-key encryption:

type seed.
fun pk(skey): pkey.
fun internal_encrypt(bitstring, pkey, seed): bitstring.
reduc forall x: bitstring, y: skey, r: seed; decrypt(internal_encrypt(x,pk(y),r), y) = x.
letfun encrypt(x: bitstring, y: pkey) = new r: seed; internal_encrypt(x,y,r).

*)

free c: channel.
free v: bitstring [private].

weaksecret v.


process 
	new skS: skey;
	let pkS = pk(skS) in
	out(c, pkS);
	!out(c, encrypt(v, pkS))
