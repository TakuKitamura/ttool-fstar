(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet and Vincent Cheval                        *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2014                      *
 *                                                           *
 *************************************************************)

(*

    This file is free software; you can redistribute it and/or modify
    it under the terms of the BSD License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    BSD license for more details (in file LICENSEBSD).

*)
(* Otway Rees protocol.
   Corrected version by Paulson TR443 Inductive... *)

pred c/1 decompData, elimVar.

fun host/1.

fun encrypt/2.

query c:secretA[].
query c:secretB[].

reduc

(* attacker *)
c:encrypt(m,k) & c:k -> c:m;
c:x & c:y -> c:encrypt(x,y);
c:x -> c:host(x);


c:host(shrA[]);
c:host(shrB[]);

(* A *)

c:X -> c:(Na[X],host(shrA[]),X, encrypt((Na[X], host(shrA[]), X), shrA[]));

c:(Na[host(shrB[])], encrypt((Na[host(shrB[])],key), shrA[])) -> c:encrypt(secretA[], key);

(* B *)

c:(x,y,host(shrB[]),z) -> c:(x,y,host(shrB[]),z, encrypt((x,Nb[y],y,host(shrB[])), shrB[]));

c:(x,y,host(shrB[]),z) & c:(x,y2,encrypt((Nb[y], key), shrB[])) -> c:(x,y2);

c:(x,host(shrA[]),host(shrB[]),z) & c:(x,y2,encrypt((Nb[host(shrA[])],key), shrB[])) -> c:encrypt(secretB[], key);

(* Server *)

c:(na,host(shra), host(shrb), encrypt((na, host(shra), host(shrb)), shra),
   encrypt((na,nb,host(shra),host(shrb)), shrb)) ->
c:(na,encrypt((na, k[x,shra,shrb]), shra),encrypt((nb,k[x,shra,shrb]), shrb)).

