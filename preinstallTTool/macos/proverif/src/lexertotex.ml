# 28 "lexertotex.mll"
 
open Parsing_helper
open Piptree
open Fileprint

type kind =
    Keyword
  | Fun
  | Cst
  | Pred

let kinds = Hashtbl.create 7

let init_kinds d = 
  Hashtbl.iter (fun keyw _ -> Hashtbl.add kinds keyw "\\kwl") Pilexer.keyword_table;
  List.iter (function
      FunDecl((f,_),_,_) -> Hashtbl.add kinds f "\\kwf"
    | DataFunDecl((f,_),_) -> Hashtbl.add kinds f "\\kwf"
    | Reduc((((PFunApp((f,_),_) ,_),_)::_),_) -> Hashtbl.add kinds f "\\kwf"
    | ReducFail((((PFunApp((f,_),_) ,_),_,_)::_),_) -> Hashtbl.add kinds f "\\kwf"
    | PredDecl((p,_),_,_) -> Hashtbl.add kinds p "\\kwp"
    | Free(l,_) -> List.iter (fun (c,_) -> Hashtbl.add kinds c "\\kwc") l
    | _ -> ()) d

let parse filename = 
  try
    let ic = open_in filename in
    let lexbuf = Lexing.from_channel ic in
    let ptree =
      try
        Piparser.all Pilexer.token lexbuf
      with Parsing.Parse_error ->
        input_error "Syntax error" (extent lexbuf)
    in
    close_in ic;
    ptree
  with Sys_error s ->
    user_error ("File error: " ^ s ^ "\n")


# 43 "lexertotex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\228\255\229\255\078\000\000\000\235\255\236\255\237\255\
    \238\255\239\255\002\000\241\255\242\255\003\000\244\255\245\255\
    \246\255\004\000\001\000\077\000\096\000\002\000\253\255\187\000\
    \001\000\255\255\093\000\002\000\219\000\005\000\007\000\030\000\
    \032\000\063\000\064\000\249\255\074\000\105\000\109\000\146\000\
    \252\255\253\255\005\000\254\255\101\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\027\000\027\000\255\255\255\255\255\255\
    \255\255\255\255\015\000\255\255\255\255\012\000\255\255\255\255\
    \255\255\007\000\008\000\005\000\004\000\003\000\255\255\001\000\
    \000\000\255\255\255\255\255\255\255\255\021\000\024\000\255\255\
    \255\255\022\000\023\000\255\255\255\255\015\000\025\000\255\255\
    \255\255\255\255\001\000\255\255\003\000\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\255\255\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\040\000\
    \000\000\000\000\255\255\000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\025\000\025\000\021\000\024\000\021\000\043\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\011\000\037\000\013\000\017\000\029\000\005\000\030\000\
    \018\000\016\000\007\000\035\000\017\000\004\000\008\000\009\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\006\000\012\000\003\000\010\000\029\000\036\000\
    \029\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\015\000\034\000\014\000\033\000\033\000\
    \034\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\032\000\013\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\020\000\
    \038\000\037\000\032\000\031\000\030\000\038\000\045\000\000\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\031\000\030\000\043\000\000\000\000\000\042\000\
    \000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\000\000\044\000\000\000\000\000\020\000\
    \000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\028\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
    \010\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\013\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\013\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\024\000\000\000\000\000\021\000\042\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\010\000\013\000\017\000\029\000\000\000\030\000\
    \000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\010\000\
    \027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\031\000\000\000\032\000\033\000\
    \034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\000\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\020\000\
    \036\000\037\000\026\000\003\000\003\000\038\000\044\000\255\255\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\026\000\026\000\039\000\255\255\255\255\039\000\
    \255\255\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\255\255\039\000\255\255\255\255\020\000\
    \255\255\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\023\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \023\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\000\
    \023\000\255\255\255\255\028\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \028\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\000\
    \028\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\023\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\028\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\039\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 71 "lexertotex.mll"
     ( print_string "$\\\\\n$"; token lexbuf )
# 209 "lexertotex.ml"

  | 1 ->
# 73 "lexertotex.mll"
     ( print_string "\\ "; token lexbuf )
# 214 "lexertotex.ml"

  | 2 ->
# 75 "lexertotex.mll"
     ( print_string "\\qquad\\qquad "; token lexbuf )
# 219 "lexertotex.ml"

  | 3 ->
# 77 "lexertotex.mll"
     ( token lexbuf )
# 224 "lexertotex.ml"

  | 4 ->
# 79 "lexertotex.mll"
     ( 
       let s = Lexing.lexeme lexbuf in
       begin
	 try
           let k = Hashtbl.find kinds s in
	   print_string (k ^ "{");
	   print_sanitize s;
	   print_string "}"
	 with Not_found ->
	   print_string "\\var{";
	   print_sanitize s;
	   print_string "}"
       end;
       token lexbuf
     )
# 243 "lexertotex.ml"

  | 5 ->
# 95 "lexertotex.mll"
     ( print_string (Lexing.lexeme lexbuf); token lexbuf )
# 248 "lexertotex.ml"

  | 6 ->
# 96 "lexertotex.mll"
       (
         print_string "\\textit{(*";
         comment lexbuf
       )
# 256 "lexertotex.ml"

  | 7 ->
# 100 "lexertotex.mll"
              ( print_string ", "; token lexbuf )
# 261 "lexertotex.ml"

  | 8 ->
# 101 "lexertotex.mll"
      ( print_string "("; token lexbuf )
# 266 "lexertotex.ml"

  | 9 ->
# 102 "lexertotex.mll"
      ( print_string ")"; token lexbuf )
# 271 "lexertotex.ml"

  | 10 ->
# 103 "lexertotex.mll"
      ( print_string "["; token lexbuf )
# 276 "lexertotex.ml"

  | 11 ->
# 104 "lexertotex.mll"
      ( print_string "]"; token lexbuf )
# 281 "lexertotex.ml"

  | 12 ->
# 105 "lexertotex.mll"
                      ( print_string "\\mid"; token lexbuf )
# 286 "lexertotex.ml"

  | 13 ->
# 106 "lexertotex.mll"
      ( print_string ";"; token lexbuf )
# 291 "lexertotex.ml"

  | 14 ->
# 107 "lexertotex.mll"
      ( print_string "!"; token lexbuf )
# 296 "lexertotex.ml"

  | 15 ->
# 108 "lexertotex.mll"
                      ( print_string " = "; token lexbuf )
# 301 "lexertotex.ml"

  | 16 ->
# 109 "lexertotex.mll"
      ( print_string "/"; token lexbuf )
# 306 "lexertotex.ml"

  | 17 ->
# 110 "lexertotex.mll"
      ( print_string "."; token lexbuf )
# 311 "lexertotex.ml"

  | 18 ->
# 111 "lexertotex.mll"
      ( print_string "*"; token lexbuf )
# 316 "lexertotex.ml"

  | 19 ->
# 112 "lexertotex.mll"
      ( print_string "{:}"; token lexbuf )
# 321 "lexertotex.ml"

  | 20 ->
# 113 "lexertotex.mll"
      ( print_string "\\&"; token lexbuf )
# 326 "lexertotex.ml"

  | 21 ->
# 114 "lexertotex.mll"
                       ( print_string (if !nice_tex then "\\rightarrow" else "\\ {-}{>}\\ "); token lexbuf )
# 331 "lexertotex.ml"

  | 22 ->
# 115 "lexertotex.mll"
                        ( print_string (if !nice_tex then "\\leftrightarrow" else "\\ {<}{-}{>}\\ "); token lexbuf )
# 336 "lexertotex.ml"

  | 23 ->
# 116 "lexertotex.mll"
                        ( print_string (if !nice_tex then "\\Leftrightarrow" else "\\ {<}{=}{>}\\ "); token lexbuf )
# 341 "lexertotex.ml"

  | 24 ->
# 117 "lexertotex.mll"
                       ( print_string (if !nice_tex then "\\neq" else "\\ {<}{>}\\ "); token lexbuf )
# 346 "lexertotex.ml"

  | 25 ->
# 118 "lexertotex.mll"
                        ( print_string (if !nice_tex then "\\Longrightarrow" else "\\ {=}{=}{>}\\ "); token lexbuf )
# 351 "lexertotex.ml"

  | 26 ->
# 119 "lexertotex.mll"
      (  print_string "$\n\\end{tabbing}\n" )
# 356 "lexertotex.ml"

  | 27 ->
# 120 "lexertotex.mll"
    ( input_error "Illegal character" (extent lexbuf) )
# 361 "lexertotex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 39
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 123 "lexertotex.mll"
       ( print_string "*)}";
         token lexbuf )
# 374 "lexertotex.ml"

  | 1 ->
# 126 "lexertotex.mll"
     ( print_string "}$\\\\\n$\\textit{"; comment lexbuf )
# 379 "lexertotex.ml"

  | 2 ->
# 127 "lexertotex.mll"
      ( print_string "}$\n\\end{tabbing}\n" )
# 384 "lexertotex.ml"

  | 3 ->
# 128 "lexertotex.mll"
    ( print_sanitize (Lexing.lexeme lexbuf); comment lexbuf )
# 389 "lexertotex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

# 130 "lexertotex.mll"
 

let convert filename = 
  try
    let ic = open_in filename in
    let lexbuf = Lexing.from_channel ic in
    print_preamble();
    print_string "\\begin{tabbing}\n$";
    token lexbuf;
    close_in ic
  with Sys_error s ->
    user_error ("File error: " ^ s ^ "\n")

let converttotex f =
  let d,_ = parse f in
  init_kinds d;
  convert f 


# 416 "lexertotex.ml"
