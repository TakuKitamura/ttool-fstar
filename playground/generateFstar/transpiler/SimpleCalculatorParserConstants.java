/* Generated By:JJTree&JavaCC: Do not edit this line. SimpleCalculatorParserConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SimpleCalculatorParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BOOLEAN = 4;
  /** RegularExpression Id. */
  int NULL = 5;
  /** RegularExpression Id. */
  int RELATIONAL = 6;
  /** RegularExpression Id. */
  int EQUALITY = 7;
  /** RegularExpression Id. */
  int AND = 8;
  /** RegularExpression Id. */
  int OR = 9;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 10;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 11;
  /** RegularExpression Id. */
  int PLUSMINUS = 12;
  /** RegularExpression Id. */
  int IDENTIFIER = 13;
  /** RegularExpression Id. */
  int LETTER = 14;
  /** RegularExpression Id. */
  int DIGIT = 15;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 16;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 17;
  /** RegularExpression Id. */
  int HEX_LITERAL = 18;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 19;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 20;
  /** RegularExpression Id. */
  int EXPONENT = 21;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 22;
  /** RegularExpression Id. */
  int STRING_LITERAL = 23;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "<BOOLEAN>",
    "\"null\"",
    "<RELATIONAL>",
    "<EQUALITY>",
    "\"&&\"",
    "\"||\"",
    "\"(\"",
    "\")\"",
    "<PLUSMINUS>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\".\"",
    "\"\\n\"",
    "\"boolean[]\"",
    "\"char[]\"",
    "\"byte[]\"",
    "\"short[]\"",
    "\"int[]\"",
    "\"long[]\"",
    "\"float[]\"",
    "\"double[]\"",
    "\"boolean \"",
    "\"char \"",
    "\"byte \"",
    "\"short \"",
    "\"int \"",
    "\"long \"",
    "\"float \"",
    "\"double \"",
    "\"void \"",
    "\"[]\"",
    "\",\"",
  };

}
