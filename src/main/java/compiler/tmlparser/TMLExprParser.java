/* Copyright or (C) or Copr. GET / ENST, Telecom-Paris, Ludovic Apvrille
 * 
 * ludovic.apvrille AT enst.fr
 * 
 * This software is a computer program whose purpose is to allow the
 * edition of TURTLE analysis, design and deployment diagrams, to
 * allow the generation of RT-LOTOS or Java code from this diagram,
 * and at last to allow the analysis of formal validation traces
 * obtained from external tools, e.g. RTL from LAAS-CNRS and CADP
 * from INRIA Rhone-Alpes.
 * 
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * 
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * 
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * 
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */





package compiler.tmlparser;

/* Generated By:JJTree&JavaCC: Do not edit this line. TMLExprParser.java */

public class TMLExprParser/*@bgen(jjtree)*/implements TMLExprParserTreeConstants, TMLExprParserConstants {/*@bgen(jjtree)*/
  protected JJTTMLExprParserState jjtree = new JJTTMLExprParserState();private int x;

  private void print(String elt, String name) {
    System.out.println("Found " + elt + " = " + name);
  }

  public static void main(String args[]) {
    TMLExprParser parser;
    System.out.println("TML Expr Parser Version 0.1:  Reading from standard input . . .");
    parser = new TMLExprParser(System.in);
    try {
      SimpleNode node = parser.CompilationUnit();
      node.dump("node:");
      System.out.println("TML Expr Parser Version 0.1:  expr parsed successfully.");
    } catch (ParseException e) {
      System.out.println("TML Expr Parser Version 0.1: Syntax error.");
    }
  }

/*
 ***************************************************
 * THE TML Expression LANGUAGE GRAMMAR STARTS HERE *
 ***************************************************/

/*
 * Program structuring syntax follows.
 */
  final public SimpleNode CompilationUnit() throws ParseException {
 /*@bgen(jjtree) Root */
  SimpleNode jjtn000 = new SimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNMENT_NAT:
        jj_consume_token(ASSIGNMENT_NAT);
        NatId();
        AssignmentOperator();
        NatExtendedExpression();
        break;
      case ASSIGNMENT_BOOL:
        jj_consume_token(ASSIGNMENT_BOOL);
        BoolId();
        AssignmentOperator();
        BoolExtendedExpression();
        break;
      case ASSIGNMENT_QUEUE_NAT:
        jj_consume_token(ASSIGNMENT_QUEUE_NAT);
        QueueNatId();
        AssignmentOperator();
        QueueNatExtendedExpression();
        break;
      case GUARD:
        jj_consume_token(GUARD);
        jj_consume_token(LBRACKET);
        BoolExtendedExpression();
        jj_consume_token(RBRACKET);
        break;
      case ACTION_NAT:
        jj_consume_token(ACTION_NAT);
        NatExtendedExpression();
        break;
      case ACTION_BOOL:
        jj_consume_token(ACTION_BOOL);
        BoolExtendedExpression();
        break;
      case ACTION_QUEUE_NAT:
        jj_consume_token(ACTION_QUEUE_NAT);
        QueueNatExtendedExpression();
        break;
      case ACTION_GATE:
        jj_consume_token(ACTION_GATE);
        ActionGate();
        break;
      case ACTION_GATE_VALUE:
        jj_consume_token(ACTION_GATE_VALUE);
        ActionGateValue();
        break;
      case NAT_ID:
        jj_consume_token(NAT_ID);
        NatId();
        break;
      case NAT_NUMERAL:
        jj_consume_token(NAT_NUMERAL);
        NaturalLiteral();
        break;
      case TRUE:
      case FALSE:
      case EMPTY:
      case FIRST:
      case LAST:
      case NOT:
      case MIN:
      case MAX:
      case NATURAL_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        BoolExtendedExpression();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AssignmentOperator() throws ParseException {
 /*@bgen(jjtree) NAT_ASSIGN */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_ASSIGN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ASSIGN);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//*************** NAT ****************/
  final public void NatExtendedExpression() throws ParseException {
 /*@bgen(jjtree) NatExtendedExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTNATEXTENDEDEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        LParen();
        NatExtendedExpression();
        RParen();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case STAR:
        case SLASH:
        case REM:
          NatOperatorExtendedExpression();
          break;
        default:
          jj_la1[1] = jj_gen;
        }
        break;
      case FIRST:
      case LAST:
      case MIN:
      case MAX:
        NatFunction2();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case STAR:
        case SLASH:
        case REM:
          NatOperatorExtendedExpression();
          break;
        default:
          jj_la1[2] = jj_gen;
        }
        break;
      case NATURAL_LITERAL:
        NaturalLiteral();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case STAR:
        case SLASH:
        case REM:
          NatOperatorExtendedExpression();
          break;
        default:
          jj_la1[3] = jj_gen;
        }
        break;
      case IDENTIFIER:
        NatId();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case STAR:
        case SLASH:
        case REM:
          NatOperatorExtendedExpression();
          break;
        default:
          jj_la1[4] = jj_gen;
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NatId() throws ParseException {
 /*@bgen(jjtree) NAT_ID */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_ID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void QueueNatId() throws ParseException {
 /*@bgen(jjtree) QUEUE_NAT_ID */
 SimpleNode jjtn000 = new SimpleNode(JJTQUEUE_NAT_ID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BoolId() throws ParseException {
 /*@bgen(jjtree) BOOL_ID */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_ID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NatFunction2() throws ParseException {
 /*@bgen(jjtree) NatFunction2 */
  SimpleNode jjtn000 = new SimpleNode(JJTNATFUNCTION2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MIN:
      case MAX:
        NatFunc2();
        LParen();
        NatExtendedExpression();
        jj_consume_token(COMMA);
        NatExtendedExpression();
        RParen();
        break;
      case FIRST:
      case LAST:
        QueueNatFunc();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NatFunc2() throws ParseException {
 /*@bgen(jjtree) NAT_FUNC */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_FUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MIN:
        t = jj_consume_token(MIN);
        break;
      case MAX:
        t = jj_consume_token(MAX);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.setInfo(""+t.kind,t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void QueueNatFunc() throws ParseException {
 /*@bgen(jjtree) NAT_QUEUE_NAT_FUNC */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_QUEUE_NAT_FUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIRST:
        t = jj_consume_token(FIRST);
        LParen();
        QueueNatExtendedExpression();
        RParen();
        break;
      case LAST:
        t = jj_consume_token(LAST);
        LParen();
        QueueNatExtendedExpression();
        RParen();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.setInfo(""+t.kind,t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NatOperatorExtendedExpression() throws ParseException {
 /*@bgen(jjtree) NatOperatorExtendedExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNATOPERATOREXTENDEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NatOperator();
      NatExtendedExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NatOperator() throws ParseException {
 /*@bgen(jjtree) NAT_OP */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_OP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case REM:
        t = jj_consume_token(REM);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                     jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//********* QUEUE_NAT ***************/
  final public void QueueNatExtendedExpression() throws ParseException {
 /*@bgen(jjtree) QueueNatExtendedExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTQUEUENATEXTENDEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        LParen();
        QueueNatExtendedExpression();
        RParen();
        break;
      case ENQUEUE:
      case DEQUEUE:
      case DESTROY:
        GetQueueNatFunction();
        break;
      case QUEUE_LITERAL:
        QueueNatLiteral();
        break;
      case IDENTIFIER:
        QueueNatId();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void GetQueueNatFunction() throws ParseException {
 /*@bgen(jjtree) QUEUE_NAT_FUNC */
 SimpleNode jjtn000 = new SimpleNode(JJTQUEUE_NAT_FUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENQUEUE:
        t = jj_consume_token(ENQUEUE);
        LParen();
        NatExtendedExpression();
        jj_consume_token(COMMA);
        QueueNatExtendedExpression();
        RParen();
        break;
      case DEQUEUE:
        t = jj_consume_token(DEQUEUE);
        LParen();
        QueueNatExtendedExpression();
        RParen();
        break;
      case DESTROY:
        t = jj_consume_token(DESTROY);
        LParen();
        NatExtendedExpression();
        jj_consume_token(COMMA);
        QueueNatExtendedExpression();
        RParen();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.setInfo(""+t.kind,t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//********* BOOL ***************/
  final public void BoolExtendedExpression() throws ParseException {
 /*@bgen(jjtree) BoolExtendedExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLEXTENDEDEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_1(200000)) {
        NatExtendedExpression();
        NatComparisonOperator();
        NatExtendedExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case AND:
        case OR:
          BoolOperatorExtendedExpression();
          break;
        default:
          jj_la1[12] = jj_gen;
        }
      } else if (jj_2_2(2000000)) {
        LParen();
        BoolExtendedExpression();
        RParen();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case AND:
        case OR:
          BoolOperatorExtendedExpression();
          break;
        default:
          jj_la1[13] = jj_gen;
        }
      } else if (jj_2_3(2000000)) {
        BooleanLiteral();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case AND:
        case OR:
          BoolOperatorExtendedExpression();
          break;
        default:
          jj_la1[14] = jj_gen;
        }
      } else if (jj_2_4(2000000)) {
        Id();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EMPTY:
        case NOT:
          BoolFunction1();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQ:
          case AND:
          case OR:
            BoolOperatorExtendedExpression();
            break;
          default:
            jj_la1[15] = jj_gen;
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BoolOperatorExtendedExpression() throws ParseException {
 /*@bgen(jjtree) BoolOperatorExtendedExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLOPERATOREXTENDEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BoolOperator();
      BoolExtendedExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*void BoolExtendedExpression() :
{}
{
  LOOKAHEAD(20000)
  Id() [BoolExtendedExpressionAfterID()]
|
  LOOKAHEAD(firstBoolParen())
  firstBoolParen()
|
  LParen() NatExtendedExpression() RParen() NatComparisonOperator() NatExtendedExpression()
|
  BoolFunction1() [BoolOperator() BoolExtendedExpression()]
|
  BooleanLiteral() [BoolOperator() BoolExtendedExpression()]
|
  NaturalLiteral() InNatBoolExtendedExpression1() [BoolOperator() BoolExtendedExpression()]
}


void firstBoolParen() :
{}
{
  LParen() BoolExtendedExpression() RParen() [BoolOperator() BoolExtendedExpression()]
}

void BoolNatExpressionWithFirstParen() :
{}
{
  LParen() BoolNatExpressionWithFirstParen() RParen() [BoolOperator() BoolExtendedExpression()]
|
  BoolFunction1()
	
}


void InNatBoolExtendedExpression1() : 
{}
{
  NatComparisonOperator() NatExtendedExpression()
|
  NatOperatorExtendedExpression() NatComparisonOperator() NatExtendedExpression()
}


void BoolExtendedExpressionAfterID() :
{}
{
  StrictBoolOperator() BoolExtendedExpression()
|
  StrictNatComparisonOperator() NatExtendedExpression() [BoolOperator() BoolExtendedExpression()]
|
  BoolNatComparisonOperator() BoolExtendedExpressionAfterComparison()
|
  NatOperator() NatExtendedExpression() NatComparisonOperator() NatExtendedExpression() [BoolComparisonOperator() BoolExtendedExpression()]
}

void BoolExtendedExpressionAfterComparison() :
{}
{
  LParen() BoolExtendedExpressionAfterComparison() RParen()
|
  BoolFunction1() [BoolOperator() BoolExtendedExpression()]
| 
  BooleanLiteral() [BoolOperator() BoolExtendedExpression()]
|
  NaturalLiteral() [NatOperatorExtendedExpression() |  BoolOperator() BoolExtendedExpression()]
|
  Id() [BoolExtendedExpressionAfterIDComparisonID()]
}


void BoolExtendedExpressionAfterIDComparisonID() :
{}
{
  StrictBoolOperator() BoolExtendedExpression()
|
  StrictNatComparisonOperator() NatExtendedExpression() [BoolOperator() BoolExtendedExpression()]
|
  BoolNatComparisonOperator() BoolExtendedExpressionAfterComparison()
|
  NatOperatorExtendedExpression() [BoolOperator() BoolExtendedExpression()]
}*/
  final public void BoolFunction1() throws ParseException {
 /*@bgen(jjtree) BoolFunction1 */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLFUNCTION1);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        not();
        LParen();
        BoolExtendedExpression();
        RParen();
        break;
      case EMPTY:
        EmptyQueueNat();
        LParen();
        QueueNatExtendedExpression();
        RParen();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void not() throws ParseException {
 /*@bgen(jjtree) BOOL_FUNC */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_FUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NOT);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EmptyQueueNat() throws ParseException {
 /*@bgen(jjtree) BOOL_QUEUE_NAT_FUNC */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_QUEUE_NAT_FUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(EMPTY);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Id() throws ParseException {
 /*@bgen(jjtree) ID */
 SimpleNode jjtn000 = new SimpleNode(JJTID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LParen() throws ParseException {
 /*@bgen(jjtree) LPAREN */
 SimpleNode jjtn000 = new SimpleNode(JJTLPAREN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LPAREN);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RParen() throws ParseException {
 /*@bgen(jjtree) RPAREN */
 SimpleNode jjtn000 = new SimpleNode(JJTRPAREN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RPAREN);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BoolComparisonOperator() throws ParseException {
 /*@bgen(jjtree) BOOL_OP */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_OP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(EQ);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BoolOperator() throws ParseException {
 /*@bgen(jjtree) BOOL_OP */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_OP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
        break;
      case OR:
        t = jj_consume_token(OR);
        break;
      case EQ:
        t = jj_consume_token(EQ);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                     jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StrictBoolOperator() throws ParseException {
 /*@bgen(jjtree) BOOL_OP */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_OP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
        break;
      case OR:
        t = jj_consume_token(OR);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NatComparisonOperator() throws ParseException {
 /*@bgen(jjtree) NAT_COMP */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_COMP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                        jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StrictNatComparisonOperator() throws ParseException {
 /*@bgen(jjtree) NAT_COMP */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_COMP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BoolNatComparisonOperator() throws ParseException {
 /*@bgen(jjtree) BOOLNAT_COMP */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLNAT_COMP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(EQ);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ActionGate() throws ParseException {
 /*@bgen(jjtree) ActionGate */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIONGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        NatExtendedExpression();
        jj_consume_token(RBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case HOOK:
          ActionGate2();
          break;
        default:
          jj_la1[22] = jj_gen;
        }
        break;
      case BANG:
        jj_consume_token(BANG);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NATURAL_LITERAL:
          Literal();
          break;
        case IDENTIFIER:
          Id();
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case HOOK:
          ActionGate2();
          break;
        default:
          jj_la1[24] = jj_gen;
        }
        break;
      case HOOK:
        jj_consume_token(HOOK);
        Id();
        jj_consume_token(COLON);
        VariableType();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case HOOK:
          ActionGate2();
          break;
        default:
          jj_la1[25] = jj_gen;
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ActionGate2() throws ParseException {
 /*@bgen(jjtree) ActionGate2 */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIONGATE2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
        jj_consume_token(BANG);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NATURAL_LITERAL:
          Literal();
          break;
        case IDENTIFIER:
          Id();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case HOOK:
          ActionGate2();
          break;
        default:
          jj_la1[28] = jj_gen;
        }
        break;
      case HOOK:
        jj_consume_token(HOOK);
        Id();
        jj_consume_token(COLON);
        VariableType();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case HOOK:
          ActionGate2();
          break;
        default:
          jj_la1[29] = jj_gen;
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ActionGateValue() throws ParseException {
 /*@bgen(jjtree) ActionGateValue */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIONGATEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        NatExtendedExpression();
        jj_consume_token(RBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case HOOK:
          ActionGateValue2();
          break;
        default:
          jj_la1[31] = jj_gen;
        }
        break;
      case BANG:
        jj_consume_token(BANG);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NATURAL_LITERAL:
          Literal();
          break;
        case IDENTIFIER:
          Id();
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case HOOK:
          ActionGateValue2();
          break;
        default:
          jj_la1[33] = jj_gen;
        }
        break;
      case HOOK:
        jj_consume_token(HOOK);
        ActionGateValue3();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case HOOK:
          ActionGateValue2();
          break;
        default:
          jj_la1[34] = jj_gen;
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ActionGateValue2() throws ParseException {
 /*@bgen(jjtree) ActionGateValue2 */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIONGATEVALUE2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
        jj_consume_token(BANG);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NATURAL_LITERAL:
          Literal();
          break;
        case IDENTIFIER:
          Id();
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case HOOK:
          ActionGateValue2();
          break;
        default:
          jj_la1[37] = jj_gen;
        }
        break;
      case HOOK:
        jj_consume_token(HOOK);
        ActionGateValue3();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case HOOK:
          ActionGateValue2();
          break;
        default:
          jj_la1[38] = jj_gen;
        }
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ActionGateValue3() throws ParseException {
 /*@bgen(jjtree) ActionGateValue3 */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIONGATEVALUE3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NATURAL_LITERAL:
        NaturalLiteral();
        jj_consume_token(COLON);
        jj_consume_token(NAT_TYPE);
        break;
      case TRUE:
      case FALSE:
        BooleanLiteral();
        jj_consume_token(COLON);
        jj_consume_token(BOOL_TYPE);
        break;
      case IDENTIFIER:
        Id();
        jj_consume_token(COLON);
        VariableType();
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableType() throws ParseException {
 /*@bgen(jjtree) TYPE */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_TYPE:
        t = jj_consume_token(BOOL_TYPE);
        break;
      case NAT_TYPE:
        t = jj_consume_token(NAT_TYPE);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NaturalLiteral() throws ParseException {
 /*@bgen(jjtree) NAT_VALUE */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_VALUE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NATURAL_LITERAL);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.setInfo(""+t.kind,t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void Literal() throws ParseException {
 /*@bgen(jjtree) Literal */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NATURAL_LITERAL:
        NaturalLiteral();
        break;
      case TRUE:
      case FALSE:
        BooleanLiteral();
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void QueueNatLiteral() throws ParseException {
 /*@bgen(jjtree) QueueNatLiteral */
 SimpleNode jjtn000 = new SimpleNode(JJTQUEUENATLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(QUEUE_LITERAL);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.setInfo(""+t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BooleanLiteral() throws ParseException {
 /*@bgen(jjtree) BooleanLiteral */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.setInfo(""+t.kind,t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
    if (jj_3R_6()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    if (jj_3R_2()) return true;
    if (jj_3R_1()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_4()) return true;
    if (jj_3R_1()) return true;
    if (jj_3R_6()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(DESTROY)) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_1()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
      return jj_3R_6();
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(DEQUEUE)) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_37()) return true;
      return jj_3R_6();
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(ENQUEUE)) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_1()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
      return jj_3R_6();
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    return false;
  }

  private boolean jj_3R_43() {
      return jj_3R_46();
  }

  private boolean jj_3R_3() {
      return jj_3R_15();
  }

  private boolean jj_3R_45() {
      return jj_scan_token(QUEUE_LITERAL);
  }

  private boolean jj_3R_42() {
      return jj_3R_45();
  }

  private boolean jj_3R_41() {
      return jj_3R_44();
  }

  private boolean jj_3R_40() {
    if (jj_3R_4()) return true;
    if (jj_3R_37()) return true;
      return jj_3R_6();
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_20() {
      return jj_scan_token(NATURAL_LITERAL);
  }

  private boolean jj_3R_27() {
    if (jj_3R_32()) return true;
      return jj_3R_1();
  }

  private boolean jj_3R_6() {
      return jj_scan_token(RPAREN);
  }

  private boolean jj_3R_7() {
      return jj_3R_15();
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(LAST)) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_37()) return true;
      return jj_3R_6();
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(FIRST)) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_37()) return true;
      return jj_3R_6();
  }

  private boolean jj_3R_4() {
      return jj_scan_token(LPAREN);
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_10() {
      return jj_scan_token(IDENTIFIER);
  }

  private boolean jj_3R_17() {
      return jj_3R_27();
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    return false;
  }

  private boolean jj_3R_36() {
      return jj_scan_token(EMPTY);
  }

  private boolean jj_3R_26() {
      return jj_3R_15();
  }

  private boolean jj_3R_29() {
      return jj_3R_34();
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_33()) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_1()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_1()) return true;
      return jj_3R_6();
  }

  private boolean jj_3R_35() {
      return jj_scan_token(NOT);
  }

  private boolean jj_3R_9() {
      return jj_3R_15();
  }

  private boolean jj_3R_31() {
    if (jj_3R_36()) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_37()) return true;
      return jj_3R_6();
  }

  private boolean jj_3R_15() {
    if (jj_3R_24()) return true;
      return jj_3R_5();
  }

  private boolean jj_3R_30() {
    if (jj_3R_35()) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
      return jj_3R_6();
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  private boolean jj_3R_21() {
      return jj_3R_27();
  }

  private boolean jj_3R_46() {
      return jj_scan_token(IDENTIFIER);
  }

  private boolean jj_3R_16() {
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_19() {
      return jj_3R_27();
  }

  private boolean jj_3_4() {
      return jj_3R_10();
  }

  private boolean jj_3R_23() {
      return jj_3R_27();
  }

  private boolean jj_3R_22() {
      return jj_scan_token(IDENTIFIER);
  }

  private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public TMLExprParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe0fff800,0x0,0x0,0x0,0x0,0xc0000000,0xc0000000,0x0,0xc0000000,0x0,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x1800,0x3000000,0x1800,0x1800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x8f0000,0x8f0000,0x8f0000,0x8f0000,0x0,0x0,0x0,0x0,0x8f0000,0x1,0x1,0x100,0x100,0x100,0x100,0x0,0x0,0x100,0x0,0x70c,0xc,0x50,0x0,0x50,0x50,0x50,0x0,0x50,0x50,0x50,0x50,0x0,0x50,0x50,0x50,0x0,0x50,0x50,0x50,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x4a700,0x0,0x0,0x0,0x0,0x4a600,0x600,0x600,0x0,0x0,0x4c000,0x0,0xc0,0xc0,0xc0,0xc0,0x100,0x100,0xc0,0xc0,0x0,0x0,0x0,0xa000,0x0,0x0,0x800000,0xa000,0x0,0x0,0x0,0x0,0xa000,0x0,0x0,0x800000,0xa000,0x0,0x0,0x0,0xa000,0x0,0x2000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /* Constructor with InputStream. */
  public TMLExprParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /* Constructor with InputStream and supplied encoding */
  public TMLExprParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TMLExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /* Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /* Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /* Constructor. */
  public TMLExprParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TMLExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /* Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /* Constructor with generated Token Manager. */
  public TMLExprParser(TMLExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /* Reinitialise. */
  public void ReInit(TMLExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** @return : Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  /**
   * @return : Get the specific Token
   * @param index : index
   */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** @return : Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[89];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 89; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
