/* Copyright or (C) or Copr. GET / ENST, Telecom-Paris, Ludovic Apvrille
 * 
 * ludovic.apvrille AT enst.fr
 * 
 * This software is a computer program whose purpose is to allow the
 * edition of TURTLE analysis, design and deployment diagrams, to
 * allow the generation of RT-LOTOS or Java code from this diagram,
 * and at last to allow the analysis of formal validation traces
 * obtained from external tools, e.g. RTL from LAAS-CNRS and CADP
 * from INRIA Rhone-Alpes.
 * 
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * 
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * 
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * 
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */





/* Generated By:JJTree&JavaCC: Do not edit this line. TMLExprParserConstants.java */
package compiler.tmlgrammar;



/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TMLExprParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int ABSTRACT = 9;
  /** RegularExpression Id. */
  int BOOLEAN = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int FALSE = 12;
  /** RegularExpression Id. */
  int ASSIGNMENT_NAT = 13;
  /** RegularExpression Id. */
  int ASSIGNMENT_BOOL = 14;
  /** RegularExpression Id. */
  int ASSIGNMENT_QUEUE_NAT = 15;
  /** RegularExpression Id. */
  int GUARD = 16;
  /** RegularExpression Id. */
  int ACTION_NAT = 17;
  /** RegularExpression Id. */
  int ACTION_BOOL = 18;
  /** RegularExpression Id. */
  int ACTION_QUEUE_NAT = 19;
  /** RegularExpression Id. */
  int ACTION_GATE = 20;
  /** RegularExpression Id. */
  int ACTION_GATE_VALUE = 21;
  /** RegularExpression Id. */
  int NAT_ID = 22;
  /** RegularExpression Id. */
  int NAT_NUMERAL = 23;
  /** RegularExpression Id. */
  int NAT_TYPE = 24;
  /** RegularExpression Id. */
  int BOOL_TYPE = 25;
  /** RegularExpression Id. */
  int QUEUE_NAT_TYPE = 26;
  /** RegularExpression Id. */
  int ENQUEUE = 27;
  /** RegularExpression Id. */
  int DEQUEUE = 28;
  /** RegularExpression Id. */
  int EMPTY = 29;
  /** RegularExpression Id. */
  int FIRST = 30;
  /** RegularExpression Id. */
  int LAST = 31;
  /** RegularExpression Id. */
  int DESTROY = 32;
  /** RegularExpression Id. */
  int ASSIGN = 33;
  /** RegularExpression Id. */
  int GT = 34;
  /** RegularExpression Id. */
  int LT = 35;
  /** RegularExpression Id. */
  int BANG = 36;
  /** RegularExpression Id. */
  int TILDE = 37;
  /** RegularExpression Id. */
  int HOOK = 38;
  /** RegularExpression Id. */
  int COLON = 39;
  /** RegularExpression Id. */
  int EQ = 40;
  /** RegularExpression Id. */
  int LE = 41;
  /** RegularExpression Id. */
  int GE = 42;
  /** RegularExpression Id. */
  int NE = 43;
  /** RegularExpression Id. */
  int SC_OR = 44;
  /** RegularExpression Id. */
  int SC_AND = 45;
  /** RegularExpression Id. */
  int INCR = 46;
  /** RegularExpression Id. */
  int DECR = 47;
  /** RegularExpression Id. */
  int PLUS = 48;
  /** RegularExpression Id. */
  int MINUS = 49;
  /** RegularExpression Id. */
  int STAR = 50;
  /** RegularExpression Id. */
  int SLASH = 51;
  /** RegularExpression Id. */
  int BIT_AND = 52;
  /** RegularExpression Id. */
  int BIT_OR = 53;
  /** RegularExpression Id. */
  int XOR = 54;
  /** RegularExpression Id. */
  int REM = 55;
  /** RegularExpression Id. */
  int LSHIFT = 56;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 57;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 58;
  /** RegularExpression Id. */
  int PLUSASSIGN = 59;
  /** RegularExpression Id. */
  int MINUSASSIGN = 60;
  /** RegularExpression Id. */
  int STARASSIGN = 61;
  /** RegularExpression Id. */
  int SLASHASSIGN = 62;
  /** RegularExpression Id. */
  int ANDASSIGN = 63;
  /** RegularExpression Id. */
  int ORASSIGN = 64;
  /** RegularExpression Id. */
  int XORASSIGN = 65;
  /** RegularExpression Id. */
  int REMASSIGN = 66;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 67;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 68;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 69;
  /** RegularExpression Id. */
  int AND = 70;
  /** RegularExpression Id. */
  int OR = 71;
  /** RegularExpression Id. */
  int NOT = 72;
  /** RegularExpression Id. */
  int MIN = 73;
  /** RegularExpression Id. */
  int MAX = 74;
  /** RegularExpression Id. */
  int DIV = 75;
  /** RegularExpression Id. */
  int MOD = 76;
  /** RegularExpression Id. */
  int NATURAL_LITERAL = 77;
  /** RegularExpression Id. */
  int QUEUE_LITERAL = 78;
  /** RegularExpression Id. */
  int IDENTIFIER = 79;
  /** RegularExpression Id. */
  int LETTER = 80;
  /** RegularExpression Id. */
  int DIGIT = 81;
  /** RegularExpression Id. */
  int LPAREN = 82;
  /** RegularExpression Id. */
  int RPAREN = 83;
  /** RegularExpression Id. */
  int COMMA = 84;
  /** RegularExpression Id. */
  int LBRACKET = 85;
  /** RegularExpression Id. */
  int RBRACKET = 86;
  /** RegularExpression Id. */
  int LBRACE = 87;
  /** RegularExpression Id. */
  int RBRACE = 88;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"abstract\"",
    "\"boolean\"",
    "\"true\"",
    "\"false\"",
    "\"assnat\"",
    "\"assbool\"",
    "\"assqueuenat\"",
    "\"guard\"",
    "\"actionnat\"",
    "\"actionbool\"",
    "\"actionqueuenat\"",
    "\"actiongate\"",
    "\"actiongatevalue\"",
    "\"natid\"",
    "\"natnumeral\"",
    "\"nat\"",
    "\"bool\"",
    "\"queue_nat\"",
    "\"Enqueue\"",
    "\"Dequeue\"",
    "\"Empty\"",
    "\"First\"",
    "\"Last\"",
    "\"Destroy\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"min\"",
    "\"max\"",
    "\"div\"",
    "\"mod\"",
    "<NATURAL_LITERAL>",
    "\"Nil\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
  };

}
