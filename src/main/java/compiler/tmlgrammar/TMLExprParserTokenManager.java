/* Copyright or (C) or Copr. GET / ENST, Telecom-Paris, Ludovic Apvrille
 * 
 * ludovic.apvrille AT enst.fr
 * 
 * This software is a computer program whose purpose is to allow the
 * edition of TURTLE analysis, design and deployment diagrams, to
 * allow the generation of RT-LOTOS or Java code from this diagram,
 * and at last to allow the analysis of formal validation traces
 * obtained from external tools, e.g. RTL from LAAS-CNRS and CADP
 * from INRIA Rhone-Alpes.
 * 
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * 
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * 
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * 
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */





/* Generated By:JJTree&JavaCC: Do not edit this line. TMLExprParserTokenManager.java */
package compiler.tmlgrammar;


/** Token Manager. */
public class TMLExprParserTokenManager implements TMLExprParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output.
   * @param ds debug output
   */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fffffe00L) != 0L || (active1 & 0x5fc0L) != 0L)
         {
            jjmatchedKind = 79;
            return 4;
         }
         if ((active0 & 0x4008000000000000L) != 0L)
            return 6;
         return -1;
      case 1:
         if ((active0 & 0x1fffffe00L) != 0L || (active1 & 0x5f40L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 79;
               jjmatchedPos = 1;
            }
            return 4;
         }
         if ((active1 & 0x80L) != 0L)
            return 4;
         return -1;
      case 2:
         if ((active0 & 0x1c00000L) != 0L || (active1 & 0x5f40L) != 0L)
            return 4;
         if ((active0 & 0x1fe3ffe00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 79;
               jjmatchedPos = 2;
            }
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0x82000c00L) != 0L)
            return 4;
         if ((active0 & 0x17cfff200L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 79;
               jjmatchedPos = 3;
            }
            return 4;
         }
         return -1;
      case 4:
         if ((active0 & 0x60411000L) != 0L)
            return 4;
         if ((active0 & 0x11cbee600L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
            return 4;
         }
         return -1;
      case 5:
         if ((active0 & 0x2000L) != 0L)
            return 4;
         if ((active0 & 0x11cbec600L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
            return 4;
         }
         return -1;
      case 6:
         if ((active0 & 0x118004400L) != 0L)
            return 4;
         if ((active0 & 0x4be8200L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 6;
            return 4;
         }
         return -1;
      case 7:
         if ((active0 & 0x200L) != 0L)
            return 4;
         if ((active0 & 0x4be8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
            return 4;
         }
         return -1;
      case 8:
         if ((active0 & 0x4020000L) != 0L)
            return 4;
         if ((active0 & 0xbc8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 8;
            return 4;
         }
         return -1;
      case 9:
         if ((active0 & 0xb40000L) != 0L)
            return 4;
         if ((active0 & 0x88000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 79;
               jjmatchedPos = 9;
            }
            return 4;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000L) != 0L)
            return 4;
         if ((active0 & 0x280000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 10;
            return 4;
         }
         return -1;
      case 11:
         if ((active0 & 0x280000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 11;
            return 4;
         }
         return -1;
      case 12:
         if ((active0 & 0x280000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 12;
            return 4;
         }
         return -1;
      case 13:
         if ((active0 & 0x80000L) != 0L)
            return 4;
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 13;
            return 4;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 37:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 38:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x8000200000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 82);
      case 41:
         return jjStopAtPos(0, 83);
      case 42:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x800400000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 84);
      case 45:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x1000800000000000L, 0x0L);
      case 47:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 39);
      case 60:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x100020000000000L, 0x8L);
      case 61:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 62:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x600040000000000L, 0x30L);
      case 63:
         return jjStopAtPos(0, 38);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x110000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x28000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 91:
         return jjStopAtPos(0, 85);
      case 93:
         return jjStopAtPos(0, 86);
      case 94:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3ee200L, 0x40L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000400L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1600L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1c00000L, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 123:
         return jjStopAtPos(0, 87);
      case 124:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x1L);
      case 125:
         return jjStopAtPos(0, 88);
      case 126:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 43:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      case 45:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 60:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 61:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 62:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x30L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x81c01000L, active1, 0x400L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x3e0000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x110000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x4a00L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000400L, active1, 0x1100L);
      case 114:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 71, 4);
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4010000L, active1, 0L);
      case 124:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(2, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(2, 68);
         break;
      case 62:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 100:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 4);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 4);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 108:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 4);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 110:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 4);
         break;
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000400L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000e200L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 4);
         return jjMoveStringLiteralDfa3_0(active0, 0xfe0000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 118:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 4);
         break;
      case 120:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(3, 69);
         break;
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 4);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x7e0000L, active1, 0L);
      case 108:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x802000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40001000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x120000200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 4);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 4);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 4);
         return jjMoveStringLiteralDfa5_0(active0, 0x1c000400L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x3e4000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000200L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 4);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x808000L);
      case 121:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x600L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x3e0000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x100004000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 4);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x18000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 4);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x300000L);
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 4);
         break;
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x4020000L);
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x4320000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 4);
         break;
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 17, 4);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 4);
         return jjMoveStringLiteralDfa9_0(active0, 0x300000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 18, 4);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 4);
         break;
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(10, 15, 4);
         break;
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(13, 19, 4);
         break;
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(14, 21, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 47)
                     jjAddStates(0, 2);
                  else if (curChar == 36)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  break;
               case 6:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(19, 20);
                  else if (curChar == 47)
                     jjCheckNAddStates(3, 5);
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 1:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar != 36)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 47)
                     jjAddStates(0, 2);
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 8:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 9:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 42)
                     jjCheckNAddStates(6, 8);
                  break;
               case 14:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 15:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 16:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 17:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 18:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 42)
                     jjCheckNAddStates(9, 11);
                  break;
               case 21:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 22:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 23:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(4);
                  break;
               case 7:
                  jjAddStates(3, 5);
                  break;
               case 12:
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
               case 15:
                  jjCheckNAddTwoStates(15, 13);
                  break;
               case 19:
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
               case 22:
                  jjCheckNAddTwoStates(22, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = curChar >> 8;
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(4);
                  break;
               case 7:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 12:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
               case 15:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 19:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
               case 22:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(22, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   6, 17, 18, 7, 8, 10, 13, 14, 16, 20, 21, 23, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
          return (jjbitVec0[i1] & l1) != 0L;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", "\164\162\165\145", "\146\141\154\163\145", 
"\141\163\163\156\141\164", "\141\163\163\142\157\157\154", 
"\141\163\163\161\165\145\165\145\156\141\164", "\147\165\141\162\144", "\141\143\164\151\157\156\156\141\164", 
"\141\143\164\151\157\156\142\157\157\154", "\141\143\164\151\157\156\161\165\145\165\145\156\141\164", 
"\141\143\164\151\157\156\147\141\164\145", "\141\143\164\151\157\156\147\141\164\145\166\141\154\165\145", 
"\156\141\164\151\144", "\156\141\164\156\165\155\145\162\141\154", "\156\141\164", 
"\142\157\157\154", "\161\165\145\165\145\137\156\141\164", "\105\156\161\165\145\165\145", 
"\104\145\161\165\145\165\145", "\105\155\160\164\171", "\106\151\162\163\164", "\114\141\163\164", 
"\104\145\163\164\162\157\171", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", "\53\75", 
"\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", 
"\76\76\75", "\76\76\76\75", "\141\156\144", "\157\162", "\156\157\164", "\155\151\156", 
"\155\141\170", "\144\151\166", "\155\157\144", null, "\116\151\154", null, null, null, "\50", 
"\51", "\54", "\133", "\135", "\173", "\175", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0x1fcffffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1c0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[24];
private final int[] jjstateSet = new int[48];
protected char curChar;
/* Constructor. */
public TMLExprParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/* Constructor. */
public TMLExprParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/* Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 24; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/* Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state
 * @param lexState : lex state
 */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** @return : Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
