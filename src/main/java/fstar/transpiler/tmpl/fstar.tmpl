module @module_name@

open LowStar.BufferOps
open FStar.HyperStack.ST
open C.String
open FStar.Int.Cast
open HardCoding

module I8 = FStar.Int8
module I16 = FStar.Int16
module I32 = FStar.Int32
module I64 = FStar.Int64

module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64

module B = LowStar.Buffer

val @func_name@_body:
  @fstar_func_args@
Stack @struct_ret_name@ (requires fun h0 -> 
    @require_constraint@
  )
  (ensures fun h0 @struct_ret_name@ h1 -> 
    @ensure_constraint@
  )
let @func_name@_body @args@ =
    // TODO: you need to implement this function here

val @func_name@: 
  @fstar_func_args@
  Stack @struct_ret_name@ (requires fun h0 -> 
    @require_constraint_wrap@
  )
  (ensures fun h0 @struct_ret_name@ h1 -> 
    @ensure_constraint@
  )
let @func_name@ @args@ = 
    // meet the preconditions
    if @require_implement@ then
        @func_name@_body @args@
    else
        // TODO: you need to return an error value here if the preconditions are not met
