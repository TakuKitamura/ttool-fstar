module @module_name@

open LowStar.BufferOps
open FStar.HyperStack.ST
open LowStar.Printf
open C.String

module I8 = FStar.Int8
module I16 = FStar.Int16
module I32 = FStar.Int32

module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32

type struct_error = {
  code: I32.t;
  message: C.String.t;
}

let none_error: struct_error = 
{
    code = 0l;
    message = !$"";
}

let ng_error: struct_error = 
{
    code = 1l;
    message = !$"input is invalid range value";
}

type struct_ret = {
    value: @ret_value_type@;
    error: struct_error;
}

let ng_ret: struct_ret = {
    value = @ng_init_ret_value@;
    error = ng_error;
}

let argConstraint @args@ = @require@

let retConstraint @ret_args@ = @ensure@

val @func_name@_body:
  @fstar_func_args@
Stack (ret: @ret_value_type@) (requires fun h0 -> 
    argConstraint @args@
  )
  (ensures fun h0 ret h1 -> 
    retConstraint @ret_args@
  )
let @func_name@_body @args@ = @ok_init_ret_value@

val @func_name@: 
  @fstar_func_args@
  Stack (ret: struct_ret) (requires fun h0 -> 
    true
  )
  (ensures fun h0 ret h1 -> 
    (retConstraint @ret_args@.value && I32.v ret.error.code = 0) || (I32.v ret.error.code > 0)
  )
let @func_name@ @args@ = 
  if (argConstraint @args@) then
    {
        value = @func_name@_body @args@;
        error = none_error;
    }
  else
    ng_ret