/**
 * Simple calculator JJTree file
 * 
 */
options
{
  STATIC = false; // parserクラスのメソッドをstaticにしない
  MULTI = true; // ASTXXXクラスを生成する
  VISITOR = true; // Visitorクラスを生成する
  UNICODE_INPUT = false; // ユニコードで解析を行わない（日本語等を使わない）
}

PARSER_BEGIN(FstarTranspiler)

package fstar.transpiler;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.util.HashMap;
import java.util.Map;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.regex.*;

import java.util.stream.Stream;

import java.util.Iterator;

public class FstarTranspiler
{
  private static String upperCaseFirst(String val) {
    char[] arr = val.toCharArray();
    arr[0] = Character.toUpperCase(arr[0]);
    return new String(arr);
  }

  private static String readAll(String path) throws IOException {
    Path fileName = Paths.get(path);
    // String readFile = Files.readString(fileName);
    // System.out.println(actual);

    return new String(Files.readAllBytes(fileName));
  }

  private static void writeAll(String path, String content) throws IOException {
    FileWriter file = new FileWriter(path);
    PrintWriter pw = new PrintWriter(new BufferedWriter(file));
    pw.println(content);
    pw.close();
  }

  public static void main(String [] args) {

    Map<String, String> transpileSeed = new HashMap<String, String>();

    transpileSeed.put("methodDeclaration", "fstar_uint8 parseDoor(uint32 can_id, uint8 can_dlc, uint8[] data)"); // 関数宣言

    transpileSeed.put("requireRefinementType", "len(data) == 8 &&\ncan_id == 0x19B && can_dlc == 6 && get(data, 0) == 0 && get(data, 1) == 0 && get(data, 2) <= 0x0F"); 
    transpileSeed.put("ensureRefinementType", "(fstar_uint8.error.code == 0 && fstar_uint8.value == get(data, 2)) || fstar_uint8.error.code == 1"); 



    try {
        String result = transpile("/tmp", "./fstar/transpiler/tmpl/", transpileSeed);
    } catch (Exception e) {
        e.printStackTrace();
    }
  }

  public static String transpile(String projectDirPath, String templatesPath, Map<String, String> transpileSeed) throws Exception {

    String function = transpileSeed.get("methodDeclaration");

    // regex match
    Pattern functionPattern = Pattern.compile("^(fstar_(.*)) (.*\\(.*)");

    Matcher functionMatcher = functionPattern.matcher(function);

    String returnFstarTypeName = "";

    if (functionMatcher.find()) {
        returnFstarTypeName = functionMatcher.group(1);
        String returnTypeName = functionMatcher.group(2).replaceAll("_array", "[]");
        String removedFstarTypeName = functionMatcher.group(3);
        function = returnTypeName + " " + removedFstarTypeName;
    } else {
        throw new Exception("require fstar_(???) as return-type");
    }

    InputStream methodDeclarationInput = new ByteArrayInputStream(function.getBytes());
    FstarTranspiler methodDeclarationParser = new FstarTranspiler(methodDeclarationInput);

    MethodDeclaration methodDeclaration = new MethodDeclaration();
    
    FstarTranspilerVisitorImpl visiter = new FstarTranspilerVisitorImpl();

    visiter.updateMethodDeclaration(methodDeclaration);

    Object ret = visiter.filterObjException(
        methodDeclarationParser.MethodDeclarationRoot().jjtAccept(visiter, null)
    );

    InputStream requireRefinementTypeInput = new ByteArrayInputStream(transpileSeed.get("requireRefinementType").getBytes());
    
    FstarTranspiler requireConstraintParser = new FstarTranspiler(requireRefinementTypeInput);

    visiter.updateRefinementType("require");
    visiter.updateRoleType("constraint");

    String requireConstraint = (String)visiter.filterObjException(
        requireConstraintParser.ConditionRoot().jjtAccept(visiter, null)
    );

    InputStream requireImplementInput = new ByteArrayInputStream(transpileSeed.get("requireRefinementType").getBytes());

    FstarTranspiler requireImplementParser = new FstarTranspiler(requireImplementInput);

    visiter.updateRoleType("implement");

    String requireImplement = (String)visiter.filterObjException(
        requireImplementParser.ConditionRoot().jjtAccept(visiter, null)
    );

    InputStream requireRefinementTypeWrapInput = new ByteArrayInputStream(transpileSeed.get("requireRefinementType").getBytes());

    FstarTranspiler requireConstraintWrapParser = new FstarTranspiler(requireRefinementTypeWrapInput);

    visiter.updateRefinementType("require");
    visiter.updateRoleType("constraintWrap");

    String requireConstraintWrap = (String)visiter.filterObjException(
        requireConstraintWrapParser.ConditionRoot().jjtAccept(visiter, null)
    );

    List<String> arrayAccessStatements = visiter.getArrayAccessStatements();

    String arrayAccessStatement = "";

    for (String s : arrayAccessStatements) {
        arrayAccessStatement += s;
    }

    requireImplement = String.format("(%s%s)", arrayAccessStatement, requireImplement);

    // array list
    List<String> arrayVariablesName = new ArrayList<String>();

    String liveCheckGrammar = "";

    for(Map.Entry<String, String> entry : methodDeclaration.args.entrySet()) {
        String variableName = entry.getKey();
        String variableType = entry.getValue();

        // endwith
        if (variableType.endsWith("[]")) {
            liveCheckGrammar += "B.live h0 " + variableName + " /\\\\ ";
        }
    }

    requireConstraint = liveCheckGrammar + requireConstraint;

    requireConstraintWrap = liveCheckGrammar + requireConstraintWrap;

    String ensureRefinementTypeText = transpileSeed.get("ensureRefinementType");

    String baseRegex = "fstar_(u|)int(8|16|32|64)(_array|)";

    ensureRefinementTypeText = ensureRefinementTypeText.replaceAll(baseRegex + ".value", "__ret");

    ensureRefinementTypeText = ensureRefinementTypeText.replaceAll(baseRegex + ".error.code", "__code");

    ensureRefinementTypeText = ensureRefinementTypeText.replaceAll(baseRegex + ".error.message", "__message");

    InputStream ensureRefinementTypeInput = new ByteArrayInputStream(ensureRefinementTypeText.getBytes());
    
    FstarTranspiler ensureRefinementTypeParser = new FstarTranspiler(ensureRefinementTypeInput);

    visiter.updateRefinementType("ensure");
    visiter.updateRoleType("constraint");

    String ensureRefinementType = (String)visiter.filterObjException(
        ensureRefinementTypeParser.ConditionRoot().jjtAccept(visiter, null)
    );

    methodDeclaration = visiter.methodDeclaration;

    String funcName = methodDeclaration.funcName;
    String moduleName = upperCaseFirst(funcName);

    String retFstarType = visiter.fstarTypeMap.get(methodDeclaration.returnType);
    String retValueType = String.format("%s.t", retFstarType);

    List<String> argsName = new ArrayList<String>(methodDeclaration.args.keySet());
    
    // require
    // ensure

    String args = ""; // x, y
    String fstarFuncArgs = ""; // x: I32.t ->\n  y: I32.t ->

    for (int i = 0; i < argsName.size(); i++) {

        String argName = argsName.get(i);
        args += String.format("%s ", argName);

        String argType = String.format("%s.t", visiter.fstarTypeMap.get(methodDeclaration.args.get(argName)));
        fstarFuncArgs += String.format("%s: %s ->\n  ", argName, argType);
    }

    String retArgs = args + "ret";

    String fstarCode = null;
    try {
        fstarCode = readAll(templatesPath + "fstar.tmpl");
    } catch (Exception e) {
        System.out.println(e);
    }

    fstarCode = fstarCode.replaceAll("@module_name@", moduleName); // funcName

    fstarCode = fstarCode.replaceAll("@ret_value_type@", retValueType); // return.type

    fstarCode = fstarCode.replaceAll("@func_name@", funcName); // funcName

    fstarCode = fstarCode.replaceAll("@args@", args); // method.args

    fstarCode = fstarCode.replaceAll("@fstar_func_args@", fstarFuncArgs); // method.args

    fstarCode = fstarCode.replaceAll("@ret_args@", retArgs); // パース結果から構成, ret を最後に持ってくる

    fstarCode = fstarCode.replaceAll("@require_constraint@", requireConstraint); // require 制約記述

    fstarCode = fstarCode.replaceAll("@require_constraint_wrap@", requireConstraintWrap); // wrap関数側のrequire制約記述

    fstarCode = fstarCode.replaceAll("@require_implement@", requireImplement); // require 実装記述

    fstarCode = fstarCode.replaceAll("@ensure_constraint@", ensureRefinementType).replaceAll("__ret", returnFstarTypeName + "." + "value").replaceAll("__code", returnFstarTypeName + ".error.code").replaceAll("__message", returnFstarTypeName + ".error.message"); // ensure 制約記述

    fstarCode = fstarCode.replaceAll("@struct_ret_name@", returnFstarTypeName);

    String dirPath = projectDirPath + "/../fstar";

    Path dp = Paths.get(dirPath);

    String fstarFilePath = String.format("%s/%s", dirPath, String.format("%s.fst", funcName));

    if (Files.exists(dp)) {
        Files.deleteIfExists(Paths.get(fstarFilePath));
    } else {
        Files.createDirectory(dp);
    }

    writeAll(fstarFilePath, fstarCode);

    return "";
  }
}


PARSER_END(FstarTranspiler)

void BooleanLiteral() :
{
  Token t = null;
}
{
  t = < BOOLEAN >
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}

void NullLiteral() :
{
  Token t = null;
}
{
  t = < NULL >
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
< BOOLEAN :
  "true"
  | "false"
>
|
< NULL : "null">
}

TOKEN :
{
< RELATIONAL :
  ">"
  | ">="
  | "<"
  | "<="
>
| < EQUALITY : "==" | "!=" >
| < AND : "&&" >
| < OR : "||" >
| < OPEN_BRACKET : "(" >
| < CLOSE_BRACKET : ")" >
| < MINUS : "-" >
| < LEN : "len" >
| < GET : "get" >
| < LEFT_SQUARE_BRACKET : "[" >
| < RIGHT_SQUARE_BRACKET : "]" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

// F# suffix
// https://docs.microsoft.com/ja-jp/dotnet/fsharp/language-reference/literals

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
  (<MINUS>)* 
    (
        <DECIMAL_LITERAL> (["l","L"])?
        | <HEX_LITERAL> (["l","L"])?
        | <OCTAL_LITERAL> (["l","L"])?
    )
  >
|
  < DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
    (<MINUS>)*
    (
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
    )
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

SimpleNode ConditionRoot() :
{
}
{
  Expr() <EOF>
  {
    return jjtThis;
  }
}

void Expr() :
{
}
{
  ConditionalOrExpression()
}

void ConditionalOrExpression() :
{
  Token t = null;
}
{
    ConditionalAndExpression() (t = < OR > ConditionalAndExpression())*

}

void ConditionalAndExpression() :
{
  Token t = null;
}
{
  EqualityExpression() (t = < AND > EqualityExpression()
  {

  } )*
{}
}

void EqualityExpression() :
{
  Token t = null;
}
{
  RelationalExpression() (t = < EQUALITY > RelationalExpression()
  {
    jjtThis.jjtSetValue(t.image.trim());
  } )*
}

void RelationalExpression() :
{
  Token t = null;
}
{
  ValueOrExpr() ( t = < RELATIONAL > ValueOrExpr()
  {
    jjtThis.jjtSetValue(t.image.trim());
  } )*
}

void ValueOrExpr() :
{
  Token t = null;
}
{
  Literal()
  |
  Variable()  
  |
  < OPEN_BRACKET > Expr() < CLOSE_BRACKET >
  |
  Len()
  |
  ArrayIndex()
}


void Literal() :
{
  Token t = null;
}
{
  Integer()
|
  Floating()
|
  Character()
|
  String()
|
  BooleanLiteral()
|
  NullLiteral()
}

void Variable() :
/*
 * A lookahead of 2 is required below since "Variable" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{Token t = null;}
{
  t = <IDENTIFIER>
  ( LOOKAHEAD(2) "." <IDENTIFIER>
  )*
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}

// 新たに関数を追加する際はこれを拡張する
void Len():
{
    Token t = null;
}
{
  t = < LEN > < OPEN_BRACKET > Variable() < CLOSE_BRACKET >
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}

void ArrayIndex():
{
    Token t = null;
}
{
    t = < GET > < OPEN_BRACKET > Variable() "," (Integer() | Variable()) < CLOSE_BRACKET >
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}


void Integer():
{Token t = null;}
{
  t = <INTEGER_LITERAL>
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}

void Floating():
{Token t = null;}
{
  t = <FLOATING_POINT_LITERAL>
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}

void Character():
{Token t = null;}
{
 t = <CHARACTER_LITERAL>
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}

void String():
{Token t = null;}
{
 t = <STRING_LITERAL>
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}

// Method

SimpleNode MethodDeclarationRoot() :
{
}
{
  MethodDeclaration() <EOF>
  {
    return jjtThis;
  }
}

TOKEN :
{
< VOID_TYPE : "void " >
|
< DATA_TYPE :
  "bool "
  | "char "
  | "string "
  | "byte "
  | "short "
  | "int8 "
  | "int16 "
  | "int32 "
  | "int64 "
  | "uint8 "
  | "uint16 "
  | "uint32 "
  | "uint64 "
  | "long "
  | "float "
  | "double "
>
|
< DATA_TYPE_BRACKET :
  "bool[]"
  | "char[]"
  | "string[]"
  | "byte[]"
  | "short[]"
  | "int8[]"
  | "int16[]"
  | "int32[]"
  | "int64[]"
  | "uint8[]"
  | "uint16[]"
  | "uint32[]"
  | "uint64[]"
  | "long[]"
  | "float[]"
  | "double[]"
>
}


void PrimitiveType() :
{
    Token t = null;
}
{
 t = <DATA_TYPE>
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}

void PrimitiveBlacketType() :
{
    Token t = null;
}
{
 t = <DATA_TYPE_BRACKET>
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}

void Type() :
{}
{
  PrimitiveType() | PrimitiveBlacketType()
}

void VoidType():
{
    Token t = null;
}
{
    t = < VOID_TYPE >
    {
        jjtThis.jjtSetValue(t.toString().trim());
    }
}


void ResultType() :
{
    Token t = null;
}
{
  VoidType() | Type()
}

void ArrayBrackets():
{
    Token t = null;
}
{
    t = "[]" 
    {
        jjtThis.jjtSetValue(t.image.trim());
    }
}

void VariableDeclaratorId() :
{
    Token t = null;
}
{
  t = <IDENTIFIER> (ArrayBrackets()) *
  {
    jjtThis.jjtSetValue(t.image.trim());
  }
}

void FormalParameter() :
{}
{
  Type() VariableDeclaratorId()
}


void FormalParameters() :
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void MethodDeclarator() :
{
    Token t = null;
}
{
  t = <IDENTIFIER>
  {
    jjtThis.jjtSetValue(t.image.trim());
  } FormalParameters()
}


void MethodDeclaration() :
{}
{
  ResultType() MethodDeclarator()
}

