/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./TMLExprParser0.2.jj */
/*@egen*/options {
      //MULTI=true;
      //NODE_DEFAULT_VOID=false;
      STATIC=false;
      //NODE_PREFIX="";
      //NODE_USES_PARSER=true;
}


PARSER_BEGIN(TMLExprParser)

public class TMLExprParser/*@bgen(jjtree)*/implements TMLExprParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTTMLExprParserState jjtree = new JJTTMLExprParserState();

/*@egen*/
  private int x;

  private void print(String elt, String name) {
    System.out.println("Found " + elt + " = " + name);
  }

  public static void main(String args[]) {
    TMLExprParser parser;
    System.out.println("TML Expr Parser Version 0.1:  Reading from standard input . . .");
    parser = new TMLExprParser(System.in);
    try {
      SimpleNode node = parser.CompilationUnit();
      node.dump("node:");
      System.out.println("TML Expr Parser Version 0.1:  expr parsed successfully.");
    } catch (ParseException e) {
      System.out.println("TML Expr Parser Version 0.1: Syntax error.");
    }
  }

}

PARSER_END(TMLExprParser)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < TRUE: "true">
| < FALSE: "false">
| < ASSIGNMENT_NAT: "assnat">
| < ASSIGNMENT_BOOL: "assbool">
| < ASSIGNMENT_QUEUE_NAT: "assqueuenat">
| < GUARD: "guard">
| < ACTION_NAT: "actionnat">
| < ACTION_BOOL: "actionbool">
| < ACTION_QUEUE_NAT: "actionqueuenat">
| < ACTION_GATE: "actiongate">
| < ACTION_GATE_VALUE: "actiongatevalue">
| < NAT_ID: "natid">
| < NAT_NUMERAL: "natnumeral">
}

TOKEN : /* Variable types */
{
  < NAT_TYPE: "nat" >
| < BOOL_TYPE: "bool" >
| < QUEUE_NAT_TYPE: "queue_nat">
}

TOKEN : /* Queue related functions */
{
  <ENQUEUE: "Enqueue">
|
  <DEQUEUE: "Dequeue">
|
  <EMPTY: "Empty">
|
  <FIRST: "First">
|
  <LAST: "Last">
|
  <DESTROY: "Destroy">
}



TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < AND: "and" >
| < OR: "or" >
}

TOKEN : /* FUNCTIONS */
{
< NOT: "not" >
| < MIN: "min" >
| < MAX: "max" > 
| < DIV: "div" >
| < MOD: "mod" >
}

TOKEN : /* LITERALS */
{
  < NATURAL_LITERAL: ("0" | ["1"-"9"] (["0"-"9"])*) >
|
  < QUEUE_LITERAL: "Nil">
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < COMMA: "," >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
}


/***************************************************
 * THE TML Expression LANGUAGE GRAMMAR STARTS HERE *
 ***************************************************/

/*
 * Program structuring syntax follows.
 */

SimpleNode CompilationUnit()       :
{/*@bgen(jjtree) Root */
  SimpleNode jjtn000 = new SimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Root */
  try {
/*@egen*/
  (Expression())
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*
 * Expression syntax follows.
 */

void Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  <ASSIGNMENT_NAT> NatId() AssignmentOperator() NatExtendedExpression()
|
  <ASSIGNMENT_BOOL> BoolId() AssignmentOperator() BoolExtendedExpression()
|
  <ASSIGNMENT_QUEUE_NAT> QueueNatId() AssignmentOperator() QueueNatExtendedExpression()
|
  <GUARD> <LBRACKET> BoolExtendedExpression() <RBRACKET>
|
  <ACTION_NAT> NatExtendedExpression()
|
  <ACTION_BOOL> BoolExtendedExpression()
|
  <ACTION_QUEUE_NAT> QueueNatExtendedExpression()
|
  <ACTION_GATE> ActionGate()
|
  <ACTION_GATE_VALUE> ActionGateValue()
|
  <NAT_ID> NatId()
|
  <NAT_NUMERAL> NaturalLiteral()
|
  BoolExtendedExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssignmentOperator()            :
{/*@bgen(jjtree) NAT_ASSIGN */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_ASSIGN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NAT_ASSIGN */
  try {
/*@egen*/
  (t = "=")/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/*************** NAT ****************/

void NatExtendedExpression() :
{/*@bgen(jjtree) NatExtendedExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTNATEXTENDEDEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NatExtendedExpression */
  try {
/*@egen*/
  LParen() NatExtendedExpression() RParen() [NatOperatorExtendedExpression()]
|
  NatFunction2() [NatOperatorExtendedExpression()]
|
  NaturalLiteral() [NatOperatorExtendedExpression()]
|
  NatId() [NatOperatorExtendedExpression()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



void NatId()        :
{/*@bgen(jjtree) NAT_ID */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_ID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NAT_ID */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void QueueNatId()              :
{/*@bgen(jjtree) QUEUE_NAT_ID */
 SimpleNode jjtn000 = new SimpleNode(JJTQUEUE_NAT_ID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) QUEUE_NAT_ID */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BoolId()         :
{/*@bgen(jjtree) BOOL_ID */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_ID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BOOL_ID */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void NatFunction2() :
{/*@bgen(jjtree) NatFunction2 */
  SimpleNode jjtn000 = new SimpleNode(JJTNATFUNCTION2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NatFunction2 */
  try {
/*@egen*/
  NatFunc2() LParen() NatExtendedExpression() "," NatExtendedExpression() RParen()
|
  QueueNatFunc()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}


void NatFunc2()          :
{/*@bgen(jjtree) NAT_FUNC */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_FUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NAT_FUNC */
 try {
/*@egen*/
 (t = <MIN>
| 
 t = <MAX>)/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void QueueNatFunc()                     :
{/*@bgen(jjtree) NAT_QUEUE_NAT_FUNC */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_QUEUE_NAT_FUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NAT_QUEUE_NAT_FUNC */
  try {
/*@egen*/
  (t = <FIRST> LParen() QueueNatExtendedExpression() RParen()
|
  t = <LAST> LParen() QueueNatExtendedExpression() RParen())/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NatOperatorExtendedExpression() :
{/*@bgen(jjtree) NatOperatorExtendedExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNATOPERATOREXTENDEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NatOperatorExtendedExpression */
  try {
/*@egen*/
  NatOperator() NatExtendedExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void NatOperator()         :
{/*@bgen(jjtree) NAT_OP */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_OP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NAT_OP */
  try {
/*@egen*/
  (t = "+" | t = "-" | t = "*" | t = "/" | t = "%")/*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                    }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



/********* QUEUE_NAT ***************/

void QueueNatExtendedExpression() :
{/*@bgen(jjtree) QueueNatExtendedExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTQUEUENATEXTENDEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) QueueNatExtendedExpression */
  try {
/*@egen*/
  LParen() QueueNatExtendedExpression() RParen()
|
  GetQueueNatFunction()
|
  QueueNatLiteral()
|
  QueueNatId()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void GetQueueNatFunction()                 :
{/*@bgen(jjtree) QUEUE_NAT_FUNC */
 SimpleNode jjtn000 = new SimpleNode(JJTQUEUE_NAT_FUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) QUEUE_NAT_FUNC */
  try {
/*@egen*/
  (t = <ENQUEUE> LParen() NatExtendedExpression() "," QueueNatExtendedExpression() RParen()
|
  t = <DEQUEUE> LParen() QueueNatExtendedExpression() RParen()
|
  t = <DESTROY> LParen() NatExtendedExpression() "," QueueNatExtendedExpression() RParen())/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/********* BOOL ***************/

void BoolExtendedExpression() :
{/*@bgen(jjtree) BoolExtendedExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLEXTENDEDEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BoolExtendedExpression */
  try {
/*@egen*/
  LOOKAHEAD(2000000)
  LParen() BoolExtendedExpression() RParen() [BoolOperatorExtendedExpression()]
|
  LOOKAHEAD(2000000)
  NatExtendedExpression() NatComparisonOperator() NatExtendedExpression() [BoolOperatorExtendedExpression()]
|
  BoolFunction1() [BoolOperatorExtendedExpression()]
|
  BooleanLiteral() [BoolOperatorExtendedExpression()]
|
  Id() [BoolOperatorExtendedExpression()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BoolOperatorExtendedExpression() :
{/*@bgen(jjtree) BoolOperatorExtendedExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLOPERATOREXTENDEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BoolOperatorExtendedExpression */
  try {
/*@egen*/
  BoolOperator() BoolExtendedExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}





/*void BoolExtendedExpression() :
{}
{
  LOOKAHEAD(firstBoolParen())
  firstBoolParen()
|
  LParen() NatExtendedExpression() RParen() NatComparisonOperator() NatExtendedExpression()
|
  BoolFunction1() [BoolOperator() BoolExtendedExpression()]
|
  BooleanLiteral() [BoolOperator() BoolExtendedExpression()]
|
  NaturalLiteral() InNatBoolExtendedExpression1() [BoolOperator() BoolExtendedExpression()]
|
  Id() [BoolExtendedExpressionAfterID()]
}


void firstBoolParen() :
{}
{
  LParen() BoolExtendedExpression() RParen() [BoolOperator() BoolExtendedExpression()]
}

void BoolNatExpressionWithFirstParen() :
{}
{
  LParen() BoolNatExpressionWithFirstParen() RParen() [BoolOperator() BoolExtendedExpression()]
|
  BoolFunction1()
	
}


void InNatBoolExtendedExpression1() : 
{}
{
  NatComparisonOperator() NatExtendedExpression()
|
  NatOperatorExtendedExpression() NatComparisonOperator() NatExtendedExpression()
}


void BoolExtendedExpressionAfterID() :
{}
{
  StrictBoolOperator() BoolExtendedExpression()
|
  StrictNatComparisonOperator() NatExtendedExpression() [BoolOperator() BoolExtendedExpression()]
|
  BoolNatComparisonOperator() BoolExtendedExpressionAfterComparison()
|
  NatOperator() NatExtendedExpression() NatComparisonOperator() NatExtendedExpression() [BoolComparisonOperator() BoolExtendedExpression()]
}

void BoolExtendedExpressionAfterComparison() :
{}
{
  LParen() BoolExtendedExpressionAfterComparison() RParen()
|
  BoolFunction1() [BoolOperator() BoolExtendedExpression()]
| 
  BooleanLiteral() [BoolOperator() BoolExtendedExpression()]
|
  NaturalLiteral() [NatOperatorExtendedExpression() |  BoolOperator() BoolExtendedExpression()]
|
  Id() [BoolExtendedExpressionAfterIDComparisonID()]
}


void BoolExtendedExpressionAfterIDComparisonID() :
{}
{
  StrictBoolOperator() BoolExtendedExpression()
|
  StrictNatComparisonOperator() NatExtendedExpression() [BoolOperator() BoolExtendedExpression()]
|
  BoolNatComparisonOperator() BoolExtendedExpressionAfterComparison()
|
  NatOperatorExtendedExpression() [BoolOperator() BoolExtendedExpression()]
}*/

void BoolFunction1():
{/*@bgen(jjtree) BoolFunction1 */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLFUNCTION1);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BoolFunction1 */
  try {
/*@egen*/
  not() LParen() BoolExtendedExpression() RParen()
|
  EmptyQueueNat() LParen() QueueNatExtendedExpression() RParen()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void not()           :
{/*@bgen(jjtree) BOOL_FUNC */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_FUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BOOL_FUNC */
  try {
/*@egen*/
  t = <NOT>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EmptyQueueNat()                     :
{/*@bgen(jjtree) BOOL_QUEUE_NAT_FUNC */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_QUEUE_NAT_FUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BOOL_QUEUE_NAT_FUNC */
  try {
/*@egen*/
  t = <EMPTY>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Id()    :
{/*@bgen(jjtree) ID */
 SimpleNode jjtn000 = new SimpleNode(JJTID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  t = <IDENTIFIER>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/  {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void LParen()         :
{/*@bgen(jjtree) LPAREN */
 SimpleNode jjtn000 = new SimpleNode(JJTLPAREN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LPAREN */
  try {
/*@egen*/
  (t = <LPAREN>)/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/  {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RParen()         :
{/*@bgen(jjtree) RPAREN */
 SimpleNode jjtn000 = new SimpleNode(JJTRPAREN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) RPAREN */
  try {
/*@egen*/
  (t = <RPAREN>)/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/  {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void BoolComparisonOperator()         :
{/*@bgen(jjtree) BOOL_OP */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_OP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BOOL_OP */
  try {
/*@egen*/
  (t = "==")/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void BoolOperator()         :
{/*@bgen(jjtree) BOOL_OP */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_OP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BOOL_OP */
  try {
/*@egen*/
  (t = "and" | t = "or" | t = "==")/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StrictBoolOperator()         :
{/*@bgen(jjtree) BOOL_OP */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOL_OP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BOOL_OP */
  try {
/*@egen*/
  (t = "and" | t = "or")/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



void NatComparisonOperator()          :
{/*@bgen(jjtree) NAT_COMP */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_COMP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NAT_COMP */
  try {
/*@egen*/
  (t = "<" | t = ">" | t = "==" | t = "=<" | t = ">=")/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                       }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void StrictNatComparisonOperator()          :
{/*@bgen(jjtree) NAT_COMP */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_COMP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NAT_COMP */
  try {
/*@egen*/
  (t = "<" | t = ">")/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BoolNatComparisonOperator()              :
{/*@bgen(jjtree) BOOLNAT_COMP */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLNAT_COMP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BOOLNAT_COMP */
  try {
/*@egen*/
  t = "=="/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ActionGate() :
{/*@bgen(jjtree) ActionGate */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIONGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionGate */
  try {
/*@egen*/
  <LBRACE> NatExtendedExpression() <RBRACE> [ActionGate2()]
|
  <BANG> (Literal() | Id()) [ActionGate2()]
|
  <HOOK> Id() <COLON> VariableType() [ActionGate2()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ActionGate2() :
{/*@bgen(jjtree) ActionGate2 */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIONGATE2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionGate2 */
  try {
/*@egen*/
  <BANG> (Literal() | Id()) [ActionGate2()]
|
  <HOOK> Id() <COLON> VariableType() [ActionGate2()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ActionGateValue() :
{/*@bgen(jjtree) ActionGateValue */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIONGATEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionGateValue */
  try {
/*@egen*/
  <LBRACE> NatExtendedExpression() <RBRACE> [ActionGateValue2()]
|
  <BANG> (Literal() | Id()) [ActionGateValue2()]
|
  <HOOK> ActionGateValue3() [ActionGateValue2()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ActionGateValue2() :
{/*@bgen(jjtree) ActionGateValue2 */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIONGATEVALUE2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionGateValue2 */
  try {
/*@egen*/
  <BANG> (Literal() | Id()) [ActionGateValue2()]
|
  <HOOK> ActionGateValue3() [ActionGateValue2()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ActionGateValue3() :
{/*@bgen(jjtree) ActionGateValue3 */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIONGATEVALUE3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionGateValue3 */
  try {
/*@egen*/
  NaturalLiteral() <COLON> <NAT_TYPE>
|
  BooleanLiteral() <COLON> <BOOL_TYPE>
|
  Id() <COLON> VariableType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}




void VariableType()       :
{/*@bgen(jjtree) TYPE */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) TYPE */
  try {
/*@egen*/
  t = <BOOL_TYPE>
|
  t = <NAT_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NaturalLiteral()            :
{/*@bgen(jjtree) NAT_VALUE */
 SimpleNode jjtn000 = new SimpleNode(JJTNAT_VALUE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NAT_VALUE */
 try {
/*@egen*/
 t = <NATURAL_LITERAL>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/  {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Literal() :
{/*@bgen(jjtree) Literal */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  NaturalLiteral()
|
  BooleanLiteral()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void QueueNatLiteral() :
{/*@bgen(jjtree) QueueNatLiteral */
 SimpleNode jjtn000 = new SimpleNode(JJTQUEUENATLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) QueueNatLiteral */
  try {
/*@egen*/
  (t = <QUEUE_LITERAL>)/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BooleanLiteral() :
{/*@bgen(jjtree) BooleanLiteral */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BooleanLiteral */
 try {
/*@egen*/
 (t = <TRUE>
|
  t = <FALSE>)/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.setInfo(""+t.kind,t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
