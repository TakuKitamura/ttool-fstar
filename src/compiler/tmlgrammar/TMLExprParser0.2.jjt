options {
      //MULTI=true;
      //NODE_DEFAULT_VOID=false;
      STATIC=false;
      //NODE_PREFIX="";
      //NODE_USES_PARSER=true;
}


PARSER_BEGIN(TMLExprParser)

package compiler.tmlgrammar;

public class TMLExprParser {
  private int x;

  private void print(String elt, String name) {
    System.out.println("Found " + elt + " = " + name);
  }

  public static void main(String args[]) {
    TMLExprParser parser;
    System.out.println("TML Expr Parser Version 0.1:  Reading from standard input . . .");
    parser = new TMLExprParser(System.in);
    try {
      SimpleNode node = parser.CompilationUnit();
      node.dump("node:");
      System.out.println("TML Expr Parser Version 0.1:  expr parsed successfully.");
    } catch (ParseException e) {
      System.out.println("TML Expr Parser Version 0.1: Syntax error.");
    }
  }

}

PARSER_END(TMLExprParser)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < TRUE: "true">
| < FALSE: "false">
| < ASSIGNMENT_NAT: "assnat">
| < ASSIGNMENT_BOOL: "assbool">
| < ASSIGNMENT_QUEUE_NAT: "assqueuenat">
| < GUARD: "guard">
| < ACTION_NAT: "actionnat">
| < ACTION_BOOL: "actionbool">
| < ACTION_QUEUE_NAT: "actionqueuenat">
| < ACTION_GATE: "actiongate">
| < ACTION_GATE_VALUE: "actiongatevalue">
| < NAT_ID: "natid">
| < NAT_NUMERAL: "natnumeral">
}

TOKEN : /* Variable types */
{
  < NAT_TYPE: "nat" >
| < BOOL_TYPE: "bool" >
| < QUEUE_NAT_TYPE: "queue_nat">
}

TOKEN : /* Queue related functions */
{
  <ENQUEUE: "Enqueue">
|
  <DEQUEUE: "Dequeue">
|
  <EMPTY: "Empty">
|
  <FIRST: "First">
|
  <LAST: "Last">
|
  <DESTROY: "Destroy">
}



TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < AND: "and" >
| < OR: "or" >
}

TOKEN : /* FUNCTIONS */
{
< NOT: "not" >
| < MIN: "min" >
| < MAX: "max" > 
| < DIV: "div" >
| < MOD: "mod" >
}

TOKEN : /* LITERALS */
{
  < NATURAL_LITERAL: ("0" | ["1"-"9"] (["0"-"9"])*) >
|
  < QUEUE_LITERAL: "Nil">
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < COMMA: "," >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
}


/***************************************************
 * THE TML Expression LANGUAGE GRAMMAR STARTS HERE *
 ***************************************************/

/*
 * Program structuring syntax follows.
 */

SimpleNode CompilationUnit() #Root :
{}
{
  (Expression())
  <EOF>
  { return jjtThis; }
}

/*
 * Expression syntax follows.
 */

void Expression() :
{}
{
  <ASSIGNMENT_NAT> NatId() AssignmentOperator() NatExtendedExpression()
|
  <ASSIGNMENT_BOOL> BoolId() AssignmentOperator() BoolExtendedExpression()
|
  <ASSIGNMENT_QUEUE_NAT> QueueNatId() AssignmentOperator() QueueNatExtendedExpression()
|
  <GUARD> <LBRACKET> BoolExtendedExpression() <RBRACKET>
|
  <ACTION_NAT> NatExtendedExpression()
|
  <ACTION_BOOL> BoolExtendedExpression()
|
  <ACTION_QUEUE_NAT> QueueNatExtendedExpression()
|
  <ACTION_GATE> ActionGate()
|
  <ACTION_GATE_VALUE> ActionGateValue()
|
  <NAT_ID> NatId()
|
  <NAT_NUMERAL> NaturalLiteral()
|
  BoolExtendedExpression()
}

void AssignmentOperator() #NAT_ASSIGN:
{Token t;}
{
  (t = "=") {jjtThis.setInfo(""+t.kind,t.image);}
}


/*************** NAT ****************/

void NatExtendedExpression() :
{Token t;}
{
  LParen() NatExtendedExpression() RParen() [NatOperatorExtendedExpression()]
|
  NatFunction2() [NatOperatorExtendedExpression()]
|
  NaturalLiteral() [NatOperatorExtendedExpression()]
|
  NatId() [NatOperatorExtendedExpression()]
}



void NatId() #NAT_ID:
{Token t;}
{
  t=<IDENTIFIER> {jjtThis.setInfo(""+t.kind,t.image);}
}

void QueueNatId() #QUEUE_NAT_ID:
{Token t;}
{
  t=<IDENTIFIER> {jjtThis.setInfo(""+t.kind,t.image);}
}

void BoolId() #BOOL_ID:
{Token t;}
{
  t=<IDENTIFIER> {jjtThis.setInfo(""+t.kind,t.image);}
}


void NatFunction2() :
{}
{
  NatFunc2() LParen() NatExtendedExpression() "," NatExtendedExpression() RParen()
|
  QueueNatFunc() 
}


void NatFunc2() #NAT_FUNC:
{Token t;}
{
 (t = <MIN>
| 
 t = <MAX>) {jjtThis.setInfo(""+t.kind,t.image);}
}

void QueueNatFunc() #NAT_QUEUE_NAT_FUNC :
{Token t;}
{
  (t = <FIRST> LParen() QueueNatExtendedExpression() RParen()
|
  t = <LAST> LParen() QueueNatExtendedExpression() RParen()) 
  {jjtThis.setInfo(""+t.kind,t.image);}
}

void NatOperatorExtendedExpression() :
{}
{
  NatOperator() NatExtendedExpression()
}


void NatOperator() #NAT_OP :
{Token t;}
{
  (t = "+" | t = "-" | t = "*" | t = "/" | t = "%") {jjtThis.setInfo(""+t.kind,t.image);}
}



/********* QUEUE_NAT ***************/

void QueueNatExtendedExpression() :
{}
{
  LParen() QueueNatExtendedExpression() RParen()
|
  GetQueueNatFunction()
|
  QueueNatLiteral()
|
  QueueNatId()
}

void GetQueueNatFunction() #QUEUE_NAT_FUNC :
{Token t;}
{
  (t = <ENQUEUE> LParen() NatExtendedExpression() "," QueueNatExtendedExpression() RParen()
|
  t = <DEQUEUE> LParen() QueueNatExtendedExpression() RParen()
|
  t = <DESTROY> LParen() NatExtendedExpression() "," QueueNatExtendedExpression() RParen())
  {jjtThis.setInfo(""+t.kind,t.image);}
}


/********* BOOL ***************/

void BoolExtendedExpression() :
{Token t;}
{
  LOOKAHEAD(200000)
  NatExtendedExpression() NatComparisonOperator() NatExtendedExpression() [BoolOperatorExtendedExpression()]
|
  LOOKAHEAD(2000000)
  LParen() BoolExtendedExpression() RParen() [BoolOperatorExtendedExpression()]
|
  LOOKAHEAD(2000000)
  BooleanLiteral() [BoolOperatorExtendedExpression()]
|
  LOOKAHEAD(2000000)
  Id()
|
  BoolFunction1() [BoolOperatorExtendedExpression()]
}


void BoolOperatorExtendedExpression() :
{}
{
  BoolOperator() BoolExtendedExpression()
}





/*void BoolExtendedExpression() :
{}
{
  LOOKAHEAD(20000)
  Id() [BoolExtendedExpressionAfterID()]
|
  LOOKAHEAD(firstBoolParen())
  firstBoolParen()
|
  LParen() NatExtendedExpression() RParen() NatComparisonOperator() NatExtendedExpression()
|
  BoolFunction1() [BoolOperator() BoolExtendedExpression()]
|
  BooleanLiteral() [BoolOperator() BoolExtendedExpression()]
|
  NaturalLiteral() InNatBoolExtendedExpression1() [BoolOperator() BoolExtendedExpression()]
}


void firstBoolParen() :
{}
{
  LParen() BoolExtendedExpression() RParen() [BoolOperator() BoolExtendedExpression()]
}

void BoolNatExpressionWithFirstParen() :
{}
{
  LParen() BoolNatExpressionWithFirstParen() RParen() [BoolOperator() BoolExtendedExpression()]
|
  BoolFunction1()
	
}


void InNatBoolExtendedExpression1() : 
{}
{
  NatComparisonOperator() NatExtendedExpression()
|
  NatOperatorExtendedExpression() NatComparisonOperator() NatExtendedExpression()
}


void BoolExtendedExpressionAfterID() :
{}
{
  StrictBoolOperator() BoolExtendedExpression()
|
  StrictNatComparisonOperator() NatExtendedExpression() [BoolOperator() BoolExtendedExpression()]
|
  BoolNatComparisonOperator() BoolExtendedExpressionAfterComparison()
|
  NatOperator() NatExtendedExpression() NatComparisonOperator() NatExtendedExpression() [BoolComparisonOperator() BoolExtendedExpression()]
}

void BoolExtendedExpressionAfterComparison() :
{}
{
  LParen() BoolExtendedExpressionAfterComparison() RParen()
|
  BoolFunction1() [BoolOperator() BoolExtendedExpression()]
| 
  BooleanLiteral() [BoolOperator() BoolExtendedExpression()]
|
  NaturalLiteral() [NatOperatorExtendedExpression() |  BoolOperator() BoolExtendedExpression()]
|
  Id() [BoolExtendedExpressionAfterIDComparisonID()]
}


void BoolExtendedExpressionAfterIDComparisonID() :
{}
{
  StrictBoolOperator() BoolExtendedExpression()
|
  StrictNatComparisonOperator() NatExtendedExpression() [BoolOperator() BoolExtendedExpression()]
|
  BoolNatComparisonOperator() BoolExtendedExpressionAfterComparison()
|
  NatOperatorExtendedExpression() [BoolOperator() BoolExtendedExpression()]
}*/

void BoolFunction1():
{Token t;}
{
  not() LParen() BoolExtendedExpression() RParen()
|
  EmptyQueueNat() LParen() QueueNatExtendedExpression() RParen()
}

void not() #BOOL_FUNC:
{Token t;}
{
  t = <NOT> {jjtThis.setInfo(""+t.kind,t.image);}
}

void EmptyQueueNat() #BOOL_QUEUE_NAT_FUNC:
{Token t;}
{
  t = <EMPTY> {jjtThis.setInfo(""+t.kind,t.image);}
}

void Id() #ID:
{Token t;}
{
  t = <IDENTIFIER>  {jjtThis.setInfo(""+t.kind,t.image);}
}


void LParen() #LPAREN :
{Token t;}
{
  (t = <LPAREN>)  {jjtThis.setInfo(""+t.kind,t.image);}
}

void RParen() #RPAREN :
{Token t;}
{
  (t = <RPAREN>)  {jjtThis.setInfo(""+t.kind,t.image);}
}


void BoolComparisonOperator() #BOOL_OP:
{Token t;}
{
  (t = "==")  {jjtThis.setInfo(""+t.kind,t.image);}
}


void BoolOperator() #BOOL_OP:
{Token t;}
{
  (t = "and" | t = "or" | t = "==") {jjtThis.setInfo(""+t.kind,t.image);}
}

void StrictBoolOperator() #BOOL_OP:
{Token t;}
{
  (t = "and" | t = "or") {jjtThis.setInfo(""+t.kind,t.image);}
}



void NatComparisonOperator() #NAT_COMP:
{Token t;}
{
  (t = "<" | t = ">" | t = "==" | t = "<=" | t = ">=") {jjtThis.setInfo(""+t.kind,t.image);}
}


void StrictNatComparisonOperator() #NAT_COMP:
{Token t;}
{
  (t = "<" | t = ">") {jjtThis.setInfo(""+t.kind,t.image);}
}

void BoolNatComparisonOperator() #BOOLNAT_COMP:
{Token t;}
{
  t = "==" {jjtThis.setInfo(""+t.kind,t.image);}
}

void ActionGate() :
{}
{
  <LBRACE> NatExtendedExpression() <RBRACE> [ActionGate2()]
|
  <BANG> (Literal() | Id()) [ActionGate2()]
|
  <HOOK> Id() <COLON> VariableType() [ActionGate2()]
}

void ActionGate2() :
{}
{
  <BANG> (Literal() | Id()) [ActionGate2()]
|
  <HOOK> Id() <COLON> VariableType() [ActionGate2()]
}

void ActionGateValue() :
{}
{
  <LBRACE> NatExtendedExpression() <RBRACE> [ActionGateValue2()]
|
  <BANG> (Literal() | Id()) [ActionGateValue2()]
|
  <HOOK> ActionGateValue3() [ActionGateValue2()]
}

void ActionGateValue2() :
{}
{
  <BANG> (Literal() | Id()) [ActionGateValue2()]
|
  <HOOK> ActionGateValue3() [ActionGateValue2()]
}

void ActionGateValue3() :
{}
{
  NaturalLiteral() <COLON> <NAT_TYPE>
|
  BooleanLiteral() <COLON> <BOOL_TYPE>
|
  Id() <COLON> VariableType()
}




void VariableType() #TYPE :
{Token t;}
{
  t = <BOOL_TYPE>
|
  t = <NAT_TYPE>
}

void NaturalLiteral() #NAT_VALUE :
{Token t;}
{
 t = <NATURAL_LITERAL>  {jjtThis.setInfo(""+t.kind,t.image);}
}

void Literal() :
{}
{
  NaturalLiteral()
|
  BooleanLiteral()
}

void QueueNatLiteral() :
{Token t;}
{
  (t = <QUEUE_LITERAL>) {jjtThis.setInfo(""+t.kind,t.image);}
}

void BooleanLiteral() :
{Token t;}
{
 (t = <TRUE>
|
  t = <FALSE>) {jjtThis.setInfo(""+t.kind,t.image);}
}
