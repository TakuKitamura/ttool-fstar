Process:
(
    {1}!
    {2}in(chControl, chControlData: bitstring);
    {3}let call__num: bitstring = chControlDec(chControlData) in
    {4}if (call__num = call__System__0) then
    0
) | (
    {5}!
    {6}in(chControl, chControlData_135: bitstring);
    {7}let (call__num_136: bitstring,Bob__m__data__1_137: bitstring,Bob__m2__data__1_138: bitstring,Bob__sk__data__1_139: bitstring,Bob__receivedData__1_140: bitstring) = chControlDec(chControlData_135) in
    {8}if (call__num_136 = call__Bob__0) then
    {9}event enteringState__Bob__waitingForMessage;
    {10}event authenticity__Bob__m2__data__waitingForMessage(Bob__m2__data__1_138);
    {11}in(ch, privChData: bitstring);
    {12}let Bob__m2__data__2_141: bitstring = privChDec(privChData) in
    {13}event enteringState__Bob__messageDecrypt;
    {14}let Bob__m__data__2_142: bitstring = sdecrypt(Bob__m2__data__2_141,Bob__sk__data__1_139) in
    {15}event enteringState__Bob__messageDecrypted;
    {16}event authenticity__Bob__m__data__messageDecrypted(Bob__m__data__2_142);
    {17}let Bob__receivedData__2_143: bitstring = Bob__m__data__2_142 in
    {18}event enteringState__Bob__SecretDataReceived
) | (
    {19}!
    {20}in(chControl, chControlData_144: bitstring);
    {21}let (call__num_145: bitstring,Alice__secretData__1_146: bitstring,Alice__m__data__1_147: bitstring,Alice__m1__data__1_148: bitstring,Alice__sk__data__1_149: bitstring) = chControlDec(chControlData_144) in
    {22}if (call__num_145 = call__Alice__0) then
    {23}event enteringState__Alice__makingMessage;
    {24}let Alice__m__data__2_150: bitstring = Alice__secretData__1_146 in
    {25}let Alice__m1__data__2_151: bitstring = sencrypt(Alice__m__data__2_150,Alice__sk__data__1_149) in
    {26}event enteringState__Alice__sendingMessage;
    {27}event authenticity__Alice__m1__data__sendingMessage(Alice__m1__data__2_151);
    {28}event authenticity__Alice__m__data__sendingMessage(Alice__m__data__2_150);
    {29}out(ch, privChEnc(Alice__m1__data__2_151))
) | (
    {30}!
    {31}new Alice__sk__data: bitstring;
    {32}let Bob__sk__data: bitstring = Alice__sk__data in
    (
        {33}out(chControl, chControlEnc(call__System__0))
    ) | (
        {34}new Bob__m__data: bitstring;
        {35}new Bob__m2__data: bitstring;
        {36}new Bob__receivedData: bitstring;
        {37}out(chControl, chControlEnc((call__Bob__0,Bob__m__data,Bob__m2__data,Bob__sk__data,Bob__receivedData)))
    ) | (
        {38}new Alice__secretData: bitstring;
        {39}new Alice__m__data: bitstring;
        {40}new Alice__m1__data: bitstring;
        {41}out(chControl, chControlEnc((call__Alice__0,Alice__secretData,Alice__m__data,Alice__m1__data,Alice__sk__data)))
    )
)

-- Query inj-event(authenticity__Bob__m__data__messageDecrypted(dummyM)) ==> inj-event(authenticity__Alice__m__data__sendingMessage(dummyM))
Completing...
Starting query inj-event(authenticity__Bob__m__data__messageDecrypted(dummyM)) ==> inj-event(authenticity__Alice__m__data__sendingMessage(dummyM))
goal reachable: begin(authenticity__Alice__m__data__sendingMessage(Alice__secretData[!1 = @sid_683]), chControlData_144 = chControlEnc((call__Alice__0[],Alice__secretData[!1 = @sid_683],Alice__m__data[!1 = @sid_683],Alice__m1__data[!1 = @sid_683],Alice__sk__data[!1 = @sid_683])), @sid_452 = @sid_684, @occ28 = @occ_cst) -> end(endsid_685,authenticity__Bob__m__data__messageDecrypted(Alice__secretData[!1 = @sid_683]))
Abbreviations:
Alice_ = Alice__secretData[!1 = @sid_699]
Alice__sk_ = Alice__sk__data[!1 = @sid_699]
Alice__m_ = Alice__m__data[!1 = @sid_699]
Alice__m1_ = Alice__m1__data[!1 = @sid_699]
Bob__m_ = Bob__m__data[!1 = @sid_699]
Bob__m2_ = Bob__m2__data[!1 = @sid_699]
Bob_ = Bob__receivedData[!1 = @sid_699]

1. The message chControlEnc((call__Bob__0[],Bob__m_,Bob__m2_,Alice__sk_,Bob_)) may be sent to the attacker at output {37}.
attacker(chControlEnc((call__Bob__0[],Bob__m_,Bob__m2_,Alice__sk_,Bob_))).

2. The message chControlEnc((call__Alice__0[],Alice_,Alice__m_,Alice__m1_,Alice__sk_)) may be sent to the attacker at output {41}.
attacker(chControlEnc((call__Alice__0[],Alice_,Alice__m_,Alice__m1_,Alice__sk_))).

3. The message chControlEnc((call__Alice__0[],Alice_,Alice__m_,Alice__m1_,Alice__sk_)) that the attacker may have by 2 may be received at input {20}.
The event authenticity__Alice__m__data__sendingMessage(Alice_) (with environment chControlData_144 = chControlEnc((call__Alice__0[],Alice_,Alice__m_,Alice__m1_,Alice__sk_)), @sid_452 = @sid_698, @occ28 = @occ_cst) may be executed at {28}.
So the message privChEnc(sencrypt(Alice_,Alice__sk_)) may be sent to the attacker at output {29}.
attacker(privChEnc(sencrypt(Alice_,Alice__sk_))).

4. The message chControlEnc((call__Bob__0[],Bob__m_,Bob__m2_,Alice__sk_,Bob_)) that the attacker may have by 1 may be received at input {6}.
The message privChEnc(sencrypt(Alice_,Alice__sk_)) that the attacker may have by 3 may be received at input {11}.
So event authenticity__Bob__m__data__messageDecrypted(Alice_) may be executed at {16} in session endsid_706.
end(endsid_706,authenticity__Bob__m__data__messageDecrypted(Alice_)).


A more detailed output of the traces is available with
  set traceDisplay = long.

new Alice__sk__data creating Alice__sk__data_713 at {31} in copy a_708

new Alice__secretData creating Alice__secretData_710 at {38} in copy a_708

new Alice__m__data creating Alice__m__data_711 at {39} in copy a_708

new Alice__m1__data creating Alice__m1__data_712 at {40} in copy a_708

out(chControl, chControlEnc((call__Alice__0,Alice__secretData_710,Alice__m__data_711,Alice__m1__data_712,Alice__sk__data_713))) at {41} in copy a_708

new Bob__m__data creating Bob__m__data_714 at {34} in copy a_708

new Bob__m2__data creating Bob__m2__data_715 at {35} in copy a_708

new Bob__receivedData creating Bob__receivedData_716 at {36} in copy a_708

out(chControl, chControlEnc((call__Bob__0,Bob__m__data_714,Bob__m2__data_715,Alice__sk__data_713,Bob__receivedData_716))) at {37} in copy a_708

out(chControl, chControlEnc(call__System__0)) at {33} in copy a_708

in(chControl, chControlEnc((call__Bob__0,Bob__m__data_714,Bob__m2__data_715,Alice__sk__data_713,Bob__receivedData_716))) at {6} in copy a

event(enteringState__Bob__waitingForMessage) at {9} in copy a

event(authenticity__Bob__m2__data__waitingForMessage(Bob__m2__data_715)) at {10} in copy a

in(chControl, chControlEnc((call__Alice__0,Alice__secretData_710,Alice__m__data_711,Alice__m1__data_712,Alice__sk__data_713))) at {20} in copy a_709

event(enteringState__Alice__makingMessage) at {23} in copy a_709

event(enteringState__Alice__sendingMessage) at {26} in copy a_709

event(authenticity__Alice__m1__data__sendingMessage(sencrypt(Alice__secretData_710,Alice__sk__data_713))) at {27} in copy a_709

event(authenticity__Alice__m__data__sendingMessage(Alice__secretData_710)) at {28} in copy a_709

out(ch, privChEnc(sencrypt(Alice__secretData_710,Alice__sk__data_713))) at {29} in copy a_709

in(ch, privChEnc(sencrypt(Alice__secretData_710,Alice__sk__data_713))) at {11} in copy a

event(enteringState__Bob__messageDecrypt) at {13} in copy a

event(enteringState__Bob__messageDecrypted) at {15} in copy a

event(authenticity__Bob__m__data__messageDecrypted(Alice__secretData_710)) at {16} in copy a

The event authenticity__Bob__m__data__messageDecrypted(Alice__secretData_710) is executed in session a.
A trace has been found.
I am now trying to reconstruct a trace that falsifies injectivity.
Could not find a trace that contradicts injectivity.
RESULT inj-event(authenticity__Bob__m__data__messageDecrypted(dummyM)) ==> inj-event(authenticity__Alice__m__data__sendingMessage(dummyM)) cannot be proved.
RESULT (but event(authenticity__Bob__m__data__messageDecrypted(dummyM_686)) ==> event(authenticity__Alice__m__data__sendingMessage(dummyM_686)) is true.)
-- Query inj-event(authenticity__Bob__m2__data__waitingForMessage(dummyM_1075)) ==> inj-event(authenticity__Alice__m1__data__sendingMessage(dummyM_1075))
Completing...
Starting query inj-event(authenticity__Bob__m2__data__waitingForMessage(dummyM_1075)) ==> inj-event(authenticity__Alice__m1__data__sendingMessage(dummyM_1075))
goal reachable: end(endsid_1551,authenticity__Bob__m2__data__waitingForMessage(Bob__m2__data[!1 = @sid_1552]))
Abbreviations:
Bob__m2__1563 = Bob__m2__data[!1 = @sid_1555]
Bob__m__1564 = Bob__m__data[!1 = @sid_1555]
Alice__sk__1565 = Alice__sk__data[!1 = @sid_1555]
Bob__1566 = Bob__receivedData[!1 = @sid_1555]

1. The message chControlEnc((call__Bob__0[],Bob__m__1564,Bob__m2__1563,Alice__sk__1565,Bob__1566)) may be sent to the attacker at output {37}.
attacker(chControlEnc((call__Bob__0[],Bob__m__1564,Bob__m2__1563,Alice__sk__1565,Bob__1566))).

2. The message chControlEnc((call__Bob__0[],Bob__m__1564,Bob__m2__1563,Alice__sk__1565,Bob__1566)) that the attacker may have by 1 may be received at input {6}.
So event authenticity__Bob__m2__data__waitingForMessage(Bob__m2__1563) may be executed at {10} in session endsid_1561.
end(endsid_1561,authenticity__Bob__m2__data__waitingForMessage(Bob__m2__1563)).


A more detailed output of the traces is available with
  set traceDisplay = long.

new Alice__sk__data creating Alice__sk__data_1571 at {31} in copy a_1568

new Alice__secretData creating Alice__secretData_1575 at {38} in copy a_1568

new Alice__m__data creating Alice__m__data_1576 at {39} in copy a_1568

new Alice__m1__data creating Alice__m1__data_1577 at {40} in copy a_1568

out(chControl, chControlEnc((call__Alice__0,Alice__secretData_1575,Alice__m__data_1576,Alice__m1__data_1577,Alice__sk__data_1571))) at {41} in copy a_1568

new Bob__m__data creating Bob__m__data_1570 at {34} in copy a_1568

new Bob__m2__data creating Bob__m2__data_1569 at {35} in copy a_1568

new Bob__receivedData creating Bob__receivedData_1572 at {36} in copy a_1568

out(chControl, chControlEnc((call__Bob__0,Bob__m__data_1570,Bob__m2__data_1569,Alice__sk__data_1571,Bob__receivedData_1572))) at {37} in copy a_1568

out(chControl, chControlEnc(call__System__0)) at {33} in copy a_1568

in(chControl, chControlEnc((call__Bob__0,Bob__m__data_1570,Bob__m2__data_1569,Alice__sk__data_1571,Bob__receivedData_1572))) at {6} in copy a_1567

event(enteringState__Bob__waitingForMessage) at {9} in copy a_1567

event(authenticity__Bob__m2__data__waitingForMessage(Bob__m2__data_1569)) at {10} in copy a_1567

The event authenticity__Bob__m2__data__waitingForMessage(Bob__m2__data_1569) is executed in session a_1567.
A trace has been found.
RESULT inj-event(authenticity__Bob__m2__data__waitingForMessage(dummyM_1075)) ==> inj-event(authenticity__Alice__m1__data__sendingMessage(dummyM_1075)) is false.
RESULT (even event(authenticity__Bob__m2__data__waitingForMessage(dummyM_1553)) ==> event(authenticity__Alice__m1__data__sendingMessage(dummyM_1553)) is false.)
-- Query not event(enteringState__Alice__makingMessage)
Completing...
Starting query not event(enteringState__Alice__makingMessage)
goal reachable: end(enteringState__Alice__makingMessage)
Abbreviations:
Alice__2076 = Alice__secretData[!1 = @sid_2070]
Alice__m__2077 = Alice__m__data[!1 = @sid_2070]
Alice__m1__2078 = Alice__m1__data[!1 = @sid_2070]
Alice__sk__2079 = Alice__sk__data[!1 = @sid_2070]

1. The message chControlEnc((call__Alice__0[],Alice__2076,Alice__m__2077,Alice__m1__2078,Alice__sk__2079)) may be sent to the attacker at output {41}.
attacker(chControlEnc((call__Alice__0[],Alice__2076,Alice__m__2077,Alice__m1__2078,Alice__sk__2079))).

2. The message chControlEnc((call__Alice__0[],Alice__2076,Alice__m__2077,Alice__m1__2078,Alice__sk__2079)) that the attacker may have by 1 may be received at input {20}.
So event enteringState__Alice__makingMessage may be executed at {23}.
end(enteringState__Alice__makingMessage).


A more detailed output of the traces is available with
  set traceDisplay = long.

new Alice__sk__data creating Alice__sk__data_2085 at {31} in copy a_2080

new Alice__secretData creating Alice__secretData_2082 at {38} in copy a_2080

new Alice__m__data creating Alice__m__data_2083 at {39} in copy a_2080

new Alice__m1__data creating Alice__m1__data_2084 at {40} in copy a_2080

out(chControl, chControlEnc((call__Alice__0,Alice__secretData_2082,Alice__m__data_2083,Alice__m1__data_2084,Alice__sk__data_2085))) at {41} in copy a_2080

new Bob__m__data creating Bob__m__data_2088 at {34} in copy a_2080

new Bob__m2__data creating Bob__m2__data_2089 at {35} in copy a_2080

new Bob__receivedData creating Bob__receivedData_2090 at {36} in copy a_2080

out(chControl, chControlEnc((call__Bob__0,Bob__m__data_2088,Bob__m2__data_2089,Alice__sk__data_2085,Bob__receivedData_2090))) at {37} in copy a_2080

out(chControl, chControlEnc(call__System__0)) at {33} in copy a_2080

in(chControl, chControlEnc((call__Alice__0,Alice__secretData_2082,Alice__m__data_2083,Alice__m1__data_2084,Alice__sk__data_2085))) at {20} in copy a_2081

event(enteringState__Alice__makingMessage) at {23} in copy a_2081

The event enteringState__Alice__makingMessage is executed.
A trace has been found.
RESULT not event(enteringState__Alice__makingMessage) is false.
-- Query not event(enteringState__Alice__sendingMessage)
Completing...
Starting query not event(enteringState__Alice__sendingMessage)
goal reachable: end(enteringState__Alice__sendingMessage)
Abbreviations:
Alice__2583 = Alice__secretData[!1 = @sid_2577]
Alice__m__2584 = Alice__m__data[!1 = @sid_2577]
Alice__m1__2585 = Alice__m1__data[!1 = @sid_2577]
Alice__sk__2586 = Alice__sk__data[!1 = @sid_2577]

1. The message chControlEnc((call__Alice__0[],Alice__2583,Alice__m__2584,Alice__m1__2585,Alice__sk__2586)) may be sent to the attacker at output {41}.
attacker(chControlEnc((call__Alice__0[],Alice__2583,Alice__m__2584,Alice__m1__2585,Alice__sk__2586))).

2. The message chControlEnc((call__Alice__0[],Alice__2583,Alice__m__2584,Alice__m1__2585,Alice__sk__2586)) that the attacker may have by 1 may be received at input {20}.
So event enteringState__Alice__sendingMessage may be executed at {26}.
end(enteringState__Alice__sendingMessage).


A more detailed output of the traces is available with
  set traceDisplay = long.

new Alice__sk__data creating Alice__sk__data_2592 at {31} in copy a_2587

new Alice__secretData creating Alice__secretData_2589 at {38} in copy a_2587

new Alice__m__data creating Alice__m__data_2590 at {39} in copy a_2587

new Alice__m1__data creating Alice__m1__data_2591 at {40} in copy a_2587

out(chControl, chControlEnc((call__Alice__0,Alice__secretData_2589,Alice__m__data_2590,Alice__m1__data_2591,Alice__sk__data_2592))) at {41} in copy a_2587

new Bob__m__data creating Bob__m__data_2595 at {34} in copy a_2587

new Bob__m2__data creating Bob__m2__data_2596 at {35} in copy a_2587

new Bob__receivedData creating Bob__receivedData_2597 at {36} in copy a_2587

out(chControl, chControlEnc((call__Bob__0,Bob__m__data_2595,Bob__m2__data_2596,Alice__sk__data_2592,Bob__receivedData_2597))) at {37} in copy a_2587

out(chControl, chControlEnc(call__System__0)) at {33} in copy a_2587

in(chControl, chControlEnc((call__Alice__0,Alice__secretData_2589,Alice__m__data_2590,Alice__m1__data_2591,Alice__sk__data_2592))) at {20} in copy a_2588

event(enteringState__Alice__makingMessage) at {23} in copy a_2588

event(enteringState__Alice__sendingMessage) at {26} in copy a_2588

The event enteringState__Alice__sendingMessage is executed.
A trace has been found.
RESULT not event(enteringState__Alice__sendingMessage) is false.
-- Query not event(enteringState__Bob__waitingForMessage)
Completing...
Starting query not event(enteringState__Bob__waitingForMessage)
goal reachable: end(enteringState__Bob__waitingForMessage)
Abbreviations:
Bob__m__3091 = Bob__m__data[!1 = @sid_3085]
Bob__m2__3092 = Bob__m2__data[!1 = @sid_3085]
Alice__sk__3093 = Alice__sk__data[!1 = @sid_3085]
Bob__3094 = Bob__receivedData[!1 = @sid_3085]

1. The message chControlEnc((call__Bob__0[],Bob__m__3091,Bob__m2__3092,Alice__sk__3093,Bob__3094)) may be sent to the attacker at output {37}.
attacker(chControlEnc((call__Bob__0[],Bob__m__3091,Bob__m2__3092,Alice__sk__3093,Bob__3094))).

2. The message chControlEnc((call__Bob__0[],Bob__m__3091,Bob__m2__3092,Alice__sk__3093,Bob__3094)) that the attacker may have by 1 may be received at input {6}.
So event enteringState__Bob__waitingForMessage may be executed at {9}.
end(enteringState__Bob__waitingForMessage).


A more detailed output of the traces is available with
  set traceDisplay = long.

new Alice__sk__data creating Alice__sk__data_3099 at {31} in copy a_3095

new Alice__secretData creating Alice__secretData_3103 at {38} in copy a_3095

new Alice__m__data creating Alice__m__data_3104 at {39} in copy a_3095

new Alice__m1__data creating Alice__m1__data_3105 at {40} in copy a_3095

out(chControl, chControlEnc((call__Alice__0,Alice__secretData_3103,Alice__m__data_3104,Alice__m1__data_3105,Alice__sk__data_3099))) at {41} in copy a_3095

new Bob__m__data creating Bob__m__data_3097 at {34} in copy a_3095

new Bob__m2__data creating Bob__m2__data_3098 at {35} in copy a_3095

new Bob__receivedData creating Bob__receivedData_3100 at {36} in copy a_3095

out(chControl, chControlEnc((call__Bob__0,Bob__m__data_3097,Bob__m2__data_3098,Alice__sk__data_3099,Bob__receivedData_3100))) at {37} in copy a_3095

out(chControl, chControlEnc(call__System__0)) at {33} in copy a_3095

in(chControl, chControlEnc((call__Bob__0,Bob__m__data_3097,Bob__m2__data_3098,Alice__sk__data_3099,Bob__receivedData_3100))) at {6} in copy a_3096

event(enteringState__Bob__waitingForMessage) at {9} in copy a_3096

The event enteringState__Bob__waitingForMessage is executed.
A trace has been found.
RESULT not event(enteringState__Bob__waitingForMessage) is false.
-- Query not event(enteringState__Bob__messageDecrypt)
Completing...
Starting query not event(enteringState__Bob__messageDecrypt)
goal reachable: end(enteringState__Bob__messageDecrypt)
Abbreviations:
Alice__3613 = Alice__secretData[!1 = @sid_3600]
Alice__sk__3614 = Alice__sk__data[!1 = @sid_3600]
Alice__m__3615 = Alice__m__data[!1 = @sid_3600]
Alice__m1__3616 = Alice__m1__data[!1 = @sid_3600]
Bob__m__3617 = Bob__m__data[!1 = @sid_3606]
Bob__m2__3618 = Bob__m2__data[!1 = @sid_3606]
Alice__sk__3619 = Alice__sk__data[!1 = @sid_3606]
Bob__3620 = Bob__receivedData[!1 = @sid_3606]

1. The message chControlEnc((call__Bob__0[],Bob__m__3617,Bob__m2__3618,Alice__sk__3619,Bob__3620)) may be sent to the attacker at output {37}.
attacker(chControlEnc((call__Bob__0[],Bob__m__3617,Bob__m2__3618,Alice__sk__3619,Bob__3620))).

2. The message chControlEnc((call__Alice__0[],Alice__3613,Alice__m__3615,Alice__m1__3616,Alice__sk__3614)) may be sent to the attacker at output {41}.
attacker(chControlEnc((call__Alice__0[],Alice__3613,Alice__m__3615,Alice__m1__3616,Alice__sk__3614))).

3. The message chControlEnc((call__Alice__0[],Alice__3613,Alice__m__3615,Alice__m1__3616,Alice__sk__3614)) that the attacker may have by 2 may be received at input {20}.
So the message privChEnc(sencrypt(Alice__3613,Alice__sk__3614)) may be sent to the attacker at output {29}.
attacker(privChEnc(sencrypt(Alice__3613,Alice__sk__3614))).

4. The message chControlEnc((call__Bob__0[],Bob__m__3617,Bob__m2__3618,Alice__sk__3619,Bob__3620)) that the attacker may have by 1 may be received at input {6}.
The message privChEnc(sencrypt(Alice__3613,Alice__sk__3614)) that the attacker may have by 3 may be received at input {11}.
So event enteringState__Bob__messageDecrypt may be executed at {13}.
end(enteringState__Bob__messageDecrypt).


A more detailed output of the traces is available with
  set traceDisplay = long.

new Alice__sk__data creating Alice__sk__data_3631 at {31} in copy a_3623

new Alice__secretData creating Alice__secretData_3636 at {38} in copy a_3623

new Alice__m__data creating Alice__m__data_3637 at {39} in copy a_3623

new Alice__m1__data creating Alice__m1__data_3638 at {40} in copy a_3623

out(chControl, chControlEnc((call__Alice__0,Alice__secretData_3636,Alice__m__data_3637,Alice__m1__data_3638,Alice__sk__data_3631))) at {41} in copy a_3623

new Bob__m__data creating Bob__m__data_3629 at {34} in copy a_3623

new Bob__m2__data creating Bob__m2__data_3630 at {35} in copy a_3623

new Bob__receivedData creating Bob__receivedData_3632 at {36} in copy a_3623

out(chControl, chControlEnc((call__Bob__0,Bob__m__data_3629,Bob__m2__data_3630,Alice__sk__data_3631,Bob__receivedData_3632))) at {37} in copy a_3623

out(chControl, chControlEnc(call__System__0)) at {33} in copy a_3623

new Alice__sk__data creating Alice__sk__data_3628 at {31} in copy a_3621

new Alice__secretData creating Alice__secretData_3625 at {38} in copy a_3621

new Alice__m__data creating Alice__m__data_3626 at {39} in copy a_3621

new Alice__m1__data creating Alice__m1__data_3627 at {40} in copy a_3621

out(chControl, chControlEnc((call__Alice__0,Alice__secretData_3625,Alice__m__data_3626,Alice__m1__data_3627,Alice__sk__data_3628))) at {41} in copy a_3621

new Bob__m__data creating Bob__m__data_3639 at {34} in copy a_3621

new Bob__m2__data creating Bob__m2__data_3640 at {35} in copy a_3621

new Bob__receivedData creating Bob__receivedData_3641 at {36} in copy a_3621

out(chControl, chControlEnc((call__Bob__0,Bob__m__data_3639,Bob__m2__data_3640,Alice__sk__data_3628,Bob__receivedData_3641))) at {37} in copy a_3621

out(chControl, chControlEnc(call__System__0)) at {33} in copy a_3621

in(chControl, chControlEnc((call__Bob__0,Bob__m__data_3629,Bob__m2__data_3630,Alice__sk__data_3631,Bob__receivedData_3632))) at {6} in copy a_3624

event(enteringState__Bob__waitingForMessage) at {9} in copy a_3624

event(authenticity__Bob__m2__data__waitingForMessage(Bob__m2__data_3630)) at {10} in copy a_3624

in(chControl, chControlEnc((call__Alice__0,Alice__secretData_3625,Alice__m__data_3626,Alice__m1__data_3627,Alice__sk__data_3628))) at {20} in copy a_3622

event(enteringState__Alice__makingMessage) at {23} in copy a_3622

event(enteringState__Alice__sendingMessage) at {26} in copy a_3622

event(authenticity__Alice__m1__data__sendingMessage(sencrypt(Alice__secretData_3625,Alice__sk__data_3628))) at {27} in copy a_3622

event(authenticity__Alice__m__data__sendingMessage(Alice__secretData_3625)) at {28} in copy a_3622

out(ch, privChEnc(sencrypt(Alice__secretData_3625,Alice__sk__data_3628))) at {29} in copy a_3622

in(ch, privChEnc(sencrypt(Alice__secretData_3625,Alice__sk__data_3628))) at {11} in copy a_3624

event(enteringState__Bob__messageDecrypt) at {13} in copy a_3624

The event enteringState__Bob__messageDecrypt is executed.
A trace has been found.
RESULT not event(enteringState__Bob__messageDecrypt) is false.
-- Query not event(enteringState__Bob__SecretDataReceived)
Completing...
Starting query not event(enteringState__Bob__SecretDataReceived)
goal reachable: end(enteringState__Bob__SecretDataReceived)
Abbreviations:
Alice__4183 = Alice__secretData[!1 = @sid_4176]
Alice__sk__4184 = Alice__sk__data[!1 = @sid_4176]
Alice__m__4185 = Alice__m__data[!1 = @sid_4176]
Alice__m1__4186 = Alice__m1__data[!1 = @sid_4176]
Bob__m__4187 = Bob__m__data[!1 = @sid_4176]
Bob__m2__4188 = Bob__m2__data[!1 = @sid_4176]
Bob__4189 = Bob__receivedData[!1 = @sid_4176]

1. The message chControlEnc((call__Bob__0[],Bob__m__4187,Bob__m2__4188,Alice__sk__4184,Bob__4189)) may be sent to the attacker at output {37}.
attacker(chControlEnc((call__Bob__0[],Bob__m__4187,Bob__m2__4188,Alice__sk__4184,Bob__4189))).

2. The message chControlEnc((call__Alice__0[],Alice__4183,Alice__m__4185,Alice__m1__4186,Alice__sk__4184)) may be sent to the attacker at output {41}.
attacker(chControlEnc((call__Alice__0[],Alice__4183,Alice__m__4185,Alice__m1__4186,Alice__sk__4184))).

3. The message chControlEnc((call__Alice__0[],Alice__4183,Alice__m__4185,Alice__m1__4186,Alice__sk__4184)) that the attacker may have by 2 may be received at input {20}.
So the message privChEnc(sencrypt(Alice__4183,Alice__sk__4184)) may be sent to the attacker at output {29}.
attacker(privChEnc(sencrypt(Alice__4183,Alice__sk__4184))).

4. The message chControlEnc((call__Bob__0[],Bob__m__4187,Bob__m2__4188,Alice__sk__4184,Bob__4189)) that the attacker may have by 1 may be received at input {6}.
The message privChEnc(sencrypt(Alice__4183,Alice__sk__4184)) that the attacker may have by 3 may be received at input {11}.
So event enteringState__Bob__SecretDataReceived may be executed at {18}.
end(enteringState__Bob__SecretDataReceived).


A more detailed output of the traces is available with
  set traceDisplay = long.

new Alice__sk__data creating Alice__sk__data_4196 at {31} in copy a_4190

new Alice__secretData creating Alice__secretData_4193 at {38} in copy a_4190

new Alice__m__data creating Alice__m__data_4194 at {39} in copy a_4190

new Alice__m1__data creating Alice__m1__data_4195 at {40} in copy a_4190

out(chControl, chControlEnc((call__Alice__0,Alice__secretData_4193,Alice__m__data_4194,Alice__m1__data_4195,Alice__sk__data_4196))) at {41} in copy a_4190

new Bob__m__data creating Bob__m__data_4197 at {34} in copy a_4190

new Bob__m2__data creating Bob__m2__data_4198 at {35} in copy a_4190

new Bob__receivedData creating Bob__receivedData_4199 at {36} in copy a_4190

out(chControl, chControlEnc((call__Bob__0,Bob__m__data_4197,Bob__m2__data_4198,Alice__sk__data_4196,Bob__receivedData_4199))) at {37} in copy a_4190

out(chControl, chControlEnc(call__System__0)) at {33} in copy a_4190

in(chControl, chControlEnc((call__Bob__0,Bob__m__data_4197,Bob__m2__data_4198,Alice__sk__data_4196,Bob__receivedData_4199))) at {6} in copy a_4192

event(enteringState__Bob__waitingForMessage) at {9} in copy a_4192

event(authenticity__Bob__m2__data__waitingForMessage(Bob__m2__data_4198)) at {10} in copy a_4192

in(chControl, chControlEnc((call__Alice__0,Alice__secretData_4193,Alice__m__data_4194,Alice__m1__data_4195,Alice__sk__data_4196))) at {20} in copy a_4191

event(enteringState__Alice__makingMessage) at {23} in copy a_4191

event(enteringState__Alice__sendingMessage) at {26} in copy a_4191

event(authenticity__Alice__m1__data__sendingMessage(sencrypt(Alice__secretData_4193,Alice__sk__data_4196))) at {27} in copy a_4191

event(authenticity__Alice__m__data__sendingMessage(Alice__secretData_4193)) at {28} in copy a_4191

out(ch, privChEnc(sencrypt(Alice__secretData_4193,Alice__sk__data_4196))) at {29} in copy a_4191

in(ch, privChEnc(sencrypt(Alice__secretData_4193,Alice__sk__data_4196))) at {11} in copy a_4192

event(enteringState__Bob__messageDecrypt) at {13} in copy a_4192

event(enteringState__Bob__messageDecrypted) at {15} in copy a_4192

event(authenticity__Bob__m__data__messageDecrypted(Alice__secretData_4193)) at {16} in copy a_4192

event(enteringState__Bob__SecretDataReceived) at {18} in copy a_4192

The event enteringState__Bob__SecretDataReceived is executed.
A trace has been found.
RESULT not event(enteringState__Bob__SecretDataReceived) is false.
-- Query not event(enteringState__Bob__messageDecrypted)
Completing...
Starting query not event(enteringState__Bob__messageDecrypted)
goal reachable: end(enteringState__Bob__messageDecrypted)
Abbreviations:
Alice__4746 = Alice__secretData[!1 = @sid_4739]
Alice__sk__4747 = Alice__sk__data[!1 = @sid_4739]
Alice__m__4748 = Alice__m__data[!1 = @sid_4739]
Alice__m1__4749 = Alice__m1__data[!1 = @sid_4739]
Bob__m__4750 = Bob__m__data[!1 = @sid_4739]
Bob__m2__4751 = Bob__m2__data[!1 = @sid_4739]
Bob__4752 = Bob__receivedData[!1 = @sid_4739]

1. The message chControlEnc((call__Bob__0[],Bob__m__4750,Bob__m2__4751,Alice__sk__4747,Bob__4752)) may be sent to the attacker at output {37}.
attacker(chControlEnc((call__Bob__0[],Bob__m__4750,Bob__m2__4751,Alice__sk__4747,Bob__4752))).

2. The message chControlEnc((call__Alice__0[],Alice__4746,Alice__m__4748,Alice__m1__4749,Alice__sk__4747)) may be sent to the attacker at output {41}.
attacker(chControlEnc((call__Alice__0[],Alice__4746,Alice__m__4748,Alice__m1__4749,Alice__sk__4747))).

3. The message chControlEnc((call__Alice__0[],Alice__4746,Alice__m__4748,Alice__m1__4749,Alice__sk__4747)) that the attacker may have by 2 may be received at input {20}.
So the message privChEnc(sencrypt(Alice__4746,Alice__sk__4747)) may be sent to the attacker at output {29}.
attacker(privChEnc(sencrypt(Alice__4746,Alice__sk__4747))).

4. The message chControlEnc((call__Bob__0[],Bob__m__4750,Bob__m2__4751,Alice__sk__4747,Bob__4752)) that the attacker may have by 1 may be received at input {6}.
The message privChEnc(sencrypt(Alice__4746,Alice__sk__4747)) that the attacker may have by 3 may be received at input {11}.
So event enteringState__Bob__messageDecrypted may be executed at {15}.
end(enteringState__Bob__messageDecrypted).


A more detailed output of the traces is available with
  set traceDisplay = long.

new Alice__sk__data creating Alice__sk__data_4759 at {31} in copy a_4753

new Alice__secretData creating Alice__secretData_4756 at {38} in copy a_4753

new Alice__m__data creating Alice__m__data_4757 at {39} in copy a_4753

new Alice__m1__data creating Alice__m1__data_4758 at {40} in copy a_4753

out(chControl, chControlEnc((call__Alice__0,Alice__secretData_4756,Alice__m__data_4757,Alice__m1__data_4758,Alice__sk__data_4759))) at {41} in copy a_4753

new Bob__m__data creating Bob__m__data_4760 at {34} in copy a_4753

new Bob__m2__data creating Bob__m2__data_4761 at {35} in copy a_4753

new Bob__receivedData creating Bob__receivedData_4762 at {36} in copy a_4753

out(chControl, chControlEnc((call__Bob__0,Bob__m__data_4760,Bob__m2__data_4761,Alice__sk__data_4759,Bob__receivedData_4762))) at {37} in copy a_4753

out(chControl, chControlEnc(call__System__0)) at {33} in copy a_4753

in(chControl, chControlEnc((call__Bob__0,Bob__m__data_4760,Bob__m2__data_4761,Alice__sk__data_4759,Bob__receivedData_4762))) at {6} in copy a_4755

event(enteringState__Bob__waitingForMessage) at {9} in copy a_4755

event(authenticity__Bob__m2__data__waitingForMessage(Bob__m2__data_4761)) at {10} in copy a_4755

in(chControl, chControlEnc((call__Alice__0,Alice__secretData_4756,Alice__m__data_4757,Alice__m1__data_4758,Alice__sk__data_4759))) at {20} in copy a_4754

event(enteringState__Alice__makingMessage) at {23} in copy a_4754

event(enteringState__Alice__sendingMessage) at {26} in copy a_4754

event(authenticity__Alice__m1__data__sendingMessage(sencrypt(Alice__secretData_4756,Alice__sk__data_4759))) at {27} in copy a_4754

event(authenticity__Alice__m__data__sendingMessage(Alice__secretData_4756)) at {28} in copy a_4754

out(ch, privChEnc(sencrypt(Alice__secretData_4756,Alice__sk__data_4759))) at {29} in copy a_4754

in(ch, privChEnc(sencrypt(Alice__secretData_4756,Alice__sk__data_4759))) at {11} in copy a_4755

event(enteringState__Bob__messageDecrypt) at {13} in copy a_4755

event(enteringState__Bob__messageDecrypted) at {15} in copy a_4755

The event enteringState__Bob__messageDecrypted is executed.
A trace has been found.
RESULT not event(enteringState__Bob__messageDecrypted) is false.
-- Query not attacker(Alice__secretData[!1 = v_4835])
Completing...
Starting query not attacker(Alice__secretData[!1 = v_4835])
RESULT not attacker(Alice__secretData[!1 = v_4835]) is true.
