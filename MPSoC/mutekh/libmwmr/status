mwmr_pthread.c:	struct mwmr_status_s *state = fifo->status;
mwmr_pthread.c:    assert ( len % fifo->width == 0 );
mwmr_pthread.c:        memcpy( ptr, fifo->buffer + state->rptr, fifo->width );
mwmr_pthread.c:        state->rptr += fifo->width;
mwmr_pthread.c:        if ( state->rptr == fifo->gdepth )
mwmr_pthread.c:        state->usage -= fifo->width;
mwmr_pthread.c:		assert( state->rptr < fifo->gdepth );
mwmr_pthread.c:		assert( state->usage <= fifo->gdepth );
mwmr_pthread.c:        got += fifo->width;
mwmr_pthread.c:        ptr += fifo->width;
mwmr_pthread.c:	struct mwmr_status_s *state = fifo->status;
mwmr_pthread.c:    assert ( len % fifo->width == 0 );
mwmr_pthread.c:        while ( state->usage == fifo->gdepth ) {
mwmr_pthread.c:        memcpy( fifo->buffer + state->wptr, ptr, fifo->width );
mwmr_pthread.c:        state->wptr += fifo->width;
mwmr_pthread.c:        if ( state->wptr == fifo->gdepth )
mwmr_pthread.c:        state->usage += fifo->width;
mwmr_pthread.c:		assert( state->wptr < fifo->gdepth );
mwmr_pthread.c:		assert( state->usage <= fifo->gdepth );
mwmr_pthread.c:        put += fifo->width;
mwmr_pthread.c:        ptr += fifo->width;
mwmr_pthread.c:	struct mwmr_status_s *state = fifo->status;
mwmr_pthread.c:    assert ( len % fifo->width == 0 );
mwmr_pthread.c:        memcpy( ptr, fifo->buffer + state->rptr, fifo->width );
mwmr_pthread.c:        state->rptr += fifo->width;
mwmr_pthread.c:        if ( state->rptr == fifo->gdepth )
mwmr_pthread.c:        state->usage -= fifo->width;
mwmr_pthread.c:        got += fifo->width;
mwmr_pthread.c:        ptr += fifo->width;
mwmr_pthread.c:	struct mwmr_status_s *state = fifo->status;
mwmr_pthread.c:    assert( len % fifo->width == 0 );
mwmr_pthread.c:        if ( state->usage == fifo->gdepth ) {
mwmr_pthread.c:        memcpy( fifo->buffer + state->wptr, ptr, fifo->width );
mwmr_pthread.c:        state->wptr += fifo->width;
mwmr_pthread.c:        if ( state->wptr == fifo->gdepth )
mwmr_pthread.c:        state->usage += fifo->width;
mwmr_pthread.c:        put += fifo->width;
mwmr_pthread.c:        ptr += fifo->width;
mwmr_pthread.c:	struct mwmr_status_s *state = fifo->status;
mwmr_soclib.c:	while (*((uint32_t *)fifo->lock) != 0) {
mwmr_soclib.c:	while (cpu_atomic_bit_testset((atomic_int_t*)&fifo->status->lock, 0)) {
mwmr_soclib.c:		srl_sched_wait_eq_le(&fifo->status->lock, 0);
mwmr_soclib.c:	while (cpu_atomic_bit_testset((atomic_int_t*)&fifo->status->lock, 0)) {
mwmr_soclib.c:	cpu_atomic_bit_waitset((atomic_int_t*)&fifo->status->lock, 0);
mwmr_soclib.c:	return !!cpu_mem_read_32((uintptr_t)fifo->lock);
mwmr_soclib.c:	return cpu_atomic_bit_testset((atomic_int_t*)&fifo->status->lock, 0);
mwmr_soclib.c:	cpu_mem_write_32((uintptr_t)fifo->lock, 0);
mwmr_soclib.c:    cpu_mem_write_32((uintptr_t)&fifo->status->lock, 0);
mwmr_soclib.c:	struct mwmr_status_s *fstatus = fifo->status;
mwmr_soclib.c://	srl_log_printf(NONE,"%s %d %d %d/%d\n", fifo->name, status->rptr, status->wptr, status->usage, fifo->gdepth);
mwmr_soclib.c:    struct mwmr_status_s *fstatus = fifo->status;
mwmr_soclib.c:	size_t tot = lensw/fifo->width;
mwmr_soclib.c:		while ( status.usage < fifo->width ) {
mwmr_soclib.c:			srl_sched_wait_ge_le(&fifo->status->usage, fifo->width);
mwmr_soclib.c:        while ( lensw && status.usage >= fifo->width ) {
mwmr_soclib.c:                len = (fifo->gdepth - status.rptr);
mwmr_soclib.c:			sptr = &((uint8_t*)fifo->buffer)[status.rptr];
mwmr_soclib.c:            if ( status.rptr == fifo->gdepth )
mwmr_soclib.c:	fifo->n_read += tot;
mwmr_soclib.c:	fifo->time_read += cpu_cycle_count()-access_begin;
mwmr_soclib.c:	size_t tot = lensw/fifo->width;
mwmr_soclib.c:        while (status.usage >= fifo->gdepth) {
mwmr_soclib.c:			srl_sched_wait_le_le(&fifo->status->usage, fifo->gdepth-fifo->width);
mwmr_soclib.c:        while ( lensw && status.usage < fifo->gdepth ) {
mwmr_soclib.c:                len = (fifo->gdepth - status.wptr);
mwmr_soclib.c:                len = fifo->gdepth - status.usage;
mwmr_soclib.c:			dptr = &((uint8_t*)fifo->buffer)[status.wptr];
mwmr_soclib.c:            if ( status.wptr == fifo->gdepth )
mwmr_soclib.c:	fifo->n_write += tot;
mwmr_soclib.c:	fifo->time_write += cpu_cycle_count()-access_begin;
mwmr_soclib.c:	while ( lensw && status.usage >= fifo->width ) {
mwmr_soclib.c:			len = (fifo->gdepth - status.rptr);
mwmr_soclib.c:		sptr = &((uint8_t*)fifo->buffer)[status.rptr];
mwmr_soclib.c:		if ( status.rptr == fifo->gdepth )
mwmr_soclib.c:	fifo->n_read += done/fifo->width;
mwmr_soclib.c:	fifo->time_read += cpu_cycle_count()-access_begin;
mwmr_soclib.c:	while ( lensw && status.usage < fifo->gdepth ) {
mwmr_soclib.c:			len = (fifo->gdepth - status.wptr);
mwmr_soclib.c:			len = fifo->gdepth - status.usage;
mwmr_soclib.c:		dptr = &((uint8_t*)fifo->buffer)[status.wptr];
mwmr_soclib.c:		if ( status.wptr == fifo->gdepth )
mwmr_soclib.c:	fifo->n_write += done/fifo->width;
mwmr_soclib.c:	fifo->time_write += cpu_cycle_count()-access_begin;
mwmr_soclib_lockfree.c:		   fifo, fifo->status, _ptr, (int)lensw);
mwmr_soclib_lockfree.c:	const uint8_t *buffer = fifo->buffer;
mwmr_soclib_lockfree.c:	const size_t gdepth = fifo->gdepth;
mwmr_soclib_lockfree.c:			fifo->status, buffer, gdepth,
mwmr_soclib_lockfree.c:			srl_sched_wait_ne_cpu(&fifo->status->data_size, 0);
mwmr_soclib_lockfree.c:		   fifo, fifo->status, _ptr, (int)lensw);
mwmr_soclib_lockfree.c:	uint8_t *buffer = fifo->buffer;
mwmr_soclib_lockfree.c:	const size_t gdepth = fifo->gdepth;
mwmr_soclib_lockfree.c:			fifo->status, buffer, gdepth,
mwmr_soclib_lockfree.c:			srl_sched_wait_ne_cpu(&fifo->status->free_size, 0);
mwmr_soclib_lockfree.c:		   fifo, fifo->status, _ptr, (int)lensw);
mwmr_soclib_lockfree.c:	const uint8_t *buffer = fifo->buffer;
mwmr_soclib_lockfree.c:	const size_t gdepth = fifo->gdepth;
mwmr_soclib_lockfree.c:		fifo->status, buffer, gdepth,
mwmr_soclib_lockfree.c:		   fifo, fifo->status, _ptr, (int)lensw);
mwmr_soclib_lockfree.c:	uint8_t *buffer = fifo->buffer;
mwmr_soclib_lockfree.c:	const size_t gdepth = fifo->gdepth;
mwmr_soclib_lockfree.c:		fifo->status, buffer, gdepth,
