MEMORY
{
 mem_boot (RXAL) : ORIGIN = 0xffffff80, LENGTH = 0x80
    mem_rom (RXAL): ORIGIN = 0x60000000, LENGTH = 0x00100000
    mem_ram (RWAL): ORIGIN = 0x7f000000, LENGTH = 0x01000000
vci_locks (RWAL): ORIGIN = 0xC0200000, LENGTH = 0x100
    uram0 (RWAL): ORIGIN = 0x10280000, LENGTH = 0x80000
    cram0 (RWAL): ORIGIN = 0x10000000, LENGTH = 0x80000
}
SECTIONS
{
 .boot : {
  KEEP(*(.boot*))
 } > mem_boot
 .text : {
  *(.init*)
  *(.text*)
  *(.glue*)
  *(.got2)
 } > mem_rom
 .rodata : {
   *(.rodata*)
            . = ALIGN(4);
   global_driver_registry = .;
   KEEP(*(.drivers))
   global_driver_registry_end = .;
 } > mem_rom
 .excep : {
  . = ALIGN(0x00010000);
  __exception_base_ptr = .;
  KEEP(*(.excep*))
 } > mem_rom
 .cpudata 0x0 : { *(.cpudata*) } AT> mem_rom
 __cpu_data_start = LOADADDR(.cpudata);
 __cpu_data_end = LOADADDR(.cpudata) + SIZEOF(.cpudata);
 .contextdata 0x0 : { *(.contextdata*) } AT> mem_rom
 __context_data_start = LOADADDR(.contextdata);
 __context_data_end = LOADADDR(.contextdata) + SIZEOF(.contextdata);
 .data : {
  __data_start = ABSOLUTE(.);
  *(.sdata*)
  *(.data*)
  *(.cpuarchdata*)
 } > mem_ram AT>mem_rom
 .channel0 : {*(section_channel0)} > uram0
 .channel1 : {*(section_channel1)} > uram0
 .channel2 : {*(section_channel2)} > uram0
 .channel3 : {*(section_channel3)} > uram0
 .channel4 : {*(section_channel4)} > uram0
 .channel5 : {*(section_channel5)} > uram0
 .channel6 : {*(section_channel6)} > uram0
 .channel7 : {*(section_channel7)} > uram0
 .channel8 : {*(section_channel8)} > uram0
 .channel9 : {*(section_channel9)} > uram0
 .channel10 : {*(section_channel10)} > uram0
 .channel11 : {*(section_channel11)} > uram0
 .channel12 : {*(section_channel12)} > uram0
 .channel13 : {*(section_channel13)} > uram0
 .channel14 : {*(section_channel14)} > uram0
 .channel15 : {*(section_channel15)} > uram0
 .channel16 : {*(section_channel16)} > uram0
 .channel17 : {*(section_channel17)} > uram0
 .channel18 : {*(section_channel18)} > uram0
 .channel19 : {*(section_channel19)} > uram0
 .channel20 : {*(section_channel20)} > uram0
 .channel21 : {*(section_channel21)} > uram0
 .channel22 : {*(section_channel22)} > uram0
 .channel23 : {*(section_channel23)} > uram0
 .channel24 : {*(section_channel24)} > uram0
 .channel25 : {*(section_channel25)} > uram0
 .channel26 : {*(section_channel26)} > uram0
 .channel27 : {*(section_channel27)} > uram0
 .channel28 : {*(section_channel28)} > uram0
 .lock0 : { *(section_lock0)} > uram0
 .lock1 : { *(section_lock1)} > uram0
 .lock2 : { *(section_lock2)} > uram0
 .lock3 : { *(section_lock3)} > uram0
 .lock4 : { *(section_lock4)} > uram0
 .lock5 : { *(section_lock5)} > uram0
 .lock6 : { *(section_lock6)} > uram0
 .lock7 : { *(section_lock7)} > uram0
 .lock8 : { *(section_lock8)} > uram0
 .lock9 : { *(section_lock9)} > uram0
 .lock10 : { *(section_lock10)} > uram0
 .lock11 : { *(section_lock11)} > uram0
 .lock12 : { *(section_lock12)} > uram0

 .lock13 : { *(section_lock13)} > uram0

 .lock14 : { *(section_lock14)} > uram0

 .lock15 : { *(section_lock15)} > uram0

 .lock16 : { *(section_lock16)} > uram0

 .lock17 : { *(section_lock17)} > uram0

 .lock18 : { *(section_lock18)} > uram0

 .lock19 : { *(section_lock19)} > uram0

 .lock20 : { *(section_lock20)} > uram0

 .lock21 : { *(section_lock21)} > uram0

 .lock22 : { *(section_lock22)} > uram0

 .lock23 : { *(section_lock23)} > uram0

 .lock24 : { *(section_lock24)} > uram0

 .lock25 : { *(section_lock25)} > uram0

 .lock26 : { *(section_lock26)} > uram0

 .lock27 : { *(section_lock27)} > uram0

 .lock28 : { *(section_lock28)} > uram0
 __data_load_start = LOADADDR(.data);
 __data_load_end = LOADADDR(.data) + SIZEOF(.data);
    .bss : {
  __bss_start = ABSOLUTE(.);
  *(.sbss*)
  *(COMMON)
  *(.common*)
  *(.scommon*)
  *(.bss*)
  __bss_end = ABSOLUTE(.);
 } > mem_ram
 __system_uncached_heap_start = .;
 __system_uncached_heap_end = ORIGIN(mem_ram) + LENGTH(mem_ram);
 . = ALIGN(16);
 __initial_stack = __system_uncached_heap_end;
  /DISCARD/ : { *(.eh_frame) }
  ASSERT(__system_uncached_heap_start == __bss_end, "Unlinked sections found, please report a bug")
}
ENTRY(arch_init)
