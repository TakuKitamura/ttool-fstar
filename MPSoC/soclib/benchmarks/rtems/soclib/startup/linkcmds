/*
 *  $Id: linkcmds,v 1.14 2008/04/04 19:42:40 joel Exp $
 *
 *  Based on jmr3904app-dram.ld from newlib 1.8.2
 *  Modified by Alexandre Becoulet for the SoCLib BSP
 */

/*
 Memory Layout:
 0x80000000 : physical ram start
 	      exception handlers
 0x80020000 : executable load address, boot adress
              code and data ( at most 512k )
 0x800a0000 : heap space
 0x803a0000 : stack
 0x803a4000 : workspace ( at least 376k )
 0x80400000 : physical ram end
*/

_RamBase = DEFINED(_RamBase) ? _RamBase       : 0x80000000;
_RamSize = DEFINED(_RamSize) ? _RamSize       : 0x00400000;
_HeapSize = DEFINED(_HeapSize) ? _HeapSize    : 0x00300000;
_StackSize = DEFINED(_StackSize) ? _StackSize : 0x00004000;

MEMORY
{
   ram      : ORIGIN = 0x80020000, LENGTH = 0x003e0000
   reset     : ORIGIN = 0xbfc00000, LENGTH = 0x200
}

SECTIONS
{ 
  .reset : 
    { 
      *(.reset*)
    } > reset

    .text : 
    { 
       _ftext = . ;
       eprol  =  .;

      */start.o(.text)

      *(.text*)
      *(.gnu.linkonce.t*)
      *(.mips16.fn.*)
      *(.mips16.call.*)
      PROVIDE (__runtime_reloc_start = .);
      *(.rel.sdata)
      *(.rel.dyn)
      PROVIDE (__runtime_reloc_stop = .);

      /*
       * Special FreeBSD sysctl sections.
       */
      . = ALIGN (16);
      __start_set_sysctl_set = .;
      *(set_sysctl_*);
      __stop_set_sysctl_set = ABSOLUTE(.);
      *(set_domain_*);
      *(set_pseudo_*);

      *(.gcc_except_table*)
      *(.eh_frame_hdr)
      *(.eh_frame)
    } > ram

  .init :
  {
	KEEP(*(.init))
  } > ram

  .fini :
  {
	KEEP(*(.fini))
  } > ram

  .ctors    :
  {
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */

    KEEP (*crtbegin.o(.ctors))

    /* We don't want to include the .ctor section from
       from the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */

    KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
  } > ram

  .dtors    :
  {
    KEEP (*crtbegin.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))

    etext  =  .;
    _etext  =  .;
  } > ram

  .rdata : {
    *(.rdata)
    *(.rodata)
    *(.rodata.*)
    *(.gnu.linkonce.r*)
  } > ram


  .data : {
    _fdata = ALIGN(16);

    *(.reginfo)
    *(.data)
    *(.data.*)
    *(.gnu.linkonce.d*)
  } > ram

  .jcr : {
    . = ALIGN(8);
    KEEP (*(.jcr))
    _gp = ALIGN(16) + 0x7440;
    __global = _gp;
  } > ram

  .lit8 : {
    *(.lit8)
  } > ram
  .lit4 : {
    *(.lit4)
  } > ram

  .sdata : {
    *(.sdata)
    *(.sdata.*)
    *(.gnu.linkonce.s*)
  } > ram

  .sbss : {
    edata  =  .;
   _edata  =  .;
   _fbss = .;
    *(.sbss*)
    *(.scommon)
  } > ram

  .bss : {
    _bss_start = . ;
    *(.bss .bss.* .gnu.linkonce.b.*)
    *(COMMON)

    /** Heap */
    . = ALIGN (16);
    _HeapBase = .;
    . += _HeapSize;
    _HeapEnd = .;

    /** Stack */
    _stack_limit = .;
    . += _StackSize;
    . = ALIGN (16);
    __stack = .;
    _stack_init = .;
    _clear_end = .;

    /** Workspace */
    _WorkspaceBase = .;
    end = .;
    _end = .;

    _ram_end = _RamBase + _RamSize;
  } > ram

  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }

  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }

  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }

  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }

  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
}
