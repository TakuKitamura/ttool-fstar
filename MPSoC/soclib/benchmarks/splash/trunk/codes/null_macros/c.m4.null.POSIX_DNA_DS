divert(-1)
define(NEWPROC,) dnl

define(BARRIER, `{
	unsigned long	Error, Cycle;
	long		Cancel, Temp;
	Error = pthread_mutex_lock(&($1).mutex);
	if (Error != 0) {
		printf("Error while trying to get lock in barrier.\n");
		exit(-1);
	}

	Cycle = ($1).cycle;
	if (++($1).counter != ($2)) {
		//printf("-> wait\n");
		pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, (int *)&Cancel);
		while (Cycle == ($1).cycle) {
			Error = pthread_cond_wait(&($1).cv, &($1).mutex);
			if (Error != 0) {
				break;
			}
		}
		pthread_setcancelstate(Cancel, (int *)&Temp);
	} else {
		($1).cycle = !($1).cycle;
		($1).counter = 0;
		//printf("-> broadcast\n");
		Error = pthread_cond_broadcast(&($1).cv);
	}
	pthread_mutex_unlock(&($1).mutex);
}')

define(BARDEC, `
struct {
	pthread_mutex_t	mutex;
	pthread_cond_t	cv;
	unsigned long	counter;
	unsigned long	cycle;
} ($1);
')

define(BARINIT, `{
	unsigned long	Error;

	Error = pthread_mutex_init(&($1).mutex, NULL);
	if (Error != 0) {
		printf("Error while initializing barrier.\n");
		exit(-1);
	}

	Error = pthread_cond_init(&($1).cv, NULL);
	if (Error != 0) {
		printf("Error while initializing barrier.\n");
		pthread_mutex_destroy(&($1).mutex);
		exit(-1);
	}

	($1).counter = 0;
	($1).cycle = 0;
}')

define(BAREXCLUDE, `{;}')

define(BARINCLUDE, `{;}')

define(GSDEC, `long ($1);')
define(GSINIT, `{ ($1) = 0; }')
define(GETSUB, `{
  if (($1)<=($3))
    ($2) = ($1)++;
  else {
    ($2) = -1;
    ($1) = 0;
  }
}')

define(NU_GSDEC, `long ($1);')
define(NU_GSINIT, `{ ($1) = 0; }')
define(NU_GETSUB, `GETSUB($1,$2,$3,$4)')

define(ADEC, `long ($1);')
define(AINIT, `{;}')
define(PROBEND, `{;}')

define(LOCKDEC, `pthread_mutex_t ($1);')
define(LOCKINIT, `{pthread_mutex_init(&($1), NULL);}')
define(LOCK, `{pthread_mutex_lock(&($1));}')
define(UNLOCK, `{pthread_mutex_unlock(&($1));}')

define(NLOCKDEC, `long ($1);')
define(NLOCKINIT, `{;}')
define(NLOCK, `{;}')
define(NUNLOCK, `{;}')

define(ALOCKDEC, `pthread_mutex_t $1[$2];')
define(ALOCKINIT, `{
	unsigned long	i, Error;

	for (i = 0; i < $2; i++) {
		Error = pthread_mutex_init(&$1[i], NULL);
		if (Error != 0) {
			printf("Error while initializing array of locks.\n");
			exit(-1);
		}
	}
}')
define(ALOCK, `{pthread_mutex_lock(&$1[$2]);}')
define(AULOCK, `{pthread_mutex_unlock(&$1[$2]);}')

define(PAUSEDEC, `
struct {
	pthread_mutex_t	Mutex;
	pthread_cond_t	CondVar;
	unsigned long	Flag;
} $1;
')
define(PAUSEINIT, `{
	pthread_mutex_init(&$1.Mutex, NULL);
	pthread_cond_init(&$1.CondVar, NULL);
	$1.Flag = 0;
}
')
define(CLEARPAUSE, `{
	$1.Flag = 0;
	pthread_mutex_unlock(&$1.Mutex);}
')
define(SETPAUSE, `{
	pthread_mutex_lock(&$1.Mutex);
	$1.Flag = 1;
	pthread_cond_broadcast(&$1.CondVar);
	pthread_mutex_unlock(&$1.Mutex);}
')
define(EVENT, `{;}')
define(WAITPAUSE, `{
	pthread_mutex_lock(&$1.Mutex);
	if ($1.Flag == 0) {
		pthread_cond_wait(&$1.CondVar, &$1.Mutex);
	}
}')
define(PAUSE, `{;}')

define(AUG_ON, ` ')
define(AUG_OFF, ` ')
define(TRACE_ON, ` ')
define(TRACE_OFF, ` ')
define(REF_TRACE_ON, ` ')
define(REF_TRACE_OFF, ` ')
define(DYN_TRACE_ON, `;')
define(DYN_TRACE_OFF, `;')
define(DYN_REF_TRACE_ON, `;')
define(DYN_REF_TRACE_OFF, `;')
define(DYN_SIM_ON, `;')
define(DYN_SIM_OFF, `;')
define(DYN_SCHED_ON, `;')
define(DYN_SCHED_OFF, `;')
define(AUG_SET_LOLIMIT, `;')
define(AUG_SET_HILIMIT, `;')

define(MENTER, `{;}')
define(DELAY, `{;}')
define(CONTINUE, `{;}')
define(MEXIT, `{;}')
define(MONINIT, `{;}')

define(WAIT_FOR_END, `{
	unsigned long	i, Error;
	for(i=0;i<pthread_count;i++)
	{
	Error = pthread_join(pthread_array[i],NULL);
	if (Error != 0) {
	printf("Error in pthread_join().\n");
	exit(-1);
	}
	}
}')

define(CREATE, `{
		long i,Error;
			for (i = 1; i < ($2); i++)
			{
#ifdef DISTRIBUTED
			pthread_attr_init(&(attr[i]));	
			if (CPU_MP_ID()==i)
			{
				assert(false);
			}
			else
			{
				attr[i].procid = i;
			}
			pthread_create(&(pthread_array[pthread_count++]),&(attr[i]),(void * (*)(void *))($1),NULL); 
#else
			pthread_create(&(pthread_array[pthread_count++]),NULL,(void * (*)(void *))($1),NULL); 
#endif
			}
		$1();
		}
')

define(MAIN_INITENV, `
pthread_array = (pthread_t*)malloc(sizeof(pthread_t)*($1));
#ifdef DISTRIBUTED
attr = (pthread_attr_t*)malloc(sizeof(pthread_attr_t)*($1));
#endif
')

define(MAIN_END, 
`printf("************* END OF MAIN ****************\n");
*(volatile int*)0x0=0;')

define(MAIN_ENV,`
#include <pthread.h>
#include <sys/time.h>
#include <unistd.h>
#include <assert.h>
#include <stdlib.h>
static pthread_t *pthread_array; // tima macro
#ifdef DISTRIBUTED
pthread_attr_t *attr; // thread attributes to pin threads on each processor
#endif
static unsigned int pthread_count = 0;
')

define(ENV, ` ')
define(EXTERN_ENV, `
#include <pthread.h>
#include <sys/time.h>
#include <unistd.h>
#include <stdlib.h>
')

define(G_MALLOC, `malloc($1);')
define(G_FREE, `;')
define(G_MALLOC_F, `malloc($1)')
define(NU_MALLOC, `malloc($1);')
define(NU_FREE, `;')
define(NU_MALLOC_F, `malloc($1)')

define(GET_HOME, `{($1) = 0;}')
define(GET_PID, `{($1) = 0;}')
define(AUG_DELAY, `{sleep ($1);}')
define(ST_LOG, `{;}')
define(SET_HOME, `{;}')
define(CLOCK, `{
	($1) = 0;
}')
divert(0)
