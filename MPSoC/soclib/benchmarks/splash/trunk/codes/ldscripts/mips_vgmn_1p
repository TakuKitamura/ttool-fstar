ENTRY (_start)
STARTUP(crt0.o)
GROUP(-lc -lgcc)

MEMORY
{
	reset  :  ORIGIN = 0xBFC00000,    LENGTH = 0x00010000
	excep :  ORIGIN = 0x80000000,    LENGTH = 0x00010000
	text :    ORIGIN = 0x08000000,    LENGTH = 0x01000000
}

PHDRS
{
	reset PT_LOAD FILEHDR PHDRS ;
	excep PT_LOAD ;
	text PT_LOAD ;
	data PT_LOAD ;
	heap PT_NULL ;
	stack PT_NULL ;
	debug PT_NULL ;
	bss PT_LOAD ;
}

SECTIONS
{
	.debug_aranges 0x0 : { *(.debug_aranges*) } :debug
	.debug_info 0x0 : { *(.debug_info*) } :debug
	.debug_abbrev 0x0 : { *(.debug_abbrev*) } :debug
	.debug_line 0x0 : { *(.debug_line*) } :debug
	.debug_ranges 0x0 : { *(.debug_ranges*) } :debug
	.debug_str 0x0 : { *(.debug_str*) } :debug
	.debug_frame 0x0 : { *(.debug_frame*) } :debug
	.debug_loc 0x0 : { *(.debug_loc*) } :debug
	.debug_pubnames 0x0 : { *(.debug_pubnames*) } :debug
	.pdr 0x0 : { *(.pdr*) } :debug
	.comment 0x0 : { *(.comment*) } :debug
	.gnu.attributes 0x0 : { *(.gnu.attributes*) } :debug

	.reset 0xBFC00000 : { *(.reset) } > reset :reset

	.excep 0x80000180 : { *(.excep) } > excep :excep
	
	.init 0x08000000 : { *(.init*) } > text :text

	.ctors ALIGN(8) : { *(.ctors*) } > text :text

	.text ALIGN(8) : { *(.text*) } > text :text

	.fini ALIGN(8) : { *(.fini*) } > text :text

	.dtors ALIGN(8) : { *(.dtors*) } > text :text

	.jcr ALIGN(8) : { *(.jcr*) } > text :text

	.sdata ALIGN(8) : { *(.sdata*) *(.scommon*) } > text :data

	.sbss ALIGN(0x8): { *(.sbss*) } > text :bss

	.rodata ALIGN(0x8) : { *(.rodata*) } > text :data

	.reginfo ALIGN(0x8) : { *(.reginfo*) } > text :data

	.data ALIGN(0x8) : { *(.data*) *(.glue_7*) *(.eh_frame*) } > text :data

	.os_config ALIGN(0x8): {
		OS_N_DRIVERS = .; LONG(0x2)
		OS_DRIVERS_LIST = .; LONG(soclib_system_module) LONG(fdaccess_module)
		
		OS_N_FILESYSTEMS = .; LONG(0x2)
		OS_FILESYSTEMS_LIST = .; LONG(devfs_module) LONG(rootfs_module)

		OS_THREAD_STACK_SIZE = .; LONG(0x8000)

		OS_KERNEL_HEAP_ADDRESS = .; LONG(ADDR(.kheap))
		OS_KERNEL_HEAP_SIZE = .; LONG(0x100000)
	} > text :data

	.hal ALIGN(0x8): {
		PLATFORM_N_MIPSMIPS32 = .; LONG(1)
		APP_ENTRY_POINT = .; LONG(_main);

		CPU_OS_ENTRY_POINT = dna_kickstart;
		CPU_SVC_STACK_ADDR  = ABSOLUTE(ADDR(.sysstack));

		CPU_BSS_START = .; LONG(ADDR(.bss))
		CPU_BSS_END = .; LONG(__hal_bss_end)

		SOCLIB_TIMER_NDEV = .; LONG(0x1)
		SOCLIB_TIMER_DEVICES = .; LONG(2) LONG(0xC1000000)

		SOCLIB_TTY_NDEV = .; LONG(0x1)
		SOCLIB_TTY_DEVICES = .; LONG(3) LONG(0xC0000000)

		SOCLIB_FDACCESS_NDEV = .; LONG(0x1)
		SOCLIB_FDACCESS_DEVICES = .; LONG(5) LONG(0xC2000000)

		CHANNEL_RDV_NDEV = .; LONG(16);
		SOCLIB_FB_DEVICE = .; LONG(0xC3000000);

	} > text :data

	.sysstack ALIGN(0x8) + 0x10000 : { } > text :stack

	.bss ALIGN(0x8): {
		*(.bss*) *(.rel*) *(COMMON) __hal_bss_end = .;
	} > text :bss

	.kheap ALIGN(0x8) : {} > text :heap

	.uheap ALIGN(0x8) + 0x100000: {_end = .;} > text :heap
}

