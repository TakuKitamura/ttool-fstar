
# -*- python -*-

__id__ = "$Id: vci.sd 2323 2013-05-01 15:04:48Z alain $"
__version__ = "$Revision: 2323 $"

MetaSignal('caba:vci',
           tmpl_parameters = [parameter.Module('vci_param', default = 'caba:vci_param')],
           classname = 'soclib::caba::VciSignals',
           header_files = ['../source/include/vci_signals.h'],
           accepts = {
            	'caba:vci_initiator': 1,
            	'caba:vci_target': 1,
            	'caba:vci_monitor': True,
            	'caba:vci_monitor_out': True,
            	},
           sub_signals = {
                'rspack': SubSignal('caba:bit'),
                'rspval': SubSignal('caba:bit'),
                'rdata':  SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('cell_size') * 8),
                'reop':   SubSignal('caba:bit'),
                'rerror': SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('rerror_size')),
                'rsrcid': SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('srcid_size')),
                'rtrdid': SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('trdid_size')),
                'rpktid': SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('pktid_size')),

                'cmdack': SubSignal('caba:bit'),
                'cmdval': SubSignal('caba:bit'),
                'address':SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('addr_size')),
                'be':     SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('cell_size')),
                'cmd':    SubSignal('caba:word', word_t = 'sc:uint', W = 2),
                'contig': SubSignal('caba:bit'),
                'wdata':  SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('cell_size') * 8),
                'eop':    SubSignal('caba:bit'),
                'cons':   SubSignal('caba:bit'),
                'plen':   SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('plen_size')),
                'wrap':   SubSignal('caba:bit'),
                'cfixed': SubSignal('caba:bit'),
                'clen':   SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('clen_size')),
                'srcid':  SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('srcid_size')),
                'trdid':  SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('trdid_size')),
                'pktid':  SubSignal('caba:word', word_t = 'sc:uint', W = parameter.Reference('pktid_size')),
                },
           can_metaconnect = True,
	   )

PortDecl('caba:vci_initiator',
         tmpl_parameters = [parameter.Module('vci_param', default = 'caba:vci_param')],
         classname = 'soclib::caba::VciInitiator',
         signal = 'caba:vci',
         header_files = ['../source/include/vci_initiator.h'],
         ports = [
              Port('caba:bit_out', 'rspack'),
              Port('caba:bit_in', 'rspval'),
              Port('caba:word_in', 'rdata', word_t = 'sc:uint', W = parameter.Reference('cell_size') * 8),
              Port('caba:bit_in', 'reop'),
              Port('caba:word_in', 'rerror', word_t = 'sc:uint', W = parameter.Reference('rerror_size')),
              Port('caba:word_in', 'rsrcid', word_t = 'sc:uint', W = parameter.Reference('srcid_size')),
              Port('caba:word_in', 'rtrdid', word_t = 'sc:uint', W = parameter.Reference('trdid_size')),
              Port('caba:word_in', 'rpktid', word_t = 'sc:uint', W = parameter.Reference('pktid_size')),
    
              Port('caba:bit_out', 'cmdack'),
              Port('caba:bit_in', 'cmdval'),
              Port('caba:word_in', 'address', word_t = 'sc:uint', W = parameter.Reference('addr_size')),
              Port('caba:word_in', 'be', word_t = 'sc:uint', W = parameter.Reference('cell_size')),
              Port('caba:word_in', 'cmd', word_t = 'sc:uint', W = 2),
              Port('caba:bit_out', 'contig'),
              Port('caba:word_in', 'wdata', word_t = 'sc:uint', W = parameter.Reference('cell_size') * 8),
              Port('caba:bit_out', 'eop'),
              Port('caba:bit_out', 'cons'),
              Port('caba:word_in', 'plen', word_t = 'sc:uint', W = parameter.Reference('plen_size')),
              Port('caba:bit_out', 'wrap'),
              Port('caba:bit_out', 'cfixed'),
              Port('caba:word_in', 'clen', word_t = 'sc:uint', W = parameter.Reference('clen_size')),
              Port('caba:word_in', 'srcid', word_t = 'sc:uint', W = parameter.Reference('srcid_size')),
              Port('caba:word_in', 'trdid', word_t = 'sc:uint', W = parameter.Reference('trdid_size')),
              Port('caba:word_in', 'pktid', word_t = 'sc:uint', W = parameter.Reference('pktid_size')),
              ],
           can_metaconnect = True,
	 )

PortDecl('caba:vci_target',
         tmpl_parameters = [parameter.Module('vci_param', default = 'caba:vci_param')],
         classname = 'soclib::caba::VciTarget',
         signal = 'caba:vci',
         header_files = ['../source/include/vci_target.h'],
         ports = [
              Port('caba:bit_in', 'rspack'),
              Port('caba:bit_out', 'rspval'),
              Port('caba:word_out', 'rdata', word_t = 'sc:uint', W = parameter.Reference('cell_size') * 8),
              Port('caba:bit_out', 'reop'),
              Port('caba:word_out', 'rerror', word_t = 'sc:uint', W = parameter.Reference('rerror_size')),
              Port('caba:word_out', 'rsrcid', word_t = 'sc:uint', W = parameter.Reference('srcid_size')),
              Port('caba:word_out', 'rtrdid', word_t = 'sc:uint', W = parameter.Reference('trdid_size')),
              Port('caba:word_out', 'rpktid', word_t = 'sc:uint', W = parameter.Reference('pktid_size')),
    
              Port('caba:bit_in', 'cmdack'),
              Port('caba:bit_out', 'cmdval'),
              Port('caba:word_out', 'address', word_t = 'sc:uint', W = parameter.Reference('addr_size')),
              Port('caba:word_out', 'be', word_t = 'sc:uint', W = parameter.Reference('cell_size')),
              Port('caba:word_out', 'cmd', word_t = 'sc:uint', W = 2),
              Port('caba:bit_in', 'contig'),
              Port('caba:word_out', 'wdata', word_t = 'sc:uint', W = parameter.Reference('cell_size') * 8),
              Port('caba:bit_in', 'eop'),
              Port('caba:bit_in', 'cons'),
              Port('caba:word_out', 'plen', word_t = 'sc:uint', W = parameter.Reference('plen_size')),
              Port('caba:bit_in', 'wrap'),
              Port('caba:bit_in', 'cfixed'),
              Port('caba:word_out', 'clen', word_t = 'sc:uint', W = parameter.Reference('clen_size')),
              Port('caba:word_out', 'srcid', word_t = 'sc:uint', W = parameter.Reference('srcid_size')),
              Port('caba:word_out', 'trdid', word_t = 'sc:uint', W = parameter.Reference('trdid_size')),
              Port('caba:word_out', 'pktid', word_t = 'sc:uint', W = parameter.Reference('pktid_size')),
              ],
           can_metaconnect = True,
	 )

PortDecl('caba:vci_monitor',
         tmpl_parameters = [parameter.Module('vci_param', default = 'caba:vci_param')],
         classname = 'soclib::caba::VciMonitor',
         signal = 'caba:vci',
         header_files = ['../source/include/vci_monitor.h'],
		 extensions = ['dsx:port_peer=ignore'],
         ports = [
              Port('caba:bit_in', 'rspack'),
              Port('caba:bit_in', 'rspval'),
              Port('caba:word_in', 'rdata', word_t = 'sc:uint', W = parameter.Reference('cell_size') * 8),
              Port('caba:bit_in', 'reop'),
              Port('caba:word_in', 'rerror', word_t = 'sc:uint', W = parameter.Reference('rerror_size')),
              Port('caba:word_in', 'rsrcid', word_t = 'sc:uint', W = parameter.Reference('srcid_size')),
              Port('caba:word_in', 'rtrdid', word_t = 'sc:uint', W = parameter.Reference('trdid_size')),
              Port('caba:word_in', 'rpktid', word_t = 'sc:uint', W = parameter.Reference('pktid_size')),
    
              Port('caba:bit_in', 'cmdack'),
              Port('caba:bit_in', 'cmdval'),
              Port('caba:word_in', 'address', word_t = 'sc:uint', W = parameter.Reference('addr_size')),
              Port('caba:word_in', 'be', word_t = 'sc:uint', W = parameter.Reference('cell_size')),
              Port('caba:word_in', 'cmd', word_t = 'sc:uint', W = 2),
              Port('caba:bit_in', 'contig'),
              Port('caba:word_in', 'wdata', word_t = 'sc:uint', W = parameter.Reference('cell_size') * 8),
              Port('caba:bit_in', 'eop'),
              Port('caba:bit_in', 'cons'),
              Port('caba:word_in', 'plen', word_t = 'sc:uint', W = parameter.Reference('plen_size')),
              Port('caba:bit_in', 'wrap'),
              Port('caba:bit_in', 'cfixed'),
              Port('caba:word_in', 'clen', word_t = 'sc:uint', W = parameter.Reference('clen_size')),
              Port('caba:word_in', 'srcid', word_t = 'sc:uint', W = parameter.Reference('srcid_size')),
              Port('caba:word_in', 'trdid', word_t = 'sc:uint', W = parameter.Reference('trdid_size')),
              Port('caba:word_in', 'pktid', word_t = 'sc:uint', W = parameter.Reference('pktid_size')),
              ],
           can_metaconnect = True,
	 )

PortDecl('caba:vci_monitor_out',
         tmpl_parameters = [parameter.Module('vci_param', default = 'caba:vci_param')],
         classname = 'soclib::caba::VciMonitorOut',
         signal = 'caba:vci',
         header_files = ['../source/include/vci_monitor_out.h'],
		 extensions = ['dsx:port_peer=ignore'],
         ports = [
              Port('caba:bit_out', 'rspack'),
              Port('caba:bit_out', 'rspval'),
              Port('caba:word_out', 'rdata', word_t = 'sc:uint', W = parameter.Reference('cell_size') * 8),
              Port('caba:bit_out', 'reop'),
              Port('caba:word_out', 'rerror', word_t = 'sc:uint', W = parameter.Reference('rerror_size')),
              Port('caba:word_out', 'rsrcid', word_t = 'sc:uint', W = parameter.Reference('srcid_size')),
              Port('caba:word_out', 'rtrdid', word_t = 'sc:uint', W = parameter.Reference('trdid_size')),
              Port('caba:word_out', 'rpktid', word_t = 'sc:uint', W = parameter.Reference('pktid_size')),
    
              Port('caba:bit_out', 'cmdack'),
              Port('caba:bit_out', 'cmdval'),
              Port('caba:word_out', 'address', word_t = 'sc:uint', W = parameter.Reference('addr_size')),
              Port('caba:word_out', 'be', word_t = 'sc:uint', W = parameter.Reference('cell_size')),
              Port('caba:word_out', 'cmd', word_t = 'sc:uint', W = 2),
              Port('caba:bit_out', 'contig'),
              Port('caba:word_out', 'wdata', word_t = 'sc:uint', W = parameter.Reference('cell_size') * 8),
              Port('caba:bit_out', 'eop'),
              Port('caba:bit_out', 'cons'),
              Port('caba:word_out', 'plen', word_t = 'sc:uint', W = parameter.Reference('plen_size')),
              Port('caba:bit_out', 'wrap'),
              Port('caba:bit_out', 'cfixed'),
              Port('caba:word_out', 'clen', word_t = 'sc:uint', W = parameter.Reference('clen_size')),
              Port('caba:word_out', 'srcid', word_t = 'sc:uint', W = parameter.Reference('srcid_size')),
              Port('caba:word_out', 'trdid', word_t = 'sc:uint', W = parameter.Reference('trdid_size')),
              Port('caba:word_out', 'pktid', word_t = 'sc:uint', W = parameter.Reference('pktid_size')),
              ],
           can_metaconnect = True,
	 )

Module('caba:vci_buffers',
	   header_files = ['../source/include/vci_buffers.h'],
	   uses = [
		Uses('common:address_decoding_table', input_t = 'uint32_t', output_t = 'bool'),
		Uses('common:address_decoding_table', input_t = 'uint32_t', output_t = 'int'),
		Uses('common:address_masking_table', data_t = 'uint32_t'),
		Uses('common:dpp'),
	],
	 )

Module('caba:vci_param',
	   classname = 'soclib::caba::VciParams',
	   tmpl_parameters = [
		parameter.Int('cell_size'),
		parameter.Int('plen_size'),
		parameter.Int('addr_size'),
		parameter.Int('rerror_size'),
		parameter.Int('clen_size'),
		parameter.Int('rflag_size'),
		parameter.Int('srcid_size'),
		parameter.Int('pktid_size'),
		parameter.Int('trdid_size'),
		parameter.Int('wrplen_size'),
		],
	   header_files = ['../source/include/vci_param.h',],
)

Module('caba:vci_param_bis',
	   classname = 'soclib::caba::VciParamsBis',
	   tmpl_parameters = [
		parameter.Int('cell_size_bis'),
		parameter.Int('plen_size_bis'),
		parameter.Int('addr_size_bis'),
		parameter.Int('rerror_size_bis'),
		parameter.Int('clen_size_bis'),
		parameter.Int('rflag_size_bis'),
		parameter.Int('srcid_size_bis'),
		parameter.Int('pktid_size_bis'),
		parameter.Int('trdid_size_bis'),
		parameter.Int('wrplen_size_bis'),
		],
	   header_files = ['../source/include/vci_param.h',],
)

Module('caba:vci_param_ter',
	   classname = 'soclib::caba::VciParamsTer',
	   tmpl_parameters = [
		parameter.Int('cell_size_ter'),
		parameter.Int('plen_size_ter'),
		parameter.Int('addr_size_ter'),
		parameter.Int('rerror_size_ter'),
		parameter.Int('clen_size_ter'),
		parameter.Int('rflag_size_ter'),
		parameter.Int('srcid_size_ter'),
		parameter.Int('pktid_size_ter'),
		parameter.Int('trdid_size_ter'),
		parameter.Int('wrplen_size_ter'),
		],
	   header_files = ['../source/include/vci_param.h',],
)
