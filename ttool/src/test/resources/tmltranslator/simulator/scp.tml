//TML Application - FORMAT 0.1
//Application: /Users/localapvrille/TToolgit/TTool/modeling/DIPLODOCUS/SmartCardProtocol.xml
//Generated: Fri Jul 19 10:32:01 CEST 2019

//CHANNEL AppC__fromAtoT BRNBW 4 OUT AppC__Application IN AppC__TCPIP
CHANNEL AppC__fromDtoSC BRNBW 40 OUT AppC__InterfaceDevice IN AppC__SmartCard
CHANNEL AppC__fromPtoT BRNBW 4 OUT AppC__SmartCard IN AppC__TCPIP
CHANNEL AppC__fromSCtoD BRNBW 40 OUT AppC__SmartCard IN AppC__InterfaceDevice
CHANNEL AppC__fromTtoA BRNBW 4 OUT AppC__TCPIP IN AppC__Application
CHANNEL AppC__fromTtoP BRNBW 4 OUT AppC__TCPIP IN AppC__SmartCard
CHANNEL AppC__temp NBRNBW 4 OUT AppC__TCPIP IN AppC__TCPIPChannels

//EVENT AppC__abort__AppC__abort() NINB 1 AppC__Application AppC__TCPIP
EVENT AppC__answerToReset__AppC__answerToReset() NINB 1 AppC__SmartCard AppC__InterfaceDevice
EVENT AppC__close__AppC__close() NINB 1 AppC__Application AppC__TCPIP
EVENT AppC__connectionOpened__AppC__connectionOpened() NIB 8 AppC__Application AppC__SmartCard
EVENT AppC__data_Ready_SC__AppC__data_Ready_SC() INF AppC__SmartCard AppC__InterfaceDevice
EVENT AppC__data_Ready__AppC__data_Ready(int, bool) INF AppC__InterfaceDevice AppC__SmartCard
EVENT AppC__end__AppC__end() NINB 1 AppC__InterfaceDevice AppC__SmartCard
EVENT AppC__open__AppC__open() NINB 1 AppC__Application AppC__TCPIP
EVENT AppC__opened__AppC__opened() INF AppC__TCPIP AppC__Application
EVENT AppC__pTSConfirm__AppC__pTSConfirm() NINB 1 AppC__SmartCard AppC__InterfaceDevice
EVENT AppC__pTS__AppC__pTS() NINB 1 AppC__InterfaceDevice AppC__SmartCard
EVENT AppC__receive_Application__AppC__receive_Application() INF AppC__TCPIP AppC__Application
EVENT AppC__receive__AppC__receive() INF AppC__SmartCard AppC__TCPIP
EVENT AppC__reset__AppC__reset() NINB 1 AppC__InterfaceDevice AppC__SmartCard
EVENT AppC__send_TCP__AppC__send_TCP() INF AppC__Application AppC__TCPIP
EVENT AppC__send__AppC__send() INF AppC__TCPIP AppC__SmartCard
EVENT AppC__stop__AppC__stop() NINB 1 AppC__TCPIP AppC__Timer
EVENT AppC__timeOut__AppC__timeOut() NINB 1 AppC__Timer AppC__TCPIPEvents

//REQUEST AppC__activation() AppC__InterfaceDevice AppC__SmartCard
REQUEST AppC__req_Timer() AppC__TCPIP AppC__Timer
REQUEST AppC__start_Application() AppC__SmartCard AppC__Application
REQUEST AppC__start_TCP_IP() AppC__Application AppC__SmartCard AppC__TCPIPRequests

TASK AppC__Application
//Local variables

//NOTIFY AppC__open__AppC__open
WAIT AppC__opened__AppC__opened
NOTIFY AppC__connectionOpened__AppC__connectionOpened
EXECI 10
WRITE AppC__fromAtoT 1
NOTIFY AppC__send_TCP__AppC__send_TCP
CASERAND 50
NOTIFY AppC__close__AppC__close
CASERAND 50
NOTIFY AppC__abort__AppC__abort
Behavior
ENDCASERAND
ENDCASERAND
ENDRAND
ENDTASK
RAND
TASKOP

TASK AppC__InterfaceDevice
//Local variables
int resetType = 0
int x = 0
int i = 0
int nbOfComputedPackets = 1
bool b

//NOTIFYREQUEST AppC__activation
NOTIFY AppC__reset__AppC__reset
WAIT AppC__answerToReset__AppC__answerToReset
NOTIFY AppC__pTS__AppC__pTS
WAIT AppC__pTSConfirm__AppC__pTSConfirm
FOR(i=0; i<nbOfComputedPackets; i = i +1)
CASERAND 50
WRITE AppC__fromDtoSC 1
NOTIFY AppC__data_Ready__AppC__data_Ready x b
CASERAND 50
NOTIFIED AppC__data_Ready_SC__AppC__data_Ready_SC x
IF (x==0)
ORIF (x>0)
WAIT AppC__data_Ready_SC__AppC__data_Ready_SC
READ AppC__fromSCtoD 1
NOTIFY AppC__end__AppC__end
Behavior
ENDCASERAND
ENDCASERAND
ENDFOR
ENDIF
ENDRAND
ENDTASK
RAND
TASKOP

TASK AppC__SmartCard
//Local variables
int resetType = 0
int a = 0
bool b
int i = 0
int j = 0
int x = 0
int tcpctrl__a
int tcpctrl__state
int t

//WAIT AppC__reset__AppC__reset
NOTIFY AppC__answerToReset__AppC__answerToReset
WAIT AppC__pTS__AppC__pTS
NOTIFY AppC__pTSConfirm__AppC__pTSConfirm
NOTIFYREQUEST AppC__start_TCP_IP
NOTIFYREQUEST AppC__start_Application
WAIT AppC__connectionOpened__AppC__connectionOpened
FOR(j=0; x==0; j = j)
CASE AppC__send__AppC__send
READ AppC__fromTtoP 1
NOTIFY AppC__data_Ready_SC__AppC__data_Ready_SC
WRITE AppC__fromSCtoD 1
CASE AppC__data_Ready__AppC__data_Ready t b
READ AppC__fromDtoSC 1
NOTIFY AppC__receive__AppC__receive
WRITE AppC__fromPtoT 1
CASE AppC__end__AppC__end
Behavior
ENDCASE
ENDCASE
ENDCASE
ENDFOR
ENDSELECTEVT
ENDTASK
SELECTEVT
TASKOP

TASK AppC__TCPIP
//Local variables
int wind = 64
int seqNum = 0
int i
int j
int a = 0
int b = 0
int tcpctrl__a
int tcpctrl__state

//FOR(i=0; (tcpctrl__a==0); i = i)
NOTIFIED AppC__abort__AppC__abort tcpctrl__a
IF (tcpctrl__a>0)
WAIT AppC__abort__AppC__abort
ORIF (tcpctrl__a==0)
CASE AppC__timeOut__AppC__timeOut
READ AppC__temp 1
EXECI b
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
CASE AppC__receive__AppC__receive
READ AppC__fromPtoT 1
EXECI b b
CASERAND 33
CASERAND 33
NOTIFY AppC__stop__AppC__stop
READ AppC__temp 1
CASERAND 50
EXECI b
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
WRITE AppC__temp 1
CASERAND 50
IF (tcpctrl__state==2)
ORIF (tcpctrl__state==4)
IF (tcpctrl__state==5)
ORIF (tcpctrl__state==7)
IF (tcpctrl__state==10)
CASERAND 33
IF (tcpctrl__state==4)
EXECI b
WRITE AppC__fromTtoA 1
NOTIFY AppC__receive_Application__AppC__receive_Application
EXECI b
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
CASERAND 33
IF (tcpctrl__state==1)
EXECI b
seqNum=seqNum+wind
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
NOTIFYREQUEST AppC__req_Timer
WRITE AppC__temp 1
ORIF (tcpctrl__state==3)
EXECI b
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
CASERAND 33
IF (tcpctrl__state==0)
ORIF (tcpctrl__state==0)
EXECI b
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
CASERAND 33
IF (tcpctrl__state==5)
EXECI b
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
ORIF (tcpctrl__state==4)
EXECI b
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
IF (tcpctrl__state==6)
EXECI b
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
CASE AppC__close__AppC__close
IF ((tcpctrl__state==2)or(tcpctrl__state==4))
EXECI b
seqNum=seqNum+wind
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
NOTIFYREQUEST AppC__req_Timer
WRITE AppC__temp 1
ORIF (tcpctrl__state==9)
EXECI b
seqNum=seqNum+wind
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
NOTIFYREQUEST AppC__req_Timer
WRITE AppC__temp 1
IF (tcpctrl__state==1)
CASE AppC__send_TCP__AppC__send_TCP
IF (tcpctrl__state==4)
READ AppC__fromAtoT 1
EXECI b
seqNum=seqNum+wind
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
NOTIFYREQUEST AppC__req_Timer
WRITE AppC__temp 1
ORIF (tcpctrl__state==1)
EXECI b
seqNum=seqNum+wind
WRITE AppC__fromTtoP 1
NOTIFY AppC__send__AppC__send
NOTIFYREQUEST AppC__req_Timer
WRITE AppC__temp 1
CASE AppC__open__AppC__open
NOTIFY AppC__opened__AppC__opened
IF (tcpctrl__state==0)
Behavior 
ELSE 
ELSE 
ELSE 
ELSE 
ELSE 
ELSE 
ELSE 
ELSE 
ELSE 
ELSE 
ELSE 
ELSE 
ENDCASE 
ENDCASE 
ENDCASE 
ENDCASE 
ENDCASE 
ENDCASERAND 
ENDCASERAND 
ENDCASERAND 
ENDCASERAND 
ENDCASERAND 
ENDCASERAND 
ENDCASERAND 
ENDCASERAND 
ENDFOR 
ENDIF 
ENDIF 
ENDIF 
ENDIF 
ENDIF 
ENDIF 
ENDIF 
ENDIF 
ENDIF 
ENDIF 
ENDIF 
ENDIF 
ENDIF 
ENDRAND 
ENDRAND 
ENDRAND 
ENDSELECTEVT 
ENDTASK 
RAND 
RAND 
RAND 
SELECTEVT 
TASKOP 
tcpctrl__state = 4
tcpctrl__state = 6
tcpctrl__state = 8
tcpctrl__state = 0
tcpctrl__state = 0
tcpctrl__state = 2
tcpctrl__state = 2
tcpctrl__state = 1
tcpctrl__state = 3
tcpctrl__state = 7
tcpctrl__state = 9
tcpctrl__state = 8
tcpctrl__state = 0
tcpctrl__state = 5
tcpctrl__state = 10
tcpctrl__state = 0
tcpctrl__state = 3
tcpctrl__state = 1
tcpctrl__state = 0

TASK AppC__Timer
//Local variables
int x = 0

//NOTIFIED AppC__stop__AppC__stop x
IF (x==0)
NOTIFY AppC__timeOut__AppC__timeOut
ORIF (x>0)
WAIT AppC__stop__AppC__stop
Behavior
ENDIF
ENDTASK
TASKOP
